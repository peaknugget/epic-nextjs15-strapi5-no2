{
	// Specifies the style of the gravatar default (fallback) images
	//  - identicon: A geometric pattern
	//  - mp: A simple, cartoon-style silhouetted outline of a person (does not vary by email hash)
	//  - monsterid: A monster with different colors, faces, etc
	//  - retro: 8-bit arcade-style pixelated faces
	//  - robohash: A robot with different colors, faces, etc
	//  - wavatar: A face with differing features and backgrounds
	"gitlens.defaultGravatarsStyle": "robohash",

	// Deprecated. Use the pre-release of GitLens instead
	// 
	"gitlens.insiders": null,

	// Specifies how much (if any) output will be sent to the GitLens output channel
	//  - off: Logs nothing
	//  - error: Logs only errors
	//  - warn: Logs errors and warnings
	//  - info: Logs errors, warnings, and messages
	//  - debug: Logs verbose errors, warnings, and messages. Best for issue reporting.
	"gitlens.outputLevel": "warn",

	// Specifies whether to hide or show features that require a trial or GitLens Pro and are not accessible given the opened repositories and current trial or plan
	"gitlens.plusFeatures.enabled": true,

	// Specifies the proxy configuration to use. If not specified, the proxy configuration will be determined based on VS Code or OS settings
	"gitlens.proxy": null,

	// Specifies whether to show the What's New notification after upgrading to new feature releases
	"gitlens.showWhatsNewAfterUpgrades": true,

	// Specifies whether to enable virtual repositories support
	"gitlens.virtualRepositories.enabled": true,

	// 이 설정이 false이면 새 설정 값에 관계없이 원격 분석이 전송되지 않습니다. `telemetry.telemetryLevel` 설정에 결합되어 더 이상 사용되지 않습니다.
	// 크래시 보고서를 수집할 수 있습니다. 이는 안정성을 개선하는 데 도움이 됩니다. 
	// 이 옵션을 적용하려면 다시 시작해야 합니다.
	"telemetry.enableCrashReporter": true,

	// 이 설정이 false이면 새 설정 값에 관계없이 원격 분석이 전송되지 않습니다. `telemetry.telemetryLevel` 설정으로 인해 더 이상 사용되지 않습니다.
	// 수집할 진단 데이터를 사용하도록 설정합니다. 이는 Visual Studio Code의 수행 방식과 당사의 수집 항목 및 개인 정보 보호 정책에 대해 개선이 필요한 부분[자세히 알아보기](https://go.microsoft.com/fwlink/?LinkId=521839)을 더 잘 이해하는 데 도움이 됩니다.
	"telemetry.enableTelemetry": true,

	// 문제 보고자, 설문 조사 및 기타 피드백 옵션과 같은 피드백 메커니즘을 활성화합니다.
	"telemetry.feedback.enabled": true,

	// 
	// Visual Studio Code 원격 분석, 자사 확장 원격 분석 및 참여 타사 확장 원격 분석을 제어합니다. 일부 타사 확장은 이 설정을 따르지 않을 수 있습니다. 확인하려면 특정 확장의 설명서를 참조하세요. 원격 분석은 Visual Studio Code의 성능, 개선이 필요한 부분 및 기능이 사용되는 방식을 더 잘 이해하는 데 도움이 됩니다. [Microsoft가 수집하는 데이터](https://aka.ms/vscode-telemetry) 및 [개인정보처리방침](https://go.microsoft.com/fwlink/?LinkId=521839)에 대해 자세히 알아보세요. 크래시 보고 변경 사항을 적용하려면 응용 프로그램을 완전히 다시 시작해야 합니다.
	// 
	// &nbsp;
	// 
	// 다음 표에는 각 설정과 함께 전송되는 데이터가 요약되어 있습니다.
	// 
	// |       | 크래시 보고서 | 오류 원격 분석 | 사용 데이터 |
	// |:------|:-------------:|:---------------:|:----------:|
	// | all   |       ✓       |        ✓        |     ✓      |
	// | error |       ✓       |        ✓        |     -      |
	// | crash |       ✓       |        -        |     -      |
	// | off   |       -       |        -        |     -      |
	// 
	// 
	// &nbsp;
	// 
	// ****참고:*** 이 설정이 '꺼짐'이면 다른 원격 분석 설정에 관계없이 원격 분석이 전송되지 않습니다. 이 설정이 '해제'를 제외한 다른 것으로 설정되고 더 이상 사용되지 않는 설정으로 원격 분석이 비활성화된 경우 원격 분석이 전송되지 않습니다.*
	// 
	//  - all: 사용 데이터, 오류 및 크래시 보고서를 보냅니다.
	//  - error: 일반 오류 원격 분석 및 크래시 보고서를 보냅니다.
	//  - crash: OS 수준 크래시 보고서를 보냅니다.
	//  - off: 모든 제품 원격 분석을 사용하지 않도록 설정합니다.
	"telemetry.telemetryLevel": "all",

	// An array of paths to be excluded from Dart analysis. This option should usually be set at the Workspace level. Excluded folders will also be ignored when detecting project types.
	"dart.analysisExcludedFolders": [],

	// Additional arguments to pass to the Dart Analysis Server. This setting is can be useful for troubleshooting issues with the Dart Analysis Server.
	"dart.analyzerAdditionalArgs": [],

	// The port number to be used for the Dart analyzer diagnostic server. This setting is can be useful for troubleshooting issues with the Dart Analysis Server.
	"dart.analyzerDiagnosticsPort": null,

	// The path to a custom Dart Analysis Server. This setting is intended for use by Dart Analysis Server developers. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows).
	"dart.analyzerPath": null,

	// An SSH host to run the Analysis Server.
	// This can be useful when modifying code on a remote machine using SSHFS.
	"dart.analyzerSshHost": null,

	// Additional arguments to pass to the VM running the Dart Analysis Server. This setting is can be useful for troubleshooting issues with the Dart Analysis Server.
	"dart.analyzerVmAdditionalArgs": [],

	// The port number to be used for the Dart Analysis Server VM service. This setting is intended for use by Dart Analysis Server developers.
	"dart.analyzerVmServicePort": null,

	// Whether to include symbols from the SDK and package dependencies in the "Go to Symbol in Workspace" (`cmd/ctrl`+`T`) list. This can only be disabled when using Dart 3.0 / Flutter 3.10 or later.
	"dart.includeDependenciesInWorkspaceSymbols": true,

	// Whether to show a notification the first few times an Analysis Server exception occurs.
	"dart.notifyAnalyzerErrors": true,

	// Whether to ignore workspace folders and perform analysis based on the open files, as if no workspace was open at all. This allows opening very large folders without causing them to be fully analyzed but will result a lot of re-analysis as files are opened/closed. This is **not** recommended for small or medium sized workspaces, only very large workspaces where you are working in only a small part.
	"dart.onlyAnalyzeProjectsWithOpenFiles": false,

	// Whether to show recommendations for other VS Code extensions based on the packages you're using.
	"dart.showExtensionRecommendations": true,

	// Whether to show TODOs in the Problems list. Can be a boolean to enable all TODO comments (TODO, FIXME, HACK, UNDONE) or an array of which types to enable. Older Dart SDKs may not support some TODO kinds.
	"dart.showTodos": true,

	// Whether to automatically close embedded DevTools tabs when a debug session ends.
	//  - never: Do not automatically close embedded DevTools when the debug session ends
	//  - ifOpened: Automatically close embedded DevTools the debug session ends if it was automatically opened when the session started
	//  - always: Always automatically close embedded DevTools when the debug session ends
	"dart.closeDevTools": "never",

	// Custom settings for launching DevTools. This setting is intended for use by Dart DevTools developers.
	"dart.customDevTools": {},

	// Whether to launch external DevTools windows using Chrome or the system default browser. This setting is ignored for remote workspaces (including Docker, SSH, WSL).
	//  - chrome: Locate and launch Google Chrome from your system
	//  - default: Use your systems default web browser
	"dart.devToolsBrowser": "chrome",

	// Where to open [Dart DevTools](https://dart.dev/tools/dart-devtools) pages.
	"dart.devToolsLocation": {
		"default": "beside",
		"inspector": "sidebar"
	},

	// The port number to be used for the Dart DevTools (requires restart).
	"dart.devToolsPort": null,

	// Whether to try to reuse existing DevTools windows instead of launching new ones. Only works for instances of DevTools launched by the DevTools server on the local machine.
	"dart.devToolsReuseWindows": true,

	// The theme to use for Dart DevTools.
	"dart.devToolsTheme": "dark",

	// Whether to automatically open DevTools at the start of a debug session. If embedded DevTools is enabled, this will launch the Widget Inspector embedded for Flutter projects, or launch DevTools externally in a browser for Dart projects.
	//  - never: Do not automatically launch DevTools when starting a debug session
	//  - flutter: Automatically launch DevTools when starting a Flutter debug session
	//  - always: Automatically launch DevTools when starting any debug session
	"dart.openDevTools": "never",

	// Whether to eagerly run DevTools for Flutter workspaces and share the spawned server with `flutter run`.
	"dart.shareDevToolsWithFlutter": true,

	// Whether to show notifications for widget errors that offer Inspect Widget links. This requires that the `dart.shareDevToolsWithFlutter` setting is also enabled.
	"dart.showInspectorNotificationsForWidgetErrors": true,

	// Whether to include symbols that have not been imported in the code completion list and automatically insert the required import when selecting them (requires restart).
	"dart.autoImportCompletions": true,

	// Determines when to insert comment slashes when pressing `<enter>` in the editor (requires restart).
	// 
	// When using `tripleSlash`, double-slashes will still be included when breaking existing double-slash comments across additional lines.
	//  - none: Never insert slashes automatically
	//  - tripleSlash: Insert `///` when pressing `<enter>` at the end of a triple-slash comment
	//  - all: Insert `///` when pressing `<enter>` at the end of a triple-slash comment and also `//` when pressing `<enter>` at the end of a double-slash comment
	"dart.automaticCommentSlashes": "tripleSlash",

	// Whether to show annotations against constructor, method invocations and lists that span multiple lines.
	"dart.closingLabels": true,

	// The prefix to use in closing labels.
	"dart.closingLabelsPrefix": " // ",

	// The text style to use in closing labels. Using _Italic_ requires a font that supports italic text.
	"dart.closingLabelsTextStyle": "normal",

	// Whether to insert parentheses and placeholders for positional and required arguments during code completions when using LSP. This feature is automatically disabled if commit characters are enabled.
	"dart.completeFunctionCalls": true,

	// What level of documentation to show in Hovers and Code Completion details. When `null`, defaults to 'full' when running locally and 'none' in remote workspaces. This setting is only supported for Dart SDKs after v2.18.
	//  - full: Show full documentation
	//  - summary: Show short documentatin summary
	//  - none: Do not show documentation
	"dart.documentation": null,

	// How long (in ms) to delay sending editor location change events over the Dart Tooling Daemon. Increasing this results in less events which may improve performance, at the expensive of tools that use these events not updating as quickly after your location/editor changes (requires restart).
	"dart.dtdEditorActiveLocationDelay": 200,

	// Whether to automatically commit the selected completion item when pressing certain keys such as . , ( and \[. This setting does not currently apply to LSP, see `dart.previewCommitCharacters`.
	"dart.enableCompletionCommitCharacters": false,

	// Whether to enable the [dart_style](https://pub.dev/packages/dart_style) formatter for Dart code.
	"dart.enableSdkFormatter": true,

	// Whether to use code snippets from the Dart Analysis Server instead of those included in the extension. Server snippets are context and language-version aware and should be preferred.
	"dart.enableServerSnippets": true,

	// Whether to include Dart and Flutter snippets in code completion.
	"dart.enableSnippets": true,

	// An array of glob patterns that should trigger Hot Reload when saved. The pattern is matched against the absolute path of the file. Use `**/assets/**` to trigger reloading for everything in the assets directory. Must always start with "**/" and use forward slashes (even on Windows) as backslashes are used for escaping.
	"dart.hotReloadPatterns": [],

	// Whether to insert argument placeholders during code completions. This feature is automatically disabled when `enableCompletionCommitCharacters` is enabled.
	"dart.insertArgumentPlaceholders": true,

	// The maximum length of a line of code. This is used by the document formatter. If you change this value, you may wish to update `editor.rulers` (which draws vertical lines in the editor) in the `["dart"]` section of your settings to match.
	"dart.lineLength": 80,

	// Whether to enable [Snippet support in LSP TextEdits](https://github.com/rust-analyzer/rust-analyzer/blob/979e788957ced1957ee9ac1da70fb97abf9fe2b1/docs/dev/lsp-extensions.md#snippet-textedit).
	"dart.lspSnippetTextEdits": true,

	// Whether to rename files when renaming classes with matching names (for example renaming 'class Person' inside 'person.dart'). If set to 'prompt', will ask each time before renaming. If set to 'always', the file will automatically be renamed. This setting requires using LSP and a Dart SDK of at least v2.15.
	"dart.renameFilesWithClasses": "never",

	// Whether to show CodeLens actions in the editor for opening online DartPad samples.
	"dart.showDartPadSampleCodeLens": true,

	// Whether to show CodeLens actions in the editor for quick running / debugging scripts with main functions.
	"dart.showMainCodeLens": true,

	// Whether to show CodeLens actions in the editor for quick running / debugging tests.
	"dart.showTestCodeLens": true,

	// Whether to automatically update imports when moving or renaming files. Currently only supports single file moves / renames.
	"dart.updateImportsOnRename": true,

	// Whether to show a warning when modifying files in the [system package cache](https://dart.dev/tools/pub/glossary#system-cache) directory.
	"dart.warnWhenEditingFilesInPubCache": true,

	// Whether to show a warning when modifying files outside of the workspace.
	"dart.warnWhenEditingFilesOutsideWorkspace": true,

	// Whether to automatically run `adb connect 100.115.92.2:5555` when spawning the Flutter daemon when running on Chrome OS.
	"dart.flutterAdbConnectOnChromeOs": false,

	// Additional args to pass to all `flutter` commands including `flutter daemon`. Do not use this to pass arguments to your Flutter app, use the `args` field in a `launch.json` or the `dart.flutterRunAdditionalArgs` setting.
	"dart.flutterAdditionalArgs": [],

	// Additional args to pass to the `flutter attach` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.
	"dart.flutterAttachAdditionalArgs": [],

	// The programming language to use for Android apps when creating new projects using the 'Flutter: New Project' command.
	"dart.flutterCreateAndroidLanguage": "kotlin",

	// The programming language to use for iOS apps when creating new projects using the 'Flutter: New Project' command. This is only supported up until Flutter 3.22 after which it will be ignored.
	"dart.flutterCreateIOSLanguage": "swift",

	// The organization responsible for your new Flutter project, in reverse domain name notation (e.g. `com.google`). This string is used in Java package names and as prefix in the iOS bundle identifier when creating new projects using the 'Flutter: New Project' command.
	"dart.flutterCreateOrganization": null,

	// The platforms to enable for new projects created using the 'Flutter: New Project' command. If unset, all platforms will be enabled.
	"dart.flutterCreatePlatforms": null,

	// Custom emulators to show in the emulator list for easier launching. If IDs match existing emulators returned by Flutter, the custom emulators will override them.
	"dart.flutterCustomEmulators": [],

	// Whether to automatically run the Generate Localizations command for Flutter apps when saving .arb files.
	//  - never: Do not generate localizations when saving
	//  - manual: Generate localizations for explicit manual saves (requires pressing Save explicitly if using autosave)
	//  - manualIfDirty: Generate localizations for explicit manual saves (requires pressing Save explicitly if using autosave) only if the saved file had changes
	//  - all: Generate localizations for all saves, manual or automatic
	//  - allIfDirty: Generate localizations for all saves, manual or automatic only if the saved file had changes
	"dart.flutterGenerateLocalizationsOnSave": "never",

	// Whether to show Flutter icons and colors in the editor gutter.
	"dart.flutterGutterIcons": true,

	// Whether to automatically send a Hot Reload request to Flutter apps during a debug session when saving files. Dart apps are controlled by the hotReloadOnSave setting.
	//  - never: Do not reload when saving
	//  - manual: Reload for explicit manual saves (requires pressing Save explicitly if using autosave)
	//  - manualIfDirty: Reload for explicit manual saves (requires pressing Save explicitly if using autosave) only if the saved file had changes
	//  - all: Reload for all saves, manual or automatic
	//  - allIfDirty: Reload for all saves, manual or automatic only if the saved file had changes
	"dart.flutterHotReloadOnSave": "never",

	"dart.flutterHotRestartOnSave": false,

	// Whether to show the Flutter Outline tree in the sidebar.
	"dart.flutterOutline": true,

	// Whether to remember which device was last (explicitly) selected for each project. When the remembered device is selected, it will prevent newly-connected mobile devices from being automatically selected (regardless of the `dart.flutterSelectDeviceWhenConnected` setting).
	"dart.flutterRememberSelectedDevice": true,

	// Additional args to pass to the `flutter run` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.
	"dart.flutterRunAdditionalArgs": [],

	// The path to a directory to save Flutter screenshots. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows).
	"dart.flutterScreenshotPath": null,

	// Whether to set newly connected devices as the current device in Flutter projects.
	"dart.flutterSelectDeviceWhenConnected": true,

	// When to show the Flutter emulators. These are usually hidden for remote workspaces because it is usually not possible to see or interact with emulators in a remote session. If you are using remoting/containers in a way that you can interact with launched emulator processes, you may wish to set this to 'always'.
	//  - local: Only show for local workspaces
	//  - always: Always show, even for remote sessions
	//  - never: Never show emulators
	"dart.flutterShowEmulators": "local",

	// When to show the Flutter headless web-server device. This requires using the Dart Debug extension for Chrome and is usually only used for remote environments where Chrome is not available such as browser/cloud-based IDEs (requires restart).
	//  - remote: Only show for remote workspaces (includes browser-based workspaces)
	//  - always: Always show, even for local sessions
	"dart.flutterShowWebServerDevice": "remote",

	// Additional args to pass to the `flutter test` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.
	"dart.flutterTestAdditionalArgs": [],

	// Sets the [Web renderer](https://flutter.dev/to/web-renderers) used for Flutter web apps.
	//  - flutter-default: Use the default renderer for Flutter Web apps
	//  - canvaskit: Always use the CanvasKit renderer
	//  - html: Always use the HTML renderer
	//  - auto: Use Flutter's "auto" renderer option to pick the best renderer based on the users device
	"dart.flutterWebRenderer": "flutter-default",

	// Whether to automatically send a Hot Reload request to Dart apps during a debug session when saving files. Flutter apps are controlled by the flutterHotReloadOnSave setting.
	//  - never: Do not reload when saving
	//  - manual: Reload for explicit manual saves (requires pressing Save explicitly if using autosave)
	//  - manualIfDirty: Reload for explicit manual saves (requires pressing Save explicitly if using autosave) only if the saved file had changes
	//  - all: Reload for all saves, manual or automatic
	//  - allIfDirty: Reload for all saves, manual or automatic only if the saved file had changes
	"dart.hotReloadOnSave": "never",

	// Whether to use the --offline switch for commands like 'pub get' and 'Flutter: New Project'.
	"dart.offline": false,

	// Whether to use `flutter-dev` instead of `flutter`. This is a script for developers of the `flutter` tool to run from source and will run more slowly than the compiled tool.
	"dart.useFlutterDev": false,

	// The path to a log file for very detailed logging in the Dart Analysis Server that may be useful when trying to diagnose Analysis Server issues. Use `${workspaceName}` to insert the name of the current workspace in the file path. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows). Only the noted substitutions are supported, others will stay as-is.
	"dart.analyzerInstrumentationLogFile": null,

	// The path to a log file for communication between Dart Code and the Analysis Server. Use `${workspaceName}` to insert the name of the current workspace in the file path. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows). Only the noted substitutions are supported, others will stay as-is.
	"dart.analyzerLogFile": null,

	// The path to a log file for communication with the DAP debug adapters. This is useful when trying to diagnose issues with debugging such as missed breakpoints. Use `${name}` in the log file name to insert the Debug Session name to prevent concurrent debug sessions overwriting each others logs. Use `${workspaceName}` to insert the name of the current workspace in the file path. Use `${kind}` to insert a description of the kind of debug session ('dart', 'dart_test', 'flutter' etc.). Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows). Only the noted substitutions are supported, others will stay as-is.
	"dart.dapLogFile": null,

	// The path to a low-traffic log file for the Dart DevTools service. Use `${workspaceName}` to insert the name of the current workspace in the file path. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows). Only the noted substitutions are supported, others will stay as-is.
	"dart.devToolsLogFile": null,

	// The path to a low-traffic log file for basic extension and editor issues. Use `${workspaceName}` to insert the name of the current workspace in the file path. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows). Only the noted substitutions are supported, others will stay as-is.
	"dart.extensionLogFile": null,

	// The path to a log file for the `flutter daemon` service, which provides information about connected devices accessible from the status bar. Use `${workspaceName}` to insert the name of the current workspace in the file path. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows). Only the noted substitutions are supported, others will stay as-is.
	"dart.flutterDaemonLogFile": null,

	// The path to a log file for the `flutter widget-preview` service. Use `${workspaceName}` to insert the name of the current workspace in the file path. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows). Only the noted substitutions are supported, others will stay as-is.
	"dart.flutterWidgetPreviewLogFile": null,

	// The maximum number of completion items to return from a code completion request. Updated results will be fetched as additional characters are typed. Lower numbers may improved performance. Defaults to a lower value in remote workspaces. Only affects LSP for > Dart SDK 2.17.
	"dart.maxCompletionItems": null,

	// The maximum length of a line in the log file. Lines longer than this will be truncated and suffixed with an ellipsis.
	"dart.maxLogLineLength": 2000,

	// The path to a log file for the Dart SDK's MCP server. Use `${workspaceName}` to insert the name of the current workspace in the file path. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows). Only the noted substitutions are supported, others will stay as-is.
	"dart.mcpServerLogFile": null,

	// The path to a log file for the `dart tooling-daemon` service, which coordinates between various Dart and Flutter tools and extensions. Use `${workspaceName}` to insert the name of the current workspace in the file path. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows). Only the noted substitutions are supported, others will stay as-is.
	"dart.toolingDaemonLogFile": null,

	// Whether to enable functionality for using Pub. Turning this setting off will prevent the extension from ever running pub and hide all commands relating to this. Use this if you are using an alternative package manager.
	"dart.enablePub": true,

	// Whether to prompt to get/upgrade packages when opening a project with missing/out of date packages.
	"dart.promptToGetPackages": true,

	// Additional args to pass to all `pub` commands.
	"dart.pubAdditionalArgs": [],

	// Whether to automatically run `pub get` on nested projects above or below the one where the pubspec was changed.
	//  - none: Only run `pub get` for the project whose pubspec was changed
	//  - both: Run `pub get` also in parent or child projects of the one whose pubspec was changed
	//  - above: Run `pub get` also in parent projects of the one whose pubspec was changed
	//  - below: Run `pub get` also in child projects of the one whose pubspec was changed
	"dart.runPubGetOnNestedProjects": "none",

	// Whether to run `pub get` whenever `pubspec.yaml` is saved.
	//  - always: Always run when pubspec is changed
	//  - prompt: Prompt to run when pubspec is changed
	//  - never: Never run when pubspec is changed
	"dart.runPubGetOnPubspecChanges": "always",

	// Additional args to pass to the `build_runner` when building/watching/serving.
	"dart.buildRunnerAdditionalArgs": [],

	// Additional args to pass to the `dart` command when running CLI scripts. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.
	"dart.cliAdditionalArgs": [],

	// Whether to run Dart CLI apps in the Debug Console or a terminal. The Debug Console has more functionality because the process is controlled by the debug adapter, but is unable to accept input from the user via stdin.
	//  - debugConsole: Run in the Debug Console pane, using the input as a REPL to evaluate expressions
	//  - terminal: Run in the VS Code integrated terminal where input will be sent to stdin
	//  - externalTerminal: Run in an external terminal where input will be sent to stdin
	"dart.cliConsole": "debugConsole",

	// The path to a custom Dart Debug Adapter. This setting is intended for use by Dart Debug Adapter developers. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows).
	"dart.customDartDapPath": null,

	// The path to a custom Flutter Debug Adapter. This setting is intended for use by Dart Debug Adapter developers. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows).
	"dart.customFlutterDapPath": null,

	// The protocol to use for the Dart Debug Extension backend service and injected client. Using WebSockets can improve performance but may fail when connecting through some proxy servers.
	//  - sse: Server-Sent Events
	//  - ws: WebSockets
	"dart.debugExtensionBackendProtocol": "ws",

	// Whether to mark external pub package libraries (including `package:flutter`) as debuggable, enabling stepping into them while debugging.
	"dart.debugExternalPackageLibraries": false,

	// Whether to mark Dart SDK libraries (`dart:*`) as debuggable, enabling stepping into them while debugging.
	"dart.debugSdkLibraries": false,

	// Whether to evaluate getters in order to display them in debug views (such as the Variables, Watch and Hovers views).
	"dart.evaluateGettersInDebugViews": true,

	// Whether to call toString() on objects when rendering them in debug views (such as the Variables, Watch and Hovers views). Only applies to views of 100 or fewer values for performance reasons.
	"dart.evaluateToStringInDebugViews": true,

	// Determines how to display Hot Restart and Hot Reload progress.
	//  - notification: Hot reload progress will be shown in a toast notification
	//  - statusBar: Hot reload progress will be shown only in the status bar
	"dart.hotReloadProgress": "notification",

	// Whether to prompt before running if there are errors in your project. Test scripts will be excluded from the check unless they're the script being run.
	"dart.promptToRunIfErrors": true,

	// Whether to show logs from the `dart:developer` `log()` function in the debug console.
	"dart.showDartDeveloperLogs": true,

	// Whether to show integers formatted as Hex in Variables, Watch, Debug Consoles.
	"dart.showDebuggerNumbersAsHex": false,

	// Whether to show DevTools buttons in the floating Debug toolbar.
	"dart.showDevToolsDebugToolBarButtons": true,

	// Whether to show getters in order to display them in debug views (such as the Variables, Watch and Hovers views). If `evaluateGettersInDebugViews` is `true` getters will be eagerly evaluated, otherwise they will require clicking to evaluate.
	"dart.showGettersInDebugViews": true,

	// Whether to suppress test timeouts when running/debugging tests. To work properly this requires package:test version 1.20.1 or newer. For older versions, the default timeout will be increased to 1d but this will not affect tests that have explicit (non-factor) timeouts set with @timeout.
	//  - never: Do not suppress test timeouts
	//  - debug: Suppress test timeouts when Debugging
	//  - always: Suppress test timeouts both when Running and Debugging
	"dart.suppressTestTimeouts": "never",

	// Additional args to pass to the `dart test` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.
	"dart.testAdditionalArgs": [],

	// Arguments to be passed to the Dart VM when running Dart CLI scripts/tests.
	// 
	// These arguments appear after "dart" but before subcommands like "test":
	// 
	// `dart (vmAdditionalArgs) test (toolArgs) test/my_test.dart (args)`
	"dart.vmAdditionalArgs": [],

	// Whether to add your selected Dart/Flutter SDK path to the `PATH` environment variable for the embedded terminal. This is useful when switching SDKs via `dart.sdkPaths#` / `#dart.flutterSdkPaths` to ensure commands run from the terminal are the same version as being used by the editor/debugger (requires restart).
	"dart.addSdkToTerminalPath": true,

	// Whether to check you are using the latest version of the Dart SDK at startup.
	"dart.checkForSdkUpdates": true,

	// The location of the Flutter SDK to use. If blank (or not a valid SDK), Dart Code will attempt to find it from the project directory, `FLUTTER_ROOT` environment variable and the `PATH` environment variable. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows).
	"dart.flutterSdkPath": null,

	// An array of paths that either directly point to a Flutter SDK or the parent directory of multiple Flutter SDKs that can be used for fast SDK switching. These paths are not used directly when searching for an SDK. When this setting is populated, the version number in the status bar can be used to quickly switch between SDKs. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows).
	"dart.flutterSdkPaths": [],

	// Get the Dart SDK path from a command. Useful when using tools such as direnv, asdf, mise... The command should exit with a 0 status code and it should print to the standard output just the path to the SDK. If the command fails (non zero exit or bad path), the extension will keep looking for other SDK paths. Some configuration examples can be found in: https://github.com/Dart-Code/Dart-Code/pull/5377
	"dart.getDartSdkCommand": null,

	// Get the Flutter SDK path from a command. Useful when using tools such as direnv, asdf, mise... The command should exit with a 0 status code and it should print to the standard output just the path to the SDK. If the command fails (non zero exit or bad path), the extension will keep looking for other SDK paths. Some configuration examples can be found in: https://github.com/Dart-Code/Dart-Code/pull/5377
	"dart.getFlutterSdkCommand": null,

	// Whether to register the Dart SDK's MCP server with VS Code. This only applies to Dart SDKs >= v3.9.0 which added the server.
	"dart.mcpServer": true,

	// A map of MCP tool names to booleans to enable/disable specific tools from the Dart MCP server. Tools set to `false` will be excluded (if supported). By default, tools that overlap with built-in VS Code functionality will be excluded.
	"dart.mcpServerTools": {
		"run_tests": false
	},

	// The location of the Dart SDK to use for analyzing and executing code. If blank (or not a valid SDK), Dart Code will attempt to find it from the `PATH` environment variable. When editing a Flutter project, the version of Dart included in the Flutter SDK is used in preference. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows).
	"dart.sdkPath": null,

	// An array of paths that either directly point to a Dart SDK or the parent directory of multiple Dart SDKs that can be used for fast SDK switching. These paths are not used directly when searching for an SDK. When this setting is populated, the SDK version number in the status bar can be used to quickly switch between SDKs. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows).
	"dart.sdkPaths": [],

	// Where to save SDK selections when using fast SDK switching from the language status entry.
	//  - workspace: Save the SDK path in the current workspace settings
	//  - global: Save the SDK path in your global user settings and clear any workspace setting
	"dart.sdkSwitchingTarget": "workspace",

	// Whether to consider files ending `_test.dart` that are outside of the test directory as tests. This should be enabled if you put tests inside the `lib` directory of your Flutter app so they will be run with `flutter test` and not `flutter run`.
	"dart.allowTestsOutsideTestFolder": false,

	// An array of glob patterns to exclude from code coverage results. Paths matching any of these patterns will still be collected by the Dart VM but not be included in coverage reported to VS Code.
	"dart.coverageExcludePatterns": [],

	// When to automatically switch focus to the test list (array to support multiple values).
	"dart.openTestView": [
		"testRunStart"
	],

	// Whether to show skipped tests in the test tree.
	"dart.showSkippedTests": true,

	// How to identify tests when running/debugging. `name` is compatible with older versions of `package:test` but cannot handle some complex/dynamic test names. `line` will prefer to run tests by their line numbers (when available) and fall back to `name` only if the line number is unavailable.
	"dart.testInvocationMode": "name",

	// Additional environment variables to be added to all Dart/Flutter processes spawned by the Dart and Flutter extensions.
	"dart.env": {},

	// How many levels (including the workspace roots) down the workspace to search for Dart/Flutter projects. Increasing this number may help detect Flutter projects that are deeply nested in your workspace but slow down all operations that search for projects, including extension activation.
	"dart.projectSearchDepth": 5,

	// Additional args to pass to the `dart tooling-daemon` command that runs as a background service (requires restart).
	"dart.toolingDaemonAdditionalArgs": [],

	// EXPERIMENTAL: The port where flutter daemon can be accessed if daemon is run remotely. This setting is intended for use by Google developers.
	"dart.daemonPort": null,

	// Whether to enable experimental (possibly unfinished or unstable) LSP handlers through DTD. This setting is passed to the analysis server in the connectToDtd request and therefore relies on DTD being supported and enabled for the analysis server (requires restart).
	"dart.experimentalDtdHandlers": false,

	// EXPERIMENTAL: Whether to enable the Flutter Widget Preview experimental feature. This feature requires an unreleased version of Flutter from the `master` branch.
	"dart.experimentalFlutterWidgetPreview": false,

	// Where to display the Flutter Widget Preview.
	//  - beside: Open the Flutter Widget Preview beside the active editor
	//  - sidebar: Open the Flutter Widget Preview in the sidebar
	"dart.experimentalFlutterWidgetPreviewLocation": "sidebar",

	// Whether to enable experimental (possibly unfinished or unstable) refactors on the lightbulb menu. This setting is intended for use by Dart Analysis Server developers or users that want to try out and provide feedback on in-progress refactors.
	"dart.experimentalRefactors": false,

	// Whether to normalize file casings before sending them to the LSP server. This may fix issues with file_names lints not disappearing after renaming a file if the VS Code API continues to use the original casing.
	"dart.normalizeFileCasing": false,

	// EXPERIMENTAL: Whether to enable commit characters for the LSP server. In a future release, the dart.enableCompletionCommitCharacters setting will also apply to LSP.
	"dart.previewCommitCharacters": false,

	// EXPERIMENTAL: Whether to enable the [Flutter UI Guides preview](https://dartcode.org/releases/v3-1/#preview-flutter-ui-guides).
	"dart.previewFlutterUiGuides": false,

	// EXPERIMENTAL: Whether to enable custom tracking of Flutter UI guidelines (to hide some latency of waiting for the next Flutter Outline).
	"dart.previewFlutterUiGuidesCustomTracking": false,

	// Whether to perform hot reload on save based on a filesystem watcher for Dart files rather than using VS Code's `onDidSave` event. This allows reloads to trigger when external tools modify Dart source files.
	"dart.previewHotReloadOnSaveWatcher": false,

	// **LEGACY SETTING: Only applies to legacy analysis server protocol.**
	// 
	// Additional file extensions that should be analyzed (usually used in combination with analyzer plugins).
	"dart.additionalAnalyzerFileExtensions": [],

	// **LEGACY SETTING: Only applies to legacy analysis server protocol.**
	// 
	// Whether to use folding data from the Dart Analysis Server instead of the built-in VS Code indent-based folding.
	"dart.analysisServerFolding": true,

	// **LEGACY SETTING: The angular plugin is no longer supported.**
	// 
	// Whether to enable analysis for AngularDart templates (requires the Angular analyzer plugin to be enabled in `analysis_options.yaml`).
	"dart.analyzeAngularTemplates": true,

	// **LEGACY SETTING: Only applies when using the legacy debug adapters.**
	// 
	// The path to a log file for Dart test runs. This is useful when trying to diagnose issues with unit test executions. Use `${name}` in the log file name to insert the Debug Session name to prevent concurrent debug sessions overwriting each others logs. Use `${workspaceName}` to insert the name of the current workspace in the file path. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows). Only the noted substitutions are supported, others will stay as-is.
	"dart.dartTestLogFile": null,

	// **LEGACY SETTING: Only applies to legacy analysis server protocol.**
	// 
	// An array of glob patterns that should be excluded for formatting. The pattern is matched against the absolute path of the file. Use `**/test/**` to skip formatting for all test directories. Must always use forward slashes (even on Windows) as backslashes are used for escaping.
	"dart.doNotFormat": [],

	// **LEGACY SETTING: Only applies when using the legacy debug adapters.**
	// 
	// The path to a log file for `flutter run`, which is used to launch Flutter apps from VS Code. This is useful when trying to diagnose issues with apps launching (or failing to) on simulators and devices. Use `${name}` in the log file name to insert the Debug Session name to prevent concurrent debug sessions overwriting each others logs. Use `${workspaceName}` to insert the name of the current workspace in the file path. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows). Only the noted substitutions are supported, others will stay as-is.
	"dart.flutterRunLogFile": null,

	// **LEGACY SETTING: Only applies when using the legacy debug adapters.**
	// 
	// The path to a log file for `flutter test`, which is used to run unit tests from VS Code. This is useful when trying to diagnose issues with unit test executions. Use `${name}` in the log file name to insert the Debug Session name to prevent concurrent debug sessions overwriting each others logs. Use `${workspaceName}` to insert the name of the current workspace in the file path. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows). Only the noted substitutions are supported, others will stay as-is.
	"dart.flutterTestLogFile": null,

	// **LEGACY SETTING: Disabling this may break functionality on modern SDKs.**
	// 
	// Whether to pass `--track-widget-creation` to Flutter apps (required to support 'Inspect Widget'). This setting is always ignored when running in Profile or Release mode.
	"dart.flutterTrackWidgetCreation": true,

	// **LEGACY SETTING: Only applies to Dart SDKs before v2.15 since DevTools now ships in the SDK.**
	// 
	// Whether to update DevTools if you are not using the latest version.
	"dart.updateDevTools": true,

	// **LEGACY SETTING: Legacy debug adapters are not recommended since Dart v3.4.**
	// 
	// Whether to use the legacy debug adapters even if the new debug adapters are available in the current Dart/Flutter SDKs contain. Setting the value to `true` will force use of the legacay adapters. Setting to `false` will force use of the SDK adapters. Leaving as `null` will allow the extension to decide which debug adapters to use depending on the SDK version and rollout progress.
	"dart.useLegacyDebugAdapters": null,

	// **LEGACY SETTING: Only applies when using the legacy debug adapters.**
	// 
	// The path to a log file for communication between Dart Code and the VM service. This is useful when trying to diagnose issues with debugging such as missed breakpoints. Use `${name}` in the log file name to insert the Debug Session name to prevent concurrent debug sessions overwriting each others logs. Use `${workspaceName}` to insert the name of the current workspace in the file path. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows). Only the noted substitutions are supported, others will stay as-is.
	"dart.vmServiceLogFile": null,

	// **LEGACY SETTING: Only applies when using the legacy debug adapters.**
	// 
	// The path to a log file for communication between Dart Code and the webdev daemon. This is useful when trying to diagnose issues with launching web apps. Use `${name}` in the log file name to insert the Debug Session name to prevent concurrent debug sessions overwriting each others logs. Use `${workspaceName}` to insert the name of the current workspace in the file path. Use `~` to insert the user's home directory (the path should then use `/` separators even on Windows). Only the noted substitutions are supported, others will stay as-is.
	"dart.webDaemonLogFile": null,

	// 소스 제어 뷰에 인라인 작업을 항상 표시할지 여부를 제어합니다.
	"scm.alwaysShowActions": false,

	// 소스 제어 뷰에서 리포지토리를 항상 표시할지 여부를 제어합니다.
	"scm.alwaysShowRepositories": false,

	// 소스 제어 뷰에서 파일을 열 때 자동으로 표시하고 선택해야 하는지 여부를 제어합니다.
	"scm.autoReveal": true,

	// 소스 제어 뷰에서 폴더를 압축 형식으로 렌더링할지 여부를 제어합니다. 이러한 양식에서 단일 하위 폴더는 결합된 트리 요소로 압축됩니다.
	"scm.compactFolders": true,

	// 작업 막대에서 소스 제어 아이콘의 개수 배지를 제어합니다.
	//  - all: 모든 소스 제어 공급자 개수 배지의 합계를 표시합니다.
	//  - focused: 포커스가 있는 소스 제어 공급자의 개수 배지를 표시합니다.
	//  - off: 소스 제어 개수 배지를 사용하지 않도록 설정합니다.
	"scm.countBadge": "all",

	// 기본 소스 제어 리포지토리 보기 모드를 제어합니다.
	//  - tree: 리포지토리 변경 내용을 트리로 표시합니다.
	//  - list: 리포지토리 변경 내용을 목록으로 표시합니다.
	"scm.defaultViewMode": "list",

	// 목록으로 볼 때 기본 소스 제어 리포지토리 변경 정렬 순서를 제어합니다.
	//  - name: 파일 이름별로 리포지토리 변경 사항을 정렬합니다.
	//  - path: 경로별로 리포지토리 변경 사항을 정렬합니다.
	//  - status: 소스 제어 상태별로 리포지토리 변경 내용을 정렬합니다.
	"scm.defaultViewSortKey": "path",

	// 편집기에서 차이점 장식을 제어합니다.
	//  - all: 사용 가능한 모든 위치에서 diff 장식을 표시합니다.
	//  - gutter: 편집기 여백에만 diff 장식을 표시합니다.
	//  - overview: 개요 눈금자에만 diff 장식을 표시합니다.
	//  - minimap: 미니맵에서만 diff 장식을 표시합니다.
	//  - none: diff 장식을 표시하지 마세요.
	"scm.diffDecorations": "all",

	// 소스 제어 Diff 여백 장식의 동작을 제어합니다.
	//  - diff: 클릭 시 인라인 Diff Peek 보기를 표시합니다.
	//  - none: 아무 작업도 하지 않습니다.
	"scm.diffDecorationsGutterAction": "diff",

	// 여백의 diff 장식에 패턴이 사용되는지 여부를 제어합니다.
	"scm.diffDecorationsGutterPattern": {
		"added": false,
		"modified": true
	},

	// 여백에서 소스 제어 diff 데코레이터의 가시성을 제어합니다.
	//  - always: 항상 여백에 diff 데코레이터를 표시합니다.
	//  - hover: 호버에서만 여백의 다른 데코레이터를 표시합니다.
	"scm.diffDecorationsGutterVisibility": "always",

	// 여백에서 diff 장식의 너비(px)를 제어합니다(추가 및 수정됨).
	"scm.diffDecorationsGutterWidth": 3,

	// Source Control diff gutter 장식에서 선행 및 후행 공백을 무시할지 여부를 제어합니다.
	//  - true: 선행 및 후행 공백을 무시합니다.
	//  - false: 선행 및 후행 공백을 무시하지 마세요.
	//  - inherit: `diffEditor.ignoreTrimWhitespace`에서 상속합니다.
	"scm.diffDecorationsIgnoreTrimWhitespace": "false",

	// 소스 제어 그래프 보기에 표시되는 배지를 제어합니다. 기록 항목 그룹의 이름을 나타내는 그래프 오른쪽에 배지가 표시됩니다.
	//  - all: 소스 제어 그래프 보기에 모든 기록 항목 그룹의 배지를 표시합니다.
	//  - filter: 소스 제어 그래프 보기에서 필터로 사용되는 기록 항목 그룹의 배지만 표시합니다.
	"scm.graph.badges": "filter",

	// 목록의 끝까지 스크롤할 때 소스 제어 그래프 보기에서 항목의 다음 페이지를 로드할지 여부를 제어합니다.
	"scm.graph.pageOnScroll": true,

	// 기본적으로 더 많은 항목을 로드할 때 소스 제어 그래프 보기에 표시할 항목 수입니다.
	"scm.graph.pageSize": 50,

	// 입력 메시지의 글꼴을 제어합니다. 워크벤치 사용자 인터페이스 글꼴 패밀리의 경우 '기본값'을 사용하고, `editor.fontFamily` 값의 경우 `editor` 또는 사용자 지정 글꼴 패밀리를 사용합니다.
	"scm.inputFontFamily": "default",

	// 입력 메시지의 글꼴 크기를 픽셀 단위로 제어합니다.
	"scm.inputFontSize": 13,

	// 입력이 자동으로 증가할 최대 줄 수를 제어합니다.
	"scm.inputMaxLineCount": 10,

	// 입력이 자동으로 증가하는 최소 줄 수를 제어합니다.
	"scm.inputMinLineCount": 1,

	// 소스 제어 공급자 헤더의 개수 배지를 제어합니다. 이러한 헤더는 둘 이상의 공급자가 있거나 `scm.alwaysShowRepositories` 설정이 사용하도록 설정된 경우 소스 제어 뷰 및 소스 제어 리포지토리 뷰에 표시됩니다.
	//  - hidden: 소스 제어 공급자 개수 배지를 숨깁니다.
	//  - auto: 소스 제어 공급자 개수가 0이 아닌 경우에만 소스 제어 공급자 개수 배지를 표시합니다.
	//  - visible: 소스 제어 공급자 개수 배지를 표시합니다.
	"scm.providerCountBadge": "hidden",

	// 소스 제어 리포지토리 뷰에서 리포지토리의 정렬 순서를 제어합니다.
	//  - discovery time: 소스 제어 리포지토리 보기의 리포지토리는 검색 시간별로 정렬됩니다. 소스 제어 보기의 리포지토리는 선택한 순서대로 정렬됩니다.
	//  - name: 소스 제어 리포지토리 및 소스 제어 뷰의 리포지토리는 리포지토리 이름을 기준으로 정렬됩니다.
	//  - path: 소스 제어 리포지토리 및 소스 제어 뷰의 리포지토리는 리포지토리 경로별로 정렬됩니다.
	"scm.repositories.sortOrder": "discovery time",

	// 소스 제어 리포지토리 섹션에 표시되는 리포지토리 수를 제어합니다. 보기 크기를 수동으로 조정하려면 0으로 설정합니다.
	"scm.repositories.visible": 10,

	// 소스 제어 뷰에 작업 단추를 표시할 수 있는지 여부를 제어합니다.
	"scm.showActionButton": true,

	// 소스 제어 입력에 작업 단추를 표시할 수 있는지 여부를 제어합니다.
	"scm.showInputActionButton": true,

	// 작업 집합이 없는 소스 제어 기록 항목 그룹으로 전환할 때 사용할 기본 작업 집합을 제어합니다.
	//  - empty: 작업 집합이 없는 소스 제어 기록 항목 그룹으로 전환할 때 빈 작업 집합을 사용합니다.
	//  - current: 작업 집합이 없는 소스 제어 기록 항목 그룹으로 전환할 때 현재 작업 집합을 사용합니다.
	"scm.workingSets.default": "current",

	// 소스 제어 기록 항목 그룹 간에 전환할 때 편집기 작업 집합을 저장할지 여부를 제어합니다.
	"scm.workingSets.enabled": false,

	// 편집기에서 CodeLens를 표시할 것인지 여부를 제어합니다.
	"diffEditor.codeLens": false,

	// 
	//  - legacy: 레거시 비교 알고리즘을 사용합니다.
	//  - advanced: 고급 비교 알고리즘을 사용합니다.
	"diffEditor.diffAlgorithm": "advanced",

	// 문자가 삽입되거나 삭제된 위치를 볼 수 있도록 diff 편집기에 빈 장식적 요소를 표시할지 여부를 제어합니다.
	"diffEditor.experimental.showEmptyDecorations": true,

	// diff 편집기에서 감지된 코드 이동을 표시할지 여부를 제어합니다.
	"diffEditor.experimental.showMoves": false,

	// 사용하도록 설정하고 편집기에서 인라인 보기를 사용하는 경우 단어 변경 내용이 인라인으로 렌더링됩니다.
	"diffEditor.experimental.useTrueInlineView": false,

	// 변경되지 않은 영역을 비교할 때 컨텍스트로 사용되는 줄 수를 제어합니다.
	"diffEditor.hideUnchangedRegions.contextLineCount": 3,

	// diff 편집기에 변경되지 않은 영역이 표시되는지 여부를 제어합니다.
	"diffEditor.hideUnchangedRegions.enabled": false,

	// 변경되지 않은 영역의 최소값으로 사용되는 줄 수를 제어합니다.
	"diffEditor.hideUnchangedRegions.minimumLineCount": 3,

	// 변경되지 않은 영역에 사용되는 줄 수를 제어합니다.
	"diffEditor.hideUnchangedRegions.revealLineCount": 20,

	// 사용하도록 설정하면 Diff 편집기가 선행 또는 후행 공백의 변경 내용을 무시합니다.
	"diffEditor.ignoreTrimWhitespace": true,

	// diff 계산이 취소된 후 밀리초 단위로 시간을 제한합니다. 제한 시간이 없는 경우 0을 사용합니다.
	"diffEditor.maxComputationTime": 5000,

	// 차이를 계산할 최대 파일 크기(MB)입니다. 제한이 없으면 0을 사용합니다.
	"diffEditor.maxFileSize": 50,

	// 사용하도록 설정하면 diff 편집기에 되돌리기 및 단계 작업을 위한 특수 여백이 표시됩니다.
	"diffEditor.renderGutterMenu": true,

	// diff 편집기에서 추가/제거된 변경 내용에 대해 +/- 표시기를 표시하는지 여부를 제어합니다.
	"diffEditor.renderIndicators": true,

	// 활성화되면 diff 편집기는 변경 내용을 되돌리기 위해 글리프 여백에 화살표를 표시합니다.
	"diffEditor.renderMarginRevertIcon": true,

	// diff 편집기에서 diff를 나란히 표시할지 인라인으로 표시할지를 제어합니다.
	"diffEditor.renderSideBySide": true,

	// diff 편집기 너비가 이 값보다 작으면 인라인 뷰가 사용됩니다.
	"diffEditor.renderSideBySideInlineBreakpoint": 900,

	// 사용하도록 설정하고 편집기 너비가 너무 작을 경우 인라인 보기가 사용됩니다.
	"diffEditor.useInlineViewWhenSpaceIsLimited": true,

	// 
	//  - off: 줄이 바뀌지 않습니다.
	//  - on: 뷰포트 너비에서 줄이 바뀝니다.
	//  - inherit: 줄은 `editor.wordWrap` 설정에 따라 줄 바꿈됩니다.
	"diffEditor.wordWrap": "inherit",

	// 커밋 문자에 대한 제안을 허용할지를 제어합니다. 예를 들어 JavaScript에서는 세미콜론(';')이 제안을 허용하고 해당 문자를 입력하는 커밋 문자일 수 있습니다.
	"editor.acceptSuggestionOnCommitCharacter": true,

	// 'Tab' 키 외에 'Enter' 키에 대한 제안도 허용할지를 제어합니다. 새 줄을 삽입하는 동작과 제안을 허용하는 동작 간의 모호함을 없앨 수 있습니다.
	//  - on
	//  - smart: 텍스트를 변경할 때 `Enter` 키를 사용한 제안만 허용합니다.
	//  - off
	"editor.acceptSuggestionOnEnter": "on",

	// 화면 읽기 프로그램에서 한 번에 읽을 수 있는 편집기 줄 수를 제어합니다. 화면 읽기 프로그램을 검색하면 기본값이 500으로 자동 설정됩니다. 경고: 기본값보다 큰 수의 경우 성능에 영향을 미칩니다.
	"editor.accessibilityPageSize": 500,

	// 화면 판독기에 최적화된 모드에서 UI를 실행해야 하는지 여부를 제어합니다.
	//  - auto: 플랫폼 API를 사용하여 화면 읽기 프로그램이 연결된 시기를 감지합니다.
	//  - on: 화면 읽기 프로그램을 사용하여 사용을 최적화합니다.
	//  - off: 화면 읽기 프로그램이 연결되어 있지 않다고 가정합니다.
	"editor.accessibilitySupport": "auto",

	// 편집기에서 변수 글꼴 사용을 허용할지 여부를 제어합니다.
	"editor.allowVariableFonts": true,

	// 접근성 모드에서 편집기에서 변수 글꼴 사용을 허용할지 여부를 제어합니다.
	"editor.allowVariableFontsInAccessibilityMode": false,

	// 편집기에서 가변 줄 높이 사용을 허용할지 여부를 제어합니다.
	"editor.allowVariableLineHeights": true,

	// 사용자가 여는 괄호를 추가한 후 편집기에서 괄호를 자동으로 닫을지 여부를 제어합니다.
	//  - always
	//  - languageDefined: 언어 구성을 사용하여 대괄호를 자동으로 닫을 경우를 결정합니다.
	//  - beforeWhitespace: 커서가 공백의 왼쪽에 있는 경우에만 대괄호를 자동으로 닫습니다.
	//  - never
	"editor.autoClosingBrackets": "languageDefined",

	// 사용자가 여는 주석을 추가한 후 편집기에서 주석을 자동으로 닫을지 여부를 제어합니다.
	//  - always
	//  - languageDefined: 언어 구성을 사용하여 주석을 자동으로 닫을 경우를 결정합니다.
	//  - beforeWhitespace: 커서가 공백의 왼쪽에 있는 경우에만 주석을 자동으로 닫습니다.
	//  - never
	"editor.autoClosingComments": "languageDefined",

	// 삭제할 때 편집기에서 인접한 닫는 따옴표 또는 대괄호를 제거해야 할지를 제어합니다.
	//  - always
	//  - auto: 인접한 닫는 따옴표 또는 대괄호가 자동으로 삽입된 경우에만 제거합니다.
	//  - never
	"editor.autoClosingDelete": "auto",

	// 편집자가 닫는 따옴표 또는 대괄호 위에 입력할지 여부를 제어합니다.
	//  - always
	//  - auto: 닫기 따옴표 또는 대괄호가 자동으로 삽입된 경우에만 해당 항목 위에 입력합니다.
	//  - never
	"editor.autoClosingOvertype": "auto",

	// 사용자가 여는 따옴표를 추가한 후 편집기에서 따옴표를 자동으로 닫을지 여부를 제어합니다.
	//  - always
	//  - languageDefined: 언어 구성을 사용하여 따옴표를 자동으로 닫을 경우를 결정합니다.
	//  - beforeWhitespace: 커서가 공백의 왼쪽에 있는 경우에만 따옴표를 자동으로 닫습니다.
	//  - never
	"editor.autoClosingQuotes": "languageDefined",

	// 사용자가 줄을 입력, 붙여넣기, 이동 또는 들여쓰기 할 때 편집기에서 들여쓰기를 자동으로 조정하도록 할지 여부를 제어합니다.
	//  - none: 편집기는 들여쓰기를 자동으로 삽입하지 않습니다.
	//  - keep: 편집기는 현재 줄의 들여쓰기를 유지합니다.
	//  - brackets: 편집기는 현재 줄의 들여쓰기를 유지하고 언어 정의 대괄호를 사용합니다.
	//  - advanced: 편집기는 현재 줄의 들여쓰기를 유지하고 언어 정의 대괄호를 존중하며 언어별로 정의된 특별 EnterRules를 호출합니다.
	//  - full: 편집기는 현재 줄의 들여쓰기를 유지하고, 언어 정의 대괄호를 존중하고, 언어에 의해 정의된 특별 EnterRules를 호출하고, 언어에 의해 정의된 들여쓰기 규칙을 존중합니다.
	"editor.autoIndent": "full",

	// 편집기에서 붙여넣은 콘텐츠를 자동으로 들여쓰기할지 여부를 제어합니다.
	"editor.autoIndentOnPaste": false,

	// 문자열 내에 붙여넣을 때 편집기가 붙여넣은 콘텐츠를 자동으로 들여쓰기할지 여부를 제어합니다. 이는 autoIndentOnPaste가 true인 경우에 적용됩니다.
	"editor.autoIndentOnPasteWithinString": true,

	// 따옴표 또는 대괄호 입력 시 편집기가 자동으로 선택 영역을 둘러쌀지 여부를 제어합니다.
	//  - languageDefined: 언어 구성을 사용하여 선택 항목을 자동으로 둘러쌀 경우를 결정합니다.
	//  - quotes: 대괄호가 아닌 따옴표로 둘러쌉니다.
	//  - brackets: 따옴표가 아닌 대괄호로 둘러쌉니다.
	//  - never
	"editor.autoSurround": "languageDefined",

	// 대괄호 쌍 색 지정을 사용할지 여부를 제어합니다. `workbench.colorCustomizations`을(를) 사용하여 대괄호 강조 색을 재정의합니다.
	"editor.bracketPairColorization.enabled": true,

	// 각 대괄호 형식에 고유한 독립적인 색 풀이 있는지 여부를 제어합니다.
	"editor.bracketPairColorization.independentColorPoolPerBracketType": false,

	// `files.autoSave#`이(가) `afterDelay`(으)로 설정될 때 `#editor.codeActionsOnSave` 트리거 활성화 코드 동작이 창 변경 및 포커스 변경에 대해 트리거되려면 `always`(으)로 설정되어야 합니다.
	"editor.codeActions.triggerOnFocusChange": false,

	// 저장 시 편집기에 대한 코드 작업을 실행합니다. 코드 작업을 지정해야 하며 편집기를 종료하면 안 됩니다. `files.autoSave`이(가) 'afterDelay'로 설정된 경우 코드 작업은 파일이 명시적으로 저장될 때만 실행됩니다. 예: `"source.organizeImports": "explicit" `
	"editor.codeActionsOnSave": {},

	// 현재 진단 중이 아닐 때 줄 내에서 가장 가까운 빠른 수정 표시를 사용/사용 안 함으로 설정합니다.
	"editor.codeActionWidget.includeNearbyQuickFixes": true,

	// 코드 작업 메뉴에 그룹 헤더 표시를 활성화/비활성화합니다.
	"editor.codeActionWidget.showHeaders": true,

	// 편집기에서 CodeLens를 표시할 것인지 여부를 제어합니다.
	"editor.codeLens": true,

	// CodeLens의 글꼴 패밀리를 제어합니다.
	"editor.codeLensFontFamily": "",

	// CodeLens의 글꼴 크기(픽셀)를 제어합니다. 0으로 설정하면 `editor.fontSize`의 90%가 사용됩니다.
	"editor.codeLensFontSize": 0,

	// 편집기에서 인라인 색 데코레이터 및 색 선택을 렌더링할지를 제어합니다.
	"editor.colorDecorators": true,

	// 색 데코레이터에서 색 선택기를 표시할 조건을 제어합니다.
	//  - clickAndHover: 색 데코레이터를 클릭하고 마우스로 가리킬 때 색 선택기를 표시합니다.
	//  - hover: 색 데코레이터를 마우스로 가리키면 색 선택기가 표시되도록 설정
	//  - click: 색 데코레이터를 클릭할 때 색 선택기를 표시합니다.
	"editor.colorDecoratorsActivatedOn": "clickAndHover",

	// 편집기에서 한 번에 렌더링할 수 있는 최대 색 데코레이터 수를 제어합니다.
	"editor.colorDecoratorsLimit": 500,

	// 마우스와 키로 선택한 영역에서 열을 선택하도록 설정합니다.
	"editor.columnSelection": false,

	// 빈 줄을 줄 주석에 대한 토글, 추가 또는 제거 작업으로 무시해야 하는지를 제어합니다.
	"editor.comments.ignoreEmptyLines": true,

	// 주석을 달 때 공백 문자를 삽입할지 여부를 제어합니다.
	"editor.comments.insertSpace": true,

	// 구문 강조 표시를 클립보드로 복사할지 여부를 제어합니다.
	"editor.copyWithSyntaxHighlighting": true,

	// 커서 애니메이션 스타일을 제어합니다.
	"editor.cursorBlinking": "blink",

	// `editor.cursorStyle` 설정이 'line'으로 설정되어 있을 때 커서의 높이를 제어합니다. 커서의 최대 높이는 선 높이에 따라 달라집니다.
	"editor.cursorHeight": 0,

	// 매끄러운 캐럿 애니메이션의 사용 여부를 제어합니다.
	//  - off: 부드러운 캐럿 애니메이션을 사용할 수 없습니다.
	//  - explicit: 부드러운 캐럿 애니메이션은 사용자가 명시적 제스처를 사용하여 커서를 이동할 때만 사용됩니다.
	//  - on: 부드러운 캐럿 애니메이션은 항상 사용됩니다.
	"editor.cursorSmoothCaretAnimation": "off",

	// 삽입 입력 모드에서 커서 스타일을 제어합니다.
	"editor.cursorStyle": "line",

	// 커서 주변에 표시되는 선행 줄(최소 0)과 후행 줄(최소 1)의 최소 수를 제어합니다. 일부 다른 편집기에서는 'scrollOff' 또는 'scrollOffset'으로 알려져 있습니다.
	"editor.cursorSurroundingLines": 0,

	// `editor.cursorSurroundingLines`를 적용해야 하는 경우를 제어합니다.
	//  - default: 'cursorSurroundingLines'는 키보드 나 API를 통해 트리거될 때만 적용됩니다.
	//  - all: `cursorSurroundingLines`는 항상 적용됩니다.
	"editor.cursorSurroundingLinesStyle": "default",

	// `editor.cursorStyle` 설정이 'line'으로 설정되어 있을 때 커서의 넓이를 제어합니다.
	"editor.cursorWidth": 0,

	// 기본 문서 색 공급자를 사용하여 인라인 색 장식을 표시할지 여부를 제어합니다.
	//  - auto: 색 데코레이터를 제공하는 확장이 없는 경우에만 기본 색 데코레이터를 표시합니다.
	//  - always: 항상 기본 색 데코레이터를 표시합니다.
	//  - never: 기본 색 데코레이터를 표시하지 않습니다.
	"editor.defaultColorDecorators": "auto",

	// 다른 모든 접기 범위 공급자보다 우선하는 기본 접기 범위 공급자를 정의합니다. 접기 범위 공급자에 기여하는 확장의 식별자여야 합니다.
	//  - null: 모든 활성 접기 범위 공급자
	//  - formulahendry.auto-rename-tag: Auto rename paired HTML/XML tag
	//  - Bito.Bito: Agentic, codebase-aware AI Code Reviews in your IDE. Bito reviews code instantly without creating a pull request. Catch bugs early, improve quality, and ship faster. Try for free.
	//  - ms-python.black-formatter: Black 포맷터를 사용하여 Python 파일에 대한 서식 지정 지원
	//  - Codeium.codeium: The modern coding superpower: free AI code acceleration plugin for your favorite languages. Type less. Code more. Ship faster.
	//  - GitHub.copilot: Your AI pair programmer
	//  - GitHub.copilot-chat: AI chat features powered by Copilot
	//  - vscode.css-language-features: CSS, LESS 및 SCSS 파일에 대한 다양한 언어 지원을 제공합니다.
	//  - Dart-Code.dart-code: Dart language support and debugger for Visual Studio Code.
	//  - docker.docker: Edit smarter, ship faster with an enhanced Docker-development experience
	//  - Dart-Code.flutter: Flutter support and debugger for Visual Studio Code.
	//  - Zignd.html-css-class-completion: CSS class name completion for the HTML class attribute based on the definitions found in your workspace.
	//  - vscode.html-language-features: HTML 및 Handlebar 파일에 대해 다양한 언어 지원을 제공합니다.
	//  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
	//  - vscode.json-language-features: JSON 파일에 대한 다양한 언어 지원을 제공합니다.
	//  - yzhang.markdown-all-in-one: All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)
	//  - vscode.markdown-language-features: Markdown에 대한 다양한 언어 지원을 제공합니다.
	//  - vscode.markdown-math: 전자 필기장의 Markdown에 수학 지원을 추가합니다.
	//  - adamerose.markdown-wysiwyg: A powerful markdown WYSIWYG editor
	//  - vscode.php-language-features: PHP 파일에 대한 다양한 언어 지원을 제공합니다.
	//  - Prisma.prisma: Adds syntax highlighting, formatting, auto-completion, jump-to-definition and linting for .prisma files.
	//  - ms-python.python: Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.
	//  - ms-vscode-remote.remote-ssh-edit: SSH 구성 파일 편집
	//  - humao.rest-client: REST Client for Visual Studio Code
	//  - jock.svg: SVG Coding, Minify, Pretty, Preview All-In-One
	//  - vscode.typescript-language-features: JavaScript 및 TypeScript에 대한 다양한 언어 지원을 제공합니다.
	//  - Vue.volar: Language Support for Vue
	//  - KevinRose.vsc-python-indent: Correct Python indentation
	//  - ms-azuretools.vscode-containers: Makes it easy to create, manage, and debug containerized applications.
	//  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
	//  - vscjava.vscode-gradle: Manage Gradle Projects, run Gradle tasks and provide better Gradle file authoring experience in VS Code
	//  - ecmel.vscode-html-css: CSS Intellisense for HTML
	//  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
	//  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
	//  - vscjava.vscode-maven: Manage Maven projects, execute goals, generate project from archetype, improve user experience for Java developers.
	//  - fuhidev.vscode-nesttypeorm: Quickly scaffold nest typeorm templates
	//  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
	//  - njqdev.vscode-python-typehint: Type hint completion for Python.
	//  - rangav.vscode-thunder-client: Lightweight Rest API Client for VS Code
	//  - redhat.vscode-xml: XML Language Support by Red Hat
	//  - 343max.android-emulator-launcher: Launch Android Emulators directly from VS Code.
	//  - ms-vscode.azure-repos: 모든 Azure Repos를 원격으로 탐색 및 편집
	//  - vscode.configuration-editing: 설정, 시작 및 확장 추천 파일과 같은 구성 파일에서 기능(고급 IntelliSense, 자동 수정)을 제공합니다.
	//  - Wscats.cors-browser: 🚀Preview file in your default browser
	//  - vscode.debug-auto-launch: 노드 디버그 확장이 비활성화될 때 자동 연결 기능을 위한 도우미입니다.
	//  - vscode.debug-server-ready: 디버깅 중인 서버가 준비되면 브라우저에서 URI를 엽니다.
	//  - ms-python.debugpy: Python Debugger extension using debugpy.
	//  - vscode.emmet: VS Code에 대한 Emmet 지원
	//  - DiemasMichiels.emulate: Run Android emulator and iOS simulator easily from VScode!
	//  - dsznajder.es7-react-js-snippets: Extensions for React, React-Native and Redux in JS/TS with ES7+ syntax. Customizable. Built-in integration with prettier.
	//  - vscode.extension-editing: 확장 제작을 위한 Lint 기능을 제공합니다.
	//  - vscode.git: Git SCM 통합
	//  - vscode.git-base: GIT 고정적 기여 및 선택기입니다.
	//  - mhutchie.git-graph: View a Git Graph of your repository, and perform Git actions from the graph.
	//  - donjayamanne.githistory: View git log, file history, compare branches or commits
	//  - vscode.github: VS Code용 GitHub 기능
	//  - vscode.github-authentication: GitHub 인증 공급자
	//  - eamodio.gitlens: Supercharge Git within VS Code — Visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: VSCode에 Gulp 기능을 추가할 확장입니다.
	//  - VisualStudioExptTeam.intellicode-api-usage-examples: 편집기에서 바로 100,000개가 넘는 다양한 API에 대한 GitHub의 관련 코드 예제를 확인하세요.
	//  - vscode.ipynb: Jupyter의 .ipynb 노트북 파일 열기 및 읽기에 대한 기본 지원을 제공합니다
	//  - vscode.jake: VS Code에 Jake 기능을 추가할 확장입니다.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
	//  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
	//  - ms-vscode.live-server: Hosts a local server in your workspace for you to preview your webpages on.
	//  - n-for-all.live-tailwind-alpine-preview: Edit and preview HTML documents in VS Code with tailwind and alpinejs support
	//  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
	//  - shd101wyy.markdown-preview-enhanced: Markdown Preview Enhanced ported to vscode
	//  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
	//  - vscode.media-preview: 이미지, 오디오 및 비디오에 대한 VS Code 기본 제공 미리 보기를 제공합니다.
	//  - vscode.merge-conflict: 인라인 병합 충돌에 대한 강조 표시 및 명령입니다.
	//  - vscode.microsoft-authentication: Microsoft 인증 공급자
	//  - vscjava.migrate-java-to-azure: Upgrade and migrate your Java applications to Azure
	//  - Cardinal90.multi-cursor-case-preserve: Preserves case when editing with multiple cursors
	//  - loczek.next-js-ts-snippets: A collection of Javascript and Typescript snippets for a awesome React framework called NEXT
	//  - WillLuke.nextjs: Automagicly add types to **nextjs** page functions i.e `getStaticSideProps`, `getServerSideProps` the returned types can not be automatically inferred and passed to the page. This extension also enables type safety in js code by leveraging JSDOCs
	//  - vscode.npm: npm 스크립트에 대한 작업 지원을 추가할 확장입니다.
	//  - christian-kohler.npm-intellisense: Visual Studio Code plugin that autocompletes npm modules in import statements
	//  - christian-kohler.path-intellisense: Visual Studio Code plugin that autocompletes filenames
	//  - inferrinizzard.prettier-sql-vscode: VSCode Extension to format SQL files
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - vscode.references-view: 사이드바에서 검색 결과를 별도의 안정적인 보기로 참조
	//  - ms-vscode-remote.remote-containers: Docker 컨테이너 내에서 폴더 또는 리포지토리를 열고 Visual Studio Code 전체 기능 집합을 활용합니다.
	//  - ms-vscode.remote-explorer: SSH 및 터널용 원격 컴퓨터를 봅니다.
	//  - ms-vscode.remote-repositories: 원격으로 git 리포지토리 탐색 및 편집
	//  - ms-vscode.remote-server: 터널을 통해 원격 컴퓨터에 연결
	//  - ms-vscode-remote.remote-ssh: SSH를 사용하여 원격 컴퓨터에서 폴더를 열고 VS Code의 전체 기능 집합을 활용합니다.
	//  - ms-vscode-remote.remote-wsl: Linux용 Windows 하위 시스템(WSL)에서 폴더를 열고 Visual Studio Code의 전체 기능 집합을 활용하세요.
	//  - GitHub.remotehub: 모든 GitHub 리포지토리를 원격으로 탐색하고 편집합니다.
	//  - vscode.search-result: 탭된 검색 결과에 대한 구문 강조 표시 및 언어 기능을 제공합니다.
	//  - bbenoist.shell: Execute shell commands from VS Code
	//  - foxundermoon.shell-format: A formatter for shell scripts, Dockerfile, gitignore, dotenv, /etc/hosts, jvmoptions, and other file types
	//  - vscode.simple-browser: 웹 콘텐츠를 표시하기 위한 매우 기본적인 기본 제공 웹 보기입니다.
	//  - burkeholland.simple-react-snippets: Dead simple React snippets you will actually use
	//  - qwtel.sqlite-viewer: SQLite Viewer for VS Code
	//  - austenc.tailwind-docs: Easily access the Tailwind CSS documentation from within Code
	//  - bourhaouta.tailwindshades: Tailwind CSS color palette generator
	//  - vscode.terminal-suggest: zsh, bash 및 fish 터미널에 대한 터미널 완성을 추가하는 확장입니다.
	//  - vscode.tunnel-forwarding: 전달 로컬 포트를 인터넷을 통해 액세스할 수 있도록 허용합니다.
	//  - ms-toolsai.vscode-ai-remote: This extension is used by the Azure Machine Learning Extension
	//  - ms-edgedevtools.vscode-edge-devtools: Use the Microsoft Edge Tools from within VS Code to see your site's runtime HTML structure, alter its layout, fix styling issues as well as see your site's network requests.
	//  - github.vscode-github-actions: GitHub Actions workflows and runs for github.com hosted repositories in VS Code
	//  - mkloubert.vscode-http-client: Simple way to do HTTP requests.
	//  - vscjava.vscode-java-dependency: Manage Java projects in Visual Studio Code
	//  - vscjava.vscode-java-test: Run and debug JUnit or TestNG test cases.
	//  - vscjava.vscode-java-upgrade: Upgrade Java project with GitHub Copilot
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - ms-toolsai.vscode-jupyter-cell-tags: Jupyter Cell Tags support for VS Code
	//  - ms-toolsai.vscode-jupyter-powertoys: Experimental features for Jupyter notebook support in VS Code.
	//  - ms-toolsai.vscode-jupyter-slideshow: Jupyter Slide Show support for VS Code
	//  - Lakshmisankar.vscode-lucide-icons: Add Lucide icons to your project
	//  - ms-python.vscode-python-envs: Provides a unified python environment experience
	//  - alexcvzz.vscode-sqlite: Explore and query SQLite databases.
	//  - bradlc.vscode-tailwindcss: Intelligent Tailwind CSS tooling for VS Code
	//  - andrewbranch.vscode-tsserver-debug: Adds a command to restart the TypeScript language server process with a debug port open
	//  - VisualStudioExptTeam.vscodeintellicode: AI 지원 개발
	"editor.defaultFoldingRangeProvider": null,

	// 다른 모든 포맷터 설정보다 우선하는 기본 포맷터를 정의합니다. 포맷터를 제공하는 확장 프로그램의 식별자 여야합니다.
	//  - null: None
	//  - formulahendry.auto-rename-tag: Auto rename paired HTML/XML tag
	//  - Bito.Bito: Agentic, codebase-aware AI Code Reviews in your IDE. Bito reviews code instantly without creating a pull request. Catch bugs early, improve quality, and ship faster. Try for free.
	//  - ms-python.black-formatter: Black 포맷터를 사용하여 Python 파일에 대한 서식 지정 지원
	//  - Codeium.codeium: The modern coding superpower: free AI code acceleration plugin for your favorite languages. Type less. Code more. Ship faster.
	//  - GitHub.copilot: Your AI pair programmer
	//  - GitHub.copilot-chat: AI chat features powered by Copilot
	//  - vscode.css-language-features: CSS, LESS 및 SCSS 파일에 대한 다양한 언어 지원을 제공합니다.
	//  - Dart-Code.dart-code: Dart language support and debugger for Visual Studio Code.
	//  - docker.docker: Edit smarter, ship faster with an enhanced Docker-development experience
	//  - Dart-Code.flutter: Flutter support and debugger for Visual Studio Code.
	//  - Zignd.html-css-class-completion: CSS class name completion for the HTML class attribute based on the definitions found in your workspace.
	//  - vscode.html-language-features: HTML 및 Handlebar 파일에 대해 다양한 언어 지원을 제공합니다.
	//  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
	//  - vscode.json-language-features: JSON 파일에 대한 다양한 언어 지원을 제공합니다.
	//  - yzhang.markdown-all-in-one: All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)
	//  - vscode.markdown-language-features: Markdown에 대한 다양한 언어 지원을 제공합니다.
	//  - vscode.markdown-math: 전자 필기장의 Markdown에 수학 지원을 추가합니다.
	//  - adamerose.markdown-wysiwyg: A powerful markdown WYSIWYG editor
	//  - vscode.php-language-features: PHP 파일에 대한 다양한 언어 지원을 제공합니다.
	//  - inferrinizzard.prettier-sql-vscode: VSCode Extension to format SQL files
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - Prisma.prisma: Adds syntax highlighting, formatting, auto-completion, jump-to-definition and linting for .prisma files.
	//  - ms-python.python: Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.
	//  - ms-vscode-remote.remote-ssh-edit: SSH 구성 파일 편집
	//  - humao.rest-client: REST Client for Visual Studio Code
	//  - foxundermoon.shell-format: A formatter for shell scripts, Dockerfile, gitignore, dotenv, /etc/hosts, jvmoptions, and other file types
	//  - jock.svg: SVG Coding, Minify, Pretty, Preview All-In-One
	//  - vscode.typescript-language-features: JavaScript 및 TypeScript에 대한 다양한 언어 지원을 제공합니다.
	//  - Vue.volar: Language Support for Vue
	//  - KevinRose.vsc-python-indent: Correct Python indentation
	//  - ms-azuretools.vscode-containers: Makes it easy to create, manage, and debug containerized applications.
	//  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
	//  - vscjava.vscode-gradle: Manage Gradle Projects, run Gradle tasks and provide better Gradle file authoring experience in VS Code
	//  - ecmel.vscode-html-css: CSS Intellisense for HTML
	//  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
	//  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
	//  - vscjava.vscode-maven: Manage Maven projects, execute goals, generate project from archetype, improve user experience for Java developers.
	//  - fuhidev.vscode-nesttypeorm: Quickly scaffold nest typeorm templates
	//  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
	//  - njqdev.vscode-python-typehint: Type hint completion for Python.
	//  - rangav.vscode-thunder-client: Lightweight Rest API Client for VS Code
	//  - redhat.vscode-xml: XML Language Support by Red Hat
	//  - 343max.android-emulator-launcher: Launch Android Emulators directly from VS Code.
	//  - ms-vscode.azure-repos: 모든 Azure Repos를 원격으로 탐색 및 편집
	//  - vscode.configuration-editing: 설정, 시작 및 확장 추천 파일과 같은 구성 파일에서 기능(고급 IntelliSense, 자동 수정)을 제공합니다.
	//  - Wscats.cors-browser: 🚀Preview file in your default browser
	//  - vscode.debug-auto-launch: 노드 디버그 확장이 비활성화될 때 자동 연결 기능을 위한 도우미입니다.
	//  - vscode.debug-server-ready: 디버깅 중인 서버가 준비되면 브라우저에서 URI를 엽니다.
	//  - ms-python.debugpy: Python Debugger extension using debugpy.
	//  - vscode.emmet: VS Code에 대한 Emmet 지원
	//  - DiemasMichiels.emulate: Run Android emulator and iOS simulator easily from VScode!
	//  - dsznajder.es7-react-js-snippets: Extensions for React, React-Native and Redux in JS/TS with ES7+ syntax. Customizable. Built-in integration with prettier.
	//  - vscode.extension-editing: 확장 제작을 위한 Lint 기능을 제공합니다.
	//  - vscode.git: Git SCM 통합
	//  - vscode.git-base: GIT 고정적 기여 및 선택기입니다.
	//  - mhutchie.git-graph: View a Git Graph of your repository, and perform Git actions from the graph.
	//  - donjayamanne.githistory: View git log, file history, compare branches or commits
	//  - vscode.github: VS Code용 GitHub 기능
	//  - vscode.github-authentication: GitHub 인증 공급자
	//  - eamodio.gitlens: Supercharge Git within VS Code — Visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: VSCode에 Gulp 기능을 추가할 확장입니다.
	//  - VisualStudioExptTeam.intellicode-api-usage-examples: 편집기에서 바로 100,000개가 넘는 다양한 API에 대한 GitHub의 관련 코드 예제를 확인하세요.
	//  - vscode.ipynb: Jupyter의 .ipynb 노트북 파일 열기 및 읽기에 대한 기본 지원을 제공합니다
	//  - vscode.jake: VS Code에 Jake 기능을 추가할 확장입니다.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
	//  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
	//  - ms-vscode.live-server: Hosts a local server in your workspace for you to preview your webpages on.
	//  - n-for-all.live-tailwind-alpine-preview: Edit and preview HTML documents in VS Code with tailwind and alpinejs support
	//  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
	//  - shd101wyy.markdown-preview-enhanced: Markdown Preview Enhanced ported to vscode
	//  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
	//  - vscode.media-preview: 이미지, 오디오 및 비디오에 대한 VS Code 기본 제공 미리 보기를 제공합니다.
	//  - vscode.merge-conflict: 인라인 병합 충돌에 대한 강조 표시 및 명령입니다.
	//  - vscode.microsoft-authentication: Microsoft 인증 공급자
	//  - vscjava.migrate-java-to-azure: Upgrade and migrate your Java applications to Azure
	//  - Cardinal90.multi-cursor-case-preserve: Preserves case when editing with multiple cursors
	//  - loczek.next-js-ts-snippets: A collection of Javascript and Typescript snippets for a awesome React framework called NEXT
	//  - WillLuke.nextjs: Automagicly add types to **nextjs** page functions i.e `getStaticSideProps`, `getServerSideProps` the returned types can not be automatically inferred and passed to the page. This extension also enables type safety in js code by leveraging JSDOCs
	//  - vscode.npm: npm 스크립트에 대한 작업 지원을 추가할 확장입니다.
	//  - christian-kohler.npm-intellisense: Visual Studio Code plugin that autocompletes npm modules in import statements
	//  - christian-kohler.path-intellisense: Visual Studio Code plugin that autocompletes filenames
	//  - vscode.references-view: 사이드바에서 검색 결과를 별도의 안정적인 보기로 참조
	//  - ms-vscode-remote.remote-containers: Docker 컨테이너 내에서 폴더 또는 리포지토리를 열고 Visual Studio Code 전체 기능 집합을 활용합니다.
	//  - ms-vscode.remote-explorer: SSH 및 터널용 원격 컴퓨터를 봅니다.
	//  - ms-vscode.remote-repositories: 원격으로 git 리포지토리 탐색 및 편집
	//  - ms-vscode.remote-server: 터널을 통해 원격 컴퓨터에 연결
	//  - ms-vscode-remote.remote-ssh: SSH를 사용하여 원격 컴퓨터에서 폴더를 열고 VS Code의 전체 기능 집합을 활용합니다.
	//  - ms-vscode-remote.remote-wsl: Linux용 Windows 하위 시스템(WSL)에서 폴더를 열고 Visual Studio Code의 전체 기능 집합을 활용하세요.
	//  - GitHub.remotehub: 모든 GitHub 리포지토리를 원격으로 탐색하고 편집합니다.
	//  - vscode.search-result: 탭된 검색 결과에 대한 구문 강조 표시 및 언어 기능을 제공합니다.
	//  - bbenoist.shell: Execute shell commands from VS Code
	//  - vscode.simple-browser: 웹 콘텐츠를 표시하기 위한 매우 기본적인 기본 제공 웹 보기입니다.
	//  - burkeholland.simple-react-snippets: Dead simple React snippets you will actually use
	//  - qwtel.sqlite-viewer: SQLite Viewer for VS Code
	//  - austenc.tailwind-docs: Easily access the Tailwind CSS documentation from within Code
	//  - bourhaouta.tailwindshades: Tailwind CSS color palette generator
	//  - vscode.terminal-suggest: zsh, bash 및 fish 터미널에 대한 터미널 완성을 추가하는 확장입니다.
	//  - vscode.tunnel-forwarding: 전달 로컬 포트를 인터넷을 통해 액세스할 수 있도록 허용합니다.
	//  - ms-toolsai.vscode-ai-remote: This extension is used by the Azure Machine Learning Extension
	//  - ms-edgedevtools.vscode-edge-devtools: Use the Microsoft Edge Tools from within VS Code to see your site's runtime HTML structure, alter its layout, fix styling issues as well as see your site's network requests.
	//  - github.vscode-github-actions: GitHub Actions workflows and runs for github.com hosted repositories in VS Code
	//  - mkloubert.vscode-http-client: Simple way to do HTTP requests.
	//  - vscjava.vscode-java-dependency: Manage Java projects in Visual Studio Code
	//  - vscjava.vscode-java-test: Run and debug JUnit or TestNG test cases.
	//  - vscjava.vscode-java-upgrade: Upgrade Java project with GitHub Copilot
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - ms-toolsai.vscode-jupyter-cell-tags: Jupyter Cell Tags support for VS Code
	//  - ms-toolsai.vscode-jupyter-powertoys: Experimental features for Jupyter notebook support in VS Code.
	//  - ms-toolsai.vscode-jupyter-slideshow: Jupyter Slide Show support for VS Code
	//  - Lakshmisankar.vscode-lucide-icons: Add Lucide icons to your project
	//  - ms-python.vscode-python-envs: Provides a unified python environment experience
	//  - alexcvzz.vscode-sqlite: Explore and query SQLite databases.
	//  - bradlc.vscode-tailwindcss: Intelligent Tailwind CSS tooling for VS Code
	//  - andrewbranch.vscode-tsserver-debug: Adds a command to restart the TypeScript language server process with a debug port open
	//  - VisualStudioExptTeam.vscodeintellicode: AI 지원 개발
	"editor.defaultFormatter": null,

	// 이동 정의 마우스 제스처가 항상 미리 보기 위젯을 열지 여부를 제어합니다.
	"editor.definitionLinkOpensInPeek": false,

	// 파일 내용을 기반으로 파일을 열 때 `editor.tabSize#` 및 `#editor.insertSpaces`을(를) 자동으로 감지할지 여부를 제어합니다.
	"editor.detectIndentation": true,

	// 편집기에서 끌어서 놓기로 선택 영역을 이동할 수 있는지 여부를 제어합니다.
	"editor.dragAndDrop": true,

	// 편집기에서 파일을 여는 대신 `shift`를 누른 채 파일을 텍스트 편집기로 끌어서 놓을 수 있는지 여부를 제어합니다.
	"editor.dropIntoEditor.enabled": true,

	// 콘텐츠를 삭제할 때 사용할 기본 편집 유형을 구성합니다.
	// 
	// 정렬된 편집 종류의 목록입니다. 기본 설정 종류의 첫 번째 사용 가능한 편집이 사용됩니다.
	"editor.dropIntoEditor.preferences": [],

	// 편집기에 파일을 끌어 놓을 때 위젯을 표시할지 여부를 제어합니다. 이 위젯을 사용하면 파일을 드롭하는 방법을 제어할 수 있습니다.
	//  - afterDrop: 파일이 편집기에 드롭된 후 드롭 선택기 위젯을 표시합니다.
	//  - never: 드롭 선택기 위젯을 표시하지 않습니다. 대신 기본 드롭 공급자가 항상 사용됩니다.
	"editor.dropIntoEditor.showDropSelector": "afterDrop",

	// 편집기에서 입력을 처리하기 위해 텍스트 영역 대신 EditContext API를 사용할지 여부를 설정합니다.
	"editor.editContext": true,

	// 선택 영역 없이 현재 줄 복사 여부를 제어합니다.
	"editor.emptySelectionClipboard": true,

	// 웹 작업자에서 토큰화가 비동기적으로 수행되어야 하는지 여부를 제어합니다.
	"editor.experimental.asyncTokenization": true,

	// 비동기 토큰화가 기록되어야 하는지 여부를 제어합니다. 디버깅 전용입니다.
	"editor.experimental.asyncTokenizationLogging": false,

	// 레거시 백그라운드 토큰화에 대해 비동기 토큰화를 확인해야 하는지 여부를 제어합니다. 토큰화 속도가 느려질 수 있습니다. 디버깅 전용입니다.
	"editor.experimental.asyncTokenizationVerification": false,

	// css에 대한 트리 시터 구문 분석 설정 여부를 제어합니다. css의 경우 '#editor.experimental.treeSitterTelemetry#'보다 우선합니다.
	"editor.experimental.preferTreeSitter.css": false,

	// ini에 대한 트리 시터 구문 분석 설정 여부를 제어합니다. ini의 경우 '#editor.experimental.treeSitterTelemetry#'보다 우선합니다.
	"editor.experimental.preferTreeSitter.ini": false,

	// regex에 트리 시터 구문 분석을 설정해야 하는지 여부를 제어합니다. 이는 regex에 대해 '#editor.experimental.treeSitterTelemetry#'보다 우선합니다.
	"editor.experimental.preferTreeSitter.regex": false,

	// TypeScript에 대한 트리 시터 구문 분석 설정 여부를 제어합니다. TypeScript의 경우 '#editor.experimental.treeSitterTelemetry#'보다 우선합니다.
	"editor.experimental.preferTreeSitter.typescript": false,

	// 트리 시터 구문 분석을 설정하고 원격 분석을 수집해야 하는지 여부를 제어합니다. 특정 언어에 대해 '#editor.experimental.preferTreeSitter#'를 설정하는 것이 우선적으로 적용됩니다.
	"editor.experimental.treeSitterTelemetry": false,

	// 실험적 GPU 가속을 사용하여 편집기를 렌더링할지 여부를 제어합니다.
	//  - off: 일반 DOM 기반 렌더링을 사용합니다.
	//  - on: GPU 가속을 사용합니다.
	"editor.experimentalGpuAcceleration": "off",

	// 공백이 새로운 실험적 메서드로 렌더링되는지 여부를 제어합니다.
	//  - svg: svgs와 함께 새 렌더링 메서드를 사용합니다.
	//  - font: 글꼴 문자와 함께 새 렌더링 방법을 사용합니다.
	//  - off: 안정적인 렌더링 방법을 사용합니다.
	"editor.experimentalWhitespaceRendering": "svg",

	// 'Alt' 키를 누를 때 스크롤 속도 승수입니다.
	"editor.fastScrollSensitivity": 5,

	// 위젯 찾기에서 편집기 맨 위에 줄을 추가해야 하는지 여부를 제어합니다. true인 경우 위젯 찾기가 표시되면 첫 번째 줄 위로 스크롤할 수 있습니다.
	"editor.find.addExtraSpaceOnTop": true,

	// 선택 영역에서 찾기를 자동으로 설정하는 조건을 제어합니다.
	//  - never: 선택 영역에서 찾기를 자동으로 켜지 않습니다(기본값).
	//  - always: 선택 영역에서 찾기를 항상 자동으로 켭니다.
	//  - multiline: 여러 줄의 콘텐츠를 선택하면 선택 항목에서 찾기가 자동으로 켜집니다.
	"editor.find.autoFindInSelection": "never",

	// 입력하는 동안 일치 항목을 찾기 위한 커서 이동 여부를 제어합니다.
	"editor.find.cursorMoveOnType": true,

	// 입력하는 동안 찾기 위젯이 검색할지 여부를 제어합니다.
	"editor.find.findOnType": true,

	// 위젯 찾기 기록을 저장하는 방법을 제어합니다.
	//  - never: 찾기 위젯에서 검색 기록을 저장하지 않습니다.
	//  - workspace: 활성 작업 영역에 검색 기록 저장
	"editor.find.history": "workspace",

	// 더 이상 일치하는 항목이 없을 때 검색을 처음이나 끝에서 자동으로 다시 시작할지 여부를 제어합니다.
	"editor.find.loop": true,

	// 바꾸기 위젯 기록을 저장하는 방법을 제어합니다.
	//  - never: 바꾸기 위젯의 기록을 저장하지 마세요.
	//  - workspace: 활성 작업 영역에서 바꾸기 기록 저장
	"editor.find.replaceHistory": "workspace",

	// 편집기 선택에서 Find Widget의 검색 문자열을 시딩할지 여부를 제어합니다.
	//  - never: 편집기 선택 영역에서 검색 문자열을 시드하지 마세요.
	//  - always: 커서 위치의 단어를 포함하여 항상 편집기 선택 영역에서 검색 문자열을 시드합니다.
	//  - selection: 편집기 선택 영역에서만 검색 문자열을 시드하세요.
	"editor.find.seedSearchStringFromSelection": "always",

	// 편집기에 코드 접기가 사용하도록 설정되는지 여부를 제어합니다.
	"editor.folding": true,

	// 편집기에서 접힌 범위를 강조 표시할지 여부를 제어합니다.
	"editor.foldingHighlight": true,

	// 편집기에서 가져오기 범위를 자동으로 축소할지 여부를 제어합니다.
	"editor.foldingImportsByDefault": false,

	// 폴더블 영역의 최대 수입니다. 현재 원본에 폴더블 영역이 많을 때 이 값을 늘리면 편집기의 반응이 떨어질 수 있습니다.
	"editor.foldingMaximumRegions": 5000,

	// 접기 범위를 계산하기 위한 전략을 제어합니다.
	//  - auto: 사용 가능한 경우 언어별 접기 전략을 사용합니다. 그렇지 않은 경우 들여쓰기 기반 전략을 사용합니다.
	//  - indentation: 들여쓰기 기반 접기 전략을 사용합니다.
	"editor.foldingStrategy": "auto",

	// 글꼴 패밀리를 제어합니다.
	"editor.fontFamily": "Consolas, 'Courier New', monospace",

	// 글꼴 합자 또는 글꼴 기능을 구성합니다. CSS 'font-feature-settings' 속성의 값에 대해 합자 또는 문자열을 사용하거나 사용하지 않도록 설정하기 위한 부울일 수 있습니다.
	"editor.fontLigatures": false,

	// 글꼴 크기(픽셀)를 제어합니다.
	"editor.fontSize": 14,

	// 글꼴 변형을 구성합니다. font-weight에서 font-variation-settings로 변환을 사용/사용하지 않도록 설정하는 부울이거나 CSS 'font-variation-settings' 속성 값에 대한 문자열일 수 있습니다.
	"editor.fontVariations": false,

	// 글꼴 두께를 제어합니다. "표준" 및 "굵게" 키워드 또는 1~1000 사이의 숫자를 허용합니다.
	"editor.fontWeight": "normal",

	// 붙여넣은 콘텐츠의 서식을 편집기에서 자동으로 지정할지 여부를 제어합니다. 포맷터를 사용할 수 있어야 하며 포맷터가 문서에서 범위의 서식을 지정할 수 있어야 합니다.
	"editor.formatOnPaste": false,

	// 저장 시 파일의 형식을 지정합니다. 포맷터를 사용할 수 있어야 하며 편집기를 종료하면 안 됩니다. `files.autoSave`이(가) 'afterDelay'로 설정된 경우 파일은 명시적으로 저장될 때만 형식이 지정됩니다.
	"editor.formatOnSave": false,

	// 저장 시 포맷이 전체 파일을 포맷하는지 또는 수정 내용만 포맷하는지를 제어합니다. '#editor.formatOnSave#'를 사용하도록 설정한 경우에만 적용됩니다.
	//  - file: 전체 파일을 포맷합니다.
	//  - modifications: 수정 사항을 포맷합니다(소스 제어 필요).
	//  - modificationsIfAvailable: 수정 사항만 형식화하려고 시도합니다(원본 제어 필요). 원본 제어를 사용할 수 없으면 전체 파일이 포맷됩니다.
	"editor.formatOnSaveMode": "file",

	// 입력 후 편집기에서 자동으로 줄의 서식을 지정할지 여부를 제어합니다.
	"editor.formatOnType": false,

	// 편집기에서 세로 문자 모양 여백을 렌더링할지 여부를 제어합니다. 문자 모양 여백은 주로 디버깅에 사용됩니다.
	"editor.glyphMargin": true,

	// '선언으로 이동'의 결과가 현재 위치일 때 실행되는 대체 명령 ID입니다.
	"editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

	// '정의로 이동'의 결과가 현재 위치일 때 실행되는 대체 명령 ID입니다.
	"editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

	// '구현으로 이동'의 결과가 현재 위치일 때 실행되는 대체 명령 ID입니다.
	"editor.gotoLocation.alternativeImplementationCommand": "",

	// '참조로 이동'의 결과가 현재 위치일 때 실행되는 대체 명령 ID입니다.
	"editor.gotoLocation.alternativeReferenceCommand": "",

	// '형식 정의로 이동'의 결과가 현재 위치일 때 실행되는 대체 명령 ID입니다.
	"editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

	// 이 설정은 더 이상 사용되지 않습니다. 대신 'editor.editor.gotoLocation.multipleDefinitions' 또는 'editor.editor.gotoLocation.multipleImplementations'와 같은 별도의 설정을 사용하세요.
	// 
	"editor.gotoLocation.multiple": null,

	// 여러 대상 위치가 있는 경우 'Go to Declaration' 명령 동작을 제어합니다.
	//  - peek: 결과의 Peek 보기 표시(기본값)
	//  - gotoAndPeek: 기본 결과로 이동하여 Peek 보기를 표시합니다.
	//  - goto: 기본 결과로 이동하여 다른 항목에 대해 Peek 없는 탐색을 사용하도록 설정합니다.
	"editor.gotoLocation.multipleDeclarations": "peek",

	// 여러 대상 위치가 있는 경우 '정의로 이동' 명령 동작을 제어합니다.
	//  - peek: 결과의 Peek 보기 표시(기본값)
	//  - gotoAndPeek: 기본 결과로 이동하여 Peek 보기를 표시합니다.
	//  - goto: 기본 결과로 이동하여 다른 항목에 대해 Peek 없는 탐색을 사용하도록 설정합니다.
	"editor.gotoLocation.multipleDefinitions": "peek",

	// 여러 대상 위치가 있는 경우 '구현으로 이동' 명령 동작을 제어합니다.
	//  - peek: 결과의 Peek 보기 표시(기본값)
	//  - gotoAndPeek: 기본 결과로 이동하여 Peek 보기를 표시합니다.
	//  - goto: 기본 결과로 이동하여 다른 항목에 대해 Peek 없는 탐색을 사용하도록 설정합니다.
	"editor.gotoLocation.multipleImplementations": "peek",

	// 여러 대상 위치가 있는 경우 '참조로 이동' 명령 동작을 제어합니다.
	//  - peek: 결과의 Peek 보기 표시(기본값)
	//  - gotoAndPeek: 기본 결과로 이동하여 Peek 보기를 표시합니다.
	//  - goto: 기본 결과로 이동하여 다른 항목에 대해 Peek 없는 탐색을 사용하도록 설정합니다.
	"editor.gotoLocation.multipleReferences": "peek",

	// 여러 대상 위치가 있는 경우 '유형 정의로 이동' 명령 동작을 제어합니다.
	//  - peek: 결과의 Peek 보기 표시(기본값)
	//  - gotoAndPeek: 기본 결과로 이동하여 Peek 보기를 표시합니다.
	//  - goto: 기본 결과로 이동하여 다른 항목에 대해 Peek 없는 탐색을 사용하도록 설정합니다.
	"editor.gotoLocation.multipleTypeDefinitions": "peek",

	// 대괄호 쌍 안내선의 사용 여부를 제어합니다.
	//  - true: 대괄호 쌍 가이드를 사용하도록 설정합니다.
	//  - active: 활성 대괄호 쌍에 대해서만 대괄호 쌍 가이드를 사용하도록 설정합니다.
	//  - false: 대괄호 쌍 가이드를 비활성화합니다.
	"editor.guides.bracketPairs": false,

	// 가로 대괄호 쌍 안내선의 사용 여부를 제어합니다.
	//  - true: 수직 대괄호 쌍 가이드에 추가하여 수평 가이드를 사용하도록 설정합니다.
	//  - active: 활성 대괄호 쌍에 대해서만 수평 가이드를 사용하도록 설정합니다.
	//  - false: 수평 대괄호 쌍 가이드를 비활성화합니다.
	"editor.guides.bracketPairsHorizontal": "active",

	// 편집기가 활성 브래킷 쌍을 강조 표시해야 하는지 여부를 제어합니다.
	"editor.guides.highlightActiveBracketPair": true,

	// 편집기에서 활성 들여쓰기 가이드를 강조 표시할지 여부를 제어합니다.
	//  - true: 활성 들여쓰기 안내선을 강조 표시합니다.
	//  - always: 브래킷 안내선이 강조 표시된 경우에도 활성 들여쓰기 안내선을 강조 표시합니다.
	//  - false: 활성 들여쓰기 안내선을 강조 표시하지 마세요.
	"editor.guides.highlightActiveIndentation": true,

	// 편집기에서 들여쓰기 가이드를 렌더링할지를 제어합니다.
	"editor.guides.indentation": true,

	// 커서가 개요 눈금자에서 가려져야 하는지 여부를 제어합니다.
	"editor.hideCursorInOverviewRuler": false,

	// 공백이 있는 경우 선 위에 마우스를 가져가는 것을 표시하는 것을 선호합니다.
	"editor.hover.above": true,

	// 호버가 표시되기 전까지의 지연 시간(밀리초)을 제어합니다.
	"editor.hover.delay": 300,

	// 호버 표시 여부를 제어합니다.
	"editor.hover.enabled": true,

	// 호버가 숨겨지기 전까지의 지연 시간(밀리초)을 제어합니다. '#editor.hover.sticky#'를 사용하도록 설정해야 합니다.
	"editor.hover.hidingDelay": 300,

	// 마우스를 해당 항목 위로 이동할 때 호버를 계속 표시할지 여부를 제어합니다.
	"editor.hover.sticky": true,

	// 들여쓰기 또는 `"tabSize"에서 '#editor.tabSize#'의 값을 사용하는 데 사용되는 공백 수입니다. 이 설정은 '#editor.detectIndentation#'이 켜져 있는 경우 파일 내용에 따라 재정의됩니다.
	"editor.indentSize": "tabSize",

	// 스크롤 관성 만들기 - Linux의 터치 패드에서 주로 유용합니다.
	"editor.inertialScroll": false,

	// 편집기에서 인레이 힌트를 사용하도록 설정합니다.
	//  - on: 인레이 힌트를 사용할 수 있음
	//  - onUnlessPressed: 인레이 힌트는 기본적으로 표시되고 Ctrl+Alt을(를) 길게 누를 때 숨겨집니다.
	//  - offUnlessPressed: 인레이 힌트는 기본값으로 숨겨져 있으며 Ctrl+Alt을(를) 길게 누르면 표시됩니다.
	//  - off: 인레이 힌트는 사용할 수 없음
	"editor.inlayHints.enabled": "on",

	// 편집기에서 인레이 힌트의 글꼴 패밀리를 제어합니다. 비워 두면 `editor.fontFamily`이(가) 사용됩니다.
	"editor.inlayHints.fontFamily": "",

	// 편집기에서 인레이 힌트의 글꼴 크기를 제어합니다. 기본적으로 `editor.fontSize`은(는) 구성된 값이 `5`보다 작거나 편집기 글꼴 크기보다 큰 경우에 사용됩니다.
	"editor.inlayHints.fontSize": 0,

	// 편집기에 의해 잘리기 전에 한 줄에 대한 인레이 힌트의 최대 전체 길이입니다. 자를 수 없도록 '0'으로 설정
	"editor.inlayHints.maximumLength": 43,

	// 편집기에서 인레이 힌트 주위의 패딩을 사용하도록 설정합니다.
	"editor.inlayHints.padding": false,

	// 인라인 완성이 표시될 때 화면 읽기 프로그램 사용자에게 접근성 힌트를 제공해야 하는지 여부를 제어합니다.
	"editor.inlineCompletionsAccessibilityVerbose": false,

	// 제안을 표시하면 코드가 인라인으로 제안 공간을 만들 수 있는지 여부를 제어합니다.
	"editor.inlineSuggest.edits.allowCodeShifting": "always",

	// 더 큰 제안을 나란히 표시할 수 있는지 여부를 제어합니다.
	//  - auto: 더 큰 제안은 공간이 충분하면 나란히 표시되고, 그렇지 않으면 아래에 표시됩니다.
	//  - never: 더 큰 제안은 나란히 표시되지 않으며 항상 아래에 표시됩니다.
	"editor.inlineSuggest.edits.renderSideBySide": "auto",

	// 제안으로 점프할 때까지 제안을 축소된 것으로 표시할지 여부를 제어합니다.
	"editor.inlineSuggest.edits.showCollapsed": false,

	// 편집기에서 인라인 제안을 자동으로 표시할지 여부를 제어합니다.
	"editor.inlineSuggest.enabled": true,

	// 제안 충돌이 있을 때 인라인 제안을 표시할지 여부를 제어합니다.
	"editor.inlineSuggest.experimental.showOnSuggestConflict": "never",

	// 지정한 확장 ID에 대한 인라인 완성을 억제합니다. 쉼표로 구분됩니다.
	"editor.inlineSuggest.experimental.suppressInlineSuggestions": "",

	// 인라인 제안의 글꼴 패밀리를 제어합니다.
	"editor.inlineSuggest.fontFamily": "default",

	// 입력 후 인라인 제안이 표시되기까지의 최소 지연 시간(밀리초)을 제어합니다.
	"editor.inlineSuggest.minShowDelay": 0,

	// 인라인 추천 도구 모음을 표시할 시기를 제어합니다.
	//  - always: 인라인 추천을 표시힐 때마다 인라인 추천 도구 모음을 표시합니다.
	//  - onHover: 인라인 추천을 마우스로 가리키면 인라인 추천 도구 모음을 표시합니다.
	//  - never: 인라인 추천 도구 모음을 표시하지 않습니다.
	"editor.inlineSuggest.showToolbar": "onHover",

	// 인라인 제안이 제안 위젯과 상호 작용하는 방법을 제어합니다. 사용하도록 설정하면 인라인 제안을 사용할 수 있을 때 제안 위젯이 자동으로 표시되지 않습니다.
	"editor.inlineSuggest.suppressSuggestions": false,

	// 편집기에서 인라인 제안에 대한 구문 강조 표시를 표시할지 여부를 제어합니다.
	"editor.inlineSuggest.syntaxHighlightingEnabled": true,

	// 인라인 제안 공급자가 변경될 때 명령을 트리거할지 여부를 제어합니다.
	"editor.inlineSuggest.triggerCommandOnProviderChange": true,

	// `Tab`을 누를 때 공백을 삽입하세요. 이 설정은 `editor.detectIndentation`이(가) 켜져 있을 때 파일 내용을 기반으로 재정의됩니다.
	"editor.insertSpaces": true,

	// 들여쓰기를 늘리거나 줄이는 대괄호 기호를 정의합니다.
	"editor.language.brackets": null,

	// 대괄호 쌍 색 지정을 사용하는 경우 중첩 수준에 따라 색이 지정된 대괄호 쌍을 정의합니다.
	"editor.language.colorizedBracketPairs": null,

	// 큰 파일에 대한 특수 처리로, 메모리를 많이 사용하는 특정 기능을 사용하지 않도록 설정합니다.
	"editor.largeFileOptimizations": true,

	// 문자 간격(픽셀)을 제어합니다.
	"editor.letterSpacing": 0,

	// 편집기에서 코드 동작 전구를 사용하도록 설정합니다.
	//  - off: 코드 작업 메뉴를 사용하지 않도록 설정합니다.
	//  - onCode: 커서가 코드가 있는 줄에 있을 때 코드 동작 메뉴를 표시합니다.
	//  - on: 커서가 코드가 있는 줄 또는 빈 줄에 있는 경우 코드 동작 메뉴를 표시합니다.
	"editor.lightbulb.enabled": "onCode",

	// 선 높이를 제어합니다. 
	//  - 0을 사용하여 글꼴 크기에서 줄 높이를 자동으로 계산합니다.
	//  - 0에서 8 사이의 값은 글꼴 크기의 승수로 사용됩니다.
	//  - 8보다 크거나 같은 값이 유효 값으로 사용됩니다.
	"editor.lineHeight": 0,

	// 줄 번호의 표시 여부를 제어합니다.
	//  - off: 줄 번호는 렌더링되지 않습니다.
	//  - on: 줄 번호는 절대값으로 렌더링 됩니다.
	//  - relative: 줄 번호는 커서 위치에서 줄 간격 거리로 렌더링 됩니다.
	//  - interval: 줄 번호는 매 10 줄마다 렌더링이 이루어집니다.
	"editor.lineNumbers": "on",

	// 편집기에서 연결된 편집이 사용하도록 설정되었는지를 제어합니다. 언어에 따라 관련 기호(예: HTML 태그)가 편집 중에 업데이트됩니다.
	"editor.linkedEditing": false,

	// 편집기에서 링크를 감지하고 클릭할 수 있게 만들지 여부를 제어합니다.
	"editor.links": true,

	// 일치하는 대괄호를 강조 표시합니다.
	"editor.matchBrackets": "always",

	// 이 길이를 초과하는 줄은 성능상의 이유로 토큰화되지 않습니다.
	"editor.maxTokenizationLineLength": 20000,

	// 미니맵을 자동으로 숨길지 여부를 제어합니다.
	//  - none: 미니맵은 항상 표시됩니다.
	//  - mouseover: 마우스가 미니맵 위에 있지 않으면 미니맵이 숨겨지고, 마우스가 미니맵 위에 있으면 미니맵이 표시됩니다.
	//  - scroll: 미니맵은 편집기가 스크롤될 때만 표시됩니다.
	"editor.minimap.autohide": "none",

	// 미니맵 표시 여부를 제어합니다.
	"editor.minimap.enabled": true,

	// 주석에서 섹션 헤더를 찾는 데 사용되는 정규식을 정의합니다. regex에는 섹션 헤더를 캡슐화하는 명명된 일치 그룹 'label'('(?<label>.+)'으로 작성됨)이 포함되어야 합니다. 그렇지 않으면 작동하지 않습니다. 필요에 따라 'separator'라는 다른 일치 그룹을 포함할 수 있습니다. 패턴에서 \n 사용하여 여러 줄 머리글을 일치시킬 수 있습니다.
	"editor.minimap.markSectionHeaderRegex": "\\bMARK:\\s*(?<separator>-?)\\s*(?<label>.*)$",

	// 최대 특정 수의 열을 렌더링하도록 미니맵의 너비를 제한합니다.
	"editor.minimap.maxColumn": 120,

	// 줄의 실제 문자(색 블록 아님)를 렌더링합니다.
	"editor.minimap.renderCharacters": true,

	// 미니맵에 그려진 콘텐츠의 배율: 1, 2 또는 3.
	"editor.minimap.scale": 1,

	// 미니맵에서 섹션 머리글의 글꼴 크기를 제어합니다.
	"editor.minimap.sectionHeaderFontSize": 9,

	// 구역 머리글 문자 사이의 간격(픽셀)을 제어합니다. 이렇게 하면 작은 글꼴 크기의 머리글 가독성을 높이는 데 도움이 됩니다.
	"editor.minimap.sectionHeaderLetterSpacing": 1,

	// MARK: 주석이 미니맵에 섹션 머리글로 표시되는지 여부를 제어합니다.
	"editor.minimap.showMarkSectionHeaders": true,

	// 명명된 영역을 미니맵에 섹션 머리글로 표시할지 여부를 제어합니다.
	"editor.minimap.showRegionSectionHeaders": true,

	// 미니맵 슬라이더가 표시되는 시기를 제어합니다.
	"editor.minimap.showSlider": "mouseover",

	// 미니맵을 렌더링할 측면을 제어합니다.
	"editor.minimap.side": "right",

	// 미니맵의 크기를 제어합니다.
	//  - proportional: 미니맵의 크기는 편집기 내용과 동일하며 스크롤할 수 있습니다.
	//  - fill: 편집기의 높이를 맞추기 위해 필요에 따라 미니맵이 확장되거나 축소됩니다(스크롤 없음).
	//  - fit: 미니맵을 편집기보다 작게 유지할 수 있도록 필요에 따라 미니맵이 축소됩니다(스크롤 없음).
	"editor.minimap.size": "proportional",

	// 마우스 휠 스크롤 이벤트의 `deltaX` 및 `deltaY`에서 사용할 승수입니다.
	"editor.mouseWheelScrollSensitivity": 1,

	// 마우스 휠을 사용할 때 'Ctrl' 키를 누르고 있으면 편집기의 글꼴을 확대/축소합니다.
	"editor.mouseWheelZoom": false,

	// 한 번에 활성 편집기에 있을 수 있는 최대 커서 수를 제어합니다.
	"editor.multiCursorLimit": 10000,

	// 여러 커서가 겹치는 경우 커서를 병합합니다.
	"editor.multiCursorMergeOverlapping": true,

	// 마우스로 여러 커서를 추가할 때 사용할 수정자입니다. [정의로 이동] 및 [링크 열기] 마우스 제스처가 [멀티커서 수정자와](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier) 충돌하지 않도록 조정됩니다.
	//  - ctrlCmd: Windows와 Linux의 'Control'을 macOS의 'Command'로 매핑합니다.
	//  - alt: Windows와 Linux의 'Alt'를 macOS의 'Option'으로 매핑합니다.
	"editor.multiCursorModifier": "alt",

	// 붙여넣은 텍스트의 줄 수가 커서 수와 일치하는 경우 붙여넣기를 제어합니다.
	//  - spread: 각 커서는 텍스트 한 줄을 붙여넣습니다.
	//  - full: 각 커서는 전체 텍스트를 붙여넣습니다.
	"editor.multiCursorPaste": "spread",

	// 열린 파일 전체에서 발생 수를 강조 표시할지 여부를 제어합니다.
	//  - off: 발생 항목을 강조 표시하지 않습니다.
	//  - singleFile: 현재 파일의 발생 항목만 강조 표시합니다.
	//  - multiFile: 실험적: 모든 유효한 열린 파일에서 발생 항목을 강조 표시합니다.
	"editor.occurrencesHighlight": "singleFile",

	// 발생이 강조 표시된 후의 지연 시간(밀리초)을 제어합니다.
	"editor.occurrencesHighlightDelay": 0,

	// 오버타입 입력 모드에서 커서 스타일을 제어합니다.
	"editor.overtypeCursorStyle": "block",

	// 붙여넣기를 오버타입해야 하는지 여부를 제어합니다.
	"editor.overtypeOnPaste": true,

	// 개요 눈금자 주위에 테두리를 그릴지 여부를 제어합니다.
	"editor.overviewRulerBorder": true,

	// 편집기의 아래쪽 가장자리와 마지막 줄 사이의 공백을 제어합니다.
	"editor.padding.bottom": 0,

	// 편집기의 위쪽 가장자리와 첫 번째 줄 사이의 공백을 제어합니다.
	"editor.padding.top": 0,

	// 매개변수 힌트 메뉴의 주기 혹은 목록의 끝에 도달하였을때 종료할 것인지 여부를 결정합니다.
	"editor.parameterHints.cycle": true,

	// 입력과 동시에 매개변수 문서와 유형 정보를 표시하는 팝업을 사용하도록 설정합니다.
	"editor.parameterHints.enabled": true,

	// 콘텐츠를 다른 방법으로 붙여넣을 수 있는지 여부를 제어합니다.
	"editor.pasteAs.enabled": true,

	// 콘텐츠를 붙여넣을 때 사용할 기본 편집 유형을 구성합니다.
	// 
	// 정렬된 편집 종류의 목록입니다. 기본 설정 종류의 첫 번째 사용 가능한 편집이 사용됩니다.
	"editor.pasteAs.preferences": [],

	// 콘텐츠를 편집기에 붙여넣을 때 위젯을 표시할지 여부를 제어합니다. 이 위젯을 사용하여 파일을 붙여넣는 방법을 제어할 수 있습니다.
	//  - afterPaste: 콘텐츠를 편집기에 붙여넣은 후 붙여넣기 선택기 위젯을 표시합니다.
	//  - never: 붙여넣기 선택기 위젯을 표시하지 않습니다. 대신 기본 붙여넣기 동작이 항상 사용됩니다.
	"editor.pasteAs.showPasteSelector": "afterPaste",

	// 미리 보기 위젯에서 인라인 편집기에 포커스를 둘지 또는 트리에 포커스를 둘지를 제어합니다.
	//  - tree: Peek를 여는 동안 트리에 포커스
	//  - editor: 미리 보기를 열 때 편집기에 포커스
	"editor.peekWidgetDefaultFocus": "tree",

	// 입력하는 동안 제안을 자동으로 표시할지 여부를 제어합니다. 이것은 주석, 문자열 및 기타 코드를 입력하기 위해 제어할 수 있습니다. 빠른 제안은 고스트 텍스트 또는 제안 위젯으로 표시하도록 구성할 수 있습니다. 또한 제안이 특수 문자에 의해 실행되는지 여부를 제어하는 `editor.suggestOnTriggerCharacters`-설정에 유의하세요.
	"editor.quickSuggestions": {
		"other": "on",
		"comments": "off",
		"strings": "off"
	},

	// 빠른 제안을 표시하기 전까지의 지연 시간(밀리초)을 제어합니다.
	"editor.quickSuggestionsDelay": 10,

	// 이름을 바꾸기 전에 변경 내용을 미리 볼 수 있는 기능 사용/사용 안 함
	"editor.rename.enablePreview": true,

	// 사용되지 않습니다. 대신 `editor.linkedEditing`을 사용하세요.
	// 편집기가 유형에 따라 자동으로 이름을 바꿀지 여부를 제어합니다.
	"editor.renameOnType": false,

	// 편집기에서 제어 문자를 렌더링할지를 제어합니다.
	"editor.renderControlCharacters": true,

	// 파일이 줄 바꿈으로 끝나면 마지막 줄 번호를 렌더링합니다.
	"editor.renderFinalNewline": "on",

	// 편집기가 현재 줄 강조 표시를 렌더링하는 방식을 제어합니다.
	//  - none
	//  - gutter
	//  - line
	//  - all: 제본용 여백과 현재 줄을 모두 강조 표시합니다.
	"editor.renderLineHighlight": "line",

	// 편집기에 포커스가 있는 경우에만 편집기에서 현재 줄 강조 표시를 렌더링해야 하는지 제어합니다.
	"editor.renderLineHighlightOnlyWhenFocus": false,

	// '#editor.editContext#' 설정을 사용할 때 서식 있는 화면 읽기 프로그램 콘텐츠를 렌더링할지 여부입니다.
	"editor.renderRichScreenReaderContent": false,

	// 편집기에서 공백 문자를 렌더링할 방법을 제어합니다.
	//  - none
	//  - boundary: 단어 사이의 공백 하나를 제외한 공백 문자를 렌더링합니다.
	//  - selection: 선택한 텍스트에서만 공백 문자를 렌더링합니다.
	//  - trailing: 후행 공백 문자만 렌더링합니다.
	//  - all
	"editor.renderWhitespace": "selection",

	// 선택 항목의 모서리를 둥글게 할지 여부를 제어합니다.
	"editor.roundedSelection": true,

	// 특정 수의 고정 폭 문자 뒤에 세로 눈금자를 렌더링합니다. 여러 눈금자의 경우 여러 값을 사용합니다. 배열이 비어 있는 경우 눈금자가 그려지지 않습니다.
	"editor.rulers": [],

	// 화면 읽기 프로그램에서 인라인 제안을 발표하는지 여부를 제어합니다.
	"editor.screenReaderAnnounceInlineSuggestion": true,

	// 가로 스크롤 막대의 표시 유형을 제어합니다.
	//  - auto: 가로 스크롤 막대는 필요한 경우에만 표시됩니다.
	//  - visible: 가로 스크롤 막대가 항상 표시됩니다.
	//  - hidden: 가로 스크롤 막대를 항상 숨깁니다.
	"editor.scrollbar.horizontal": "auto",

	// 가로 스크롤 막대의 높이입니다.
	"editor.scrollbar.horizontalScrollbarSize": 12,

	// 설정하면 가로 스크롤 막대가 편집기 콘텐츠의 크기를 늘리지 않습니다.
	"editor.scrollbar.ignoreHorizontalScrollbarInContentHeight": false,

	// 클릭이 페이지별로 스크롤되는지 또는 클릭 위치로 이동할지 여부를 제어합니다.
	"editor.scrollbar.scrollByPage": false,

	// 세로 스크롤 막대의 표시 유형을 제어합니다.
	//  - auto: 세로 스크롤 막대는 필요한 경우에만 표시됩니다.
	//  - visible: 세로 스크롤 막대가 항상 표시됩니다.
	//  - hidden: 세로 스크롤 막대를 항상 숨깁니다.
	"editor.scrollbar.vertical": "auto",

	// 세로 스크롤 막대의 너비입니다.
	"editor.scrollbar.verticalScrollbarSize": 14,

	// 편집기에서 가로로 스크롤되는 범위를 벗어나는 추가 문자의 수를 제어합니다.
	"editor.scrollBeyondLastColumn": 4,

	// 편집기에서 마지막 줄 이후로 스크롤할지 여부를 제어합니다.
	"editor.scrollBeyondLastLine": true,

	// 가운데 단추를 누를 때 편집기가 스크롤할지 여부를 제어합니다.
	"editor.scrollOnMiddleClick": false,

	// 세로와 가로로 동시에 스크롤할 때에만 주축을 따라서 스크롤합니다. 트랙패드에서 세로로 스크롤할 때 가로 드리프트를 방지합니다.
	"editor.scrollPredominantAxis": true,

	// 편집기가 선택 항목과 유사한 일치 항목을 강조 표시해야하는지 여부를 제어합니다.
	"editor.selectionHighlight": true,

	// 유사한 일치 항목이 강조 표시가 사라지기 전에 선택 영역에 포함될 수 있는 문자의 개수를 제어합니다. 무제한의 경우 0으로 설정합니다.
	"editor.selectionHighlightMaxLength": 200,

	// 편집기에서 여러 줄에 걸쳐 일치된 선택 항목을 강조 표시할지 여부를 제어합니다.
	"editor.selectionHighlightMultiline": false,

	// semanticHighlighting이 지원하는 언어에 대해 표시되는지 여부를 제어합니다.
	//  - true: 모든 색 테마에 대해 의미 체계 강조 표시를 사용합니다.
	//  - false: 모든 색 테마에 대해 의미 체계 강조 표시를 사용하지 않습니다.
	//  - configuredByTheme: 의미 체계 강조 표시는 현재 색 테마의 `semanticHighlighting` 설정에 따라 구성됩니다.
	"editor.semanticHighlighting.enabled": "configuredByTheme",

	// 현재 선택한 색 테마의 편집기 의미 체계 색과 스타일을 재정의합니다.
	"editor.semanticTokenColorCustomizations": {},

	// 취소선 사용되지 않는 변수를 제어합니다.
	"editor.showDeprecated": true,

	// 여백의 접기 컨트롤이 표시되는 시기를 제어합니다.
	//  - always: 접기 컨트롤을 항상 표시합니다.
	//  - never: 접기 컨트롤을 표시하지 않고 여백 크기를 줄이세요.
	//  - mouseover: 마우스가 여백 위에 있을 때에만 접기 컨트롤을 표시합니다.
	"editor.showFoldingControls": "mouseover",

	// 사용하지 않는 코드의 페이드 아웃을 제어합니다.
	"editor.showUnused": true,

	// 선행 및 후행 공백을 항상 선택해야 하는지 여부입니다.
	"editor.smartSelect.selectLeadingAndTrailingWhitespace": true,

	// 하위 단어(예: 'fooBar'의 'foo' 또는 'foo_bar')를 선택해야 하는지 여부입니다.
	"editor.smartSelect.selectSubwords": true,

	// 편집기에서 애니메이션을 사용하여 스크롤할지 여부를 제어합니다.
	"editor.smoothScrolling": false,

	// 코드 조각으로 둘러싸기 또는 파일 템플릿 코드 조각이 코드 작업으로 표시되는지 여부를 제어합니다.
	"editor.snippets.codeActions.enabled": true,

	// 코드 조각이 다른 추천과 함께 표시되는지 여부 및 정렬 방법을 제어합니다.
	//  - top: 다른 제안 위에 조각 제안을 표시합니다.
	//  - bottom: 다른 제안 아래에 조각 제안을 표시합니다.
	//  - inline: 다른 제안과 함께 조각 제안을 표시합니다.
	//  - none: 코드 조각 제안을 표시하지 않습니다.
	"editor.snippetSuggestions": "inline",

	// 해당 콘텐츠를 두 번 클릭하거나 'Esc' 키를 누르더라도 Peek 편집기를 열린 상태로 유지합니다.
	"editor.stablePeek": false,

	// 고정할 줄을 결정하는 데 사용할 모델을 정의합니다. 개요 모델이 없으면 들여쓰기 모델에 해당하는 접기 공급자 모델에서 대체됩니다. 이 순서는 세 가지 경우 모두 적용됩니다.
	"editor.stickyScroll.defaultModel": "outlineModel",

	// 편집기 위쪽에서 스크롤하는 동안 중첩된 현재 범위를 표시합니다.
	"editor.stickyScroll.enabled": true,

	// 표시할 최대 고정 선 수를 정의합니다.
	"editor.stickyScroll.maxLineCount": 5,

	// 편집기의 가로 스크롤 막대를 사용하여 고정 스크롤 스크롤을 사용하도록 설정합니다.
	"editor.stickyScroll.scrollWithEditor": true,

	// 들여쓰기에 공백을 사용할 때 탭 문자의 선택 동작을 에뮬레이트합니다. 선택 영역이 탭 정지에 고정됩니다.
	"editor.stickyTabStops": false,

	// 이 설정은 더 이상 사용되지 않습니다. 대신 'editor.suggest.showKeywords'또는 'editor.suggest.showSnippets'와 같은 별도의 설정을 사용하세요.
	// 
	"editor.suggest.filteredTypes": {},

	// 제안 필터링 및 정렬에서 작은 오타를 설명하는지 여부를 제어합니다.
	"editor.suggest.filterGraceful": true,

	// 완료를 수락할 때 단어를 덮어쓸지 여부를 제어합니다. 이것은 이 기능을 선택하는 확장에 따라 다릅니다.
	//  - insert: 커서의 텍스트 오른쪽을 덮어 쓰지않고 제안을 삽입합니다.
	//  - replace: 제안을 삽입하고 커서의 오른쪽 텍스트를 덮어씁니다.
	"editor.suggest.insertMode": "insert",

	// 정렬할 때 커서 근처에 표시되는 단어를 우선할지를 제어합니다.
	"editor.suggest.localityBonus": false,

	// IntelliSense 필터링을 활성화하면 첫 번째 문자가 단어 시작 부분과 일치해야 합니다(예: `c`의 경우 `Console` 또는 `WebContext`가 될 수 있으며 `description`은 _안 됨_). 비활성화하면 IntelliSense가 더 많은 결과를 표시하지만 여전히 일치 품질을 기준으로 정렬합니다.
	"editor.suggest.matchOnWordStartOnly": true,

	// 이 설정은 더 이상 사용되지 않습니다. 이제 제안 위젯의 크기를 조정할 수 있습니다.
	// 
	"editor.suggest.maxVisibleSuggestions": 0,

	// 편집기에서 제안 결과를 미리볼지 여부를 제어합니다.
	"editor.suggest.preview": false,

	// 위젯이 표시될 때 제안을 선택할지 여부를 제어합니다. 이는 자동으로 트리거된 제안(`editor.quickSuggestions#` 및 `#editor.suggestOnTriggerCharacters`)에만 적용되며, 제안이 명시적으로 호출될 때 항상 선택됩니다(예: 'Ctrl+Space'를 통해).
	//  - always: IntelliSense를 자동으로 트리거할 때 항상 제안을 선택합니다.
	//  - never: IntelliSense를 자동으로 트리거할 때 제안을 선택하지 마세요.
	//  - whenTriggerCharacter: 트리거 문자에서 IntelliSense를 트리거할 때만 제안을 선택합니다.
	//  - whenQuickSuggestion: 입력할 때 IntelliSense를 트리거할 때만 제안을 선택합니다.
	"editor.suggest.selectionMode": "always",

	// 저장된 제안 사항 선택 항목을 여러 작업 영역 및 창에서 공유할 것인지 여부를 제어합니다(`editor.suggestSelection` 필요).
	"editor.suggest.shareSuggestSelections": false,

	// 사용하도록 설정되면 IntelliSense에 '클래스' 제안이 표시됩니다.
	"editor.suggest.showClasses": true,

	// 사용하도록 설정되면 IntelliSense에 '색' 제안이 표시됩니다.
	"editor.suggest.showColors": true,

	// 사용하도록 설정되면 IntelliSense에 '상수' 제안이 표시됩니다.
	"editor.suggest.showConstants": true,

	// 사용하도록 설정되면 IntelliSense에 '생성자' 제안이 표시됩니다.
	"editor.suggest.showConstructors": true,

	// 사용하도록 설정되면 IntelliSense에 '사용자 지정 색' 제안이 표시됩니다.
	"editor.suggest.showCustomcolors": true,

	// 사용하도록 설정되면 IntelliSense에 '사용되지 않음' 제안이 표시됩니다.
	"editor.suggest.showDeprecated": true,

	// 사용하도록 설정되면 IntelliSense에 `enumMember` 제안이 표시됩니다.
	"editor.suggest.showEnumMembers": true,

	// 사용하도록 설정되면 IntelliSense에 '열거형' 제안이 표시됩니다.
	"editor.suggest.showEnums": true,

	// 사용하도록 설정되면 IntelliSense에 '이벤트' 제안이 표시됩니다.
	"editor.suggest.showEvents": true,

	// 사용하도록 설정되면 IntelliSense에 '필드' 제안이 표시됩니다.
	"editor.suggest.showFields": true,

	// 사용하도록 설정되면 IntelliSense에 `파일` 제안이 표시됩니다.
	"editor.suggest.showFiles": true,

	// 사용하도록 설정되면 IntelliSense에 '폴더' 제안이 표시됩니다.
	"editor.suggest.showFolders": true,

	// 사용하도록 설정되면 IntelliSense에 '함수' 제안이 표시됩니다.
	"editor.suggest.showFunctions": true,

	// 제안의 아이콘을 표시할지 여부를 제어합니다.
	"editor.suggest.showIcons": true,

	// 제안 세부 정보가 레이블과 함께 인라인에 표시되는지 아니면 세부 정보 위젯에만 표시되는지를 제어합니다.
	"editor.suggest.showInlineDetails": true,

	// 사용하도록 설정되면 IntelliSense에 '인터페이스' 제안이 표시됩니다.
	"editor.suggest.showInterfaces": true,

	// IntelliSense를 사용하도록 설정한 경우 `issues`-제안을 표시합니다.
	"editor.suggest.showIssues": true,

	// 사용하도록 설정되면 IntelliSense에 '키워드' 제안이 표시됩니다.
	"editor.suggest.showKeywords": true,

	// 사용하도록 설정되면 IntelliSense에 `메서드` 제안이 표시됩니다.
	"editor.suggest.showMethods": true,

	// 사용하도록 설정되면 IntelliSense에 '모듈' 제안이 표시됩니다.
	"editor.suggest.showModules": true,

	// 사용하도록 설정되면 IntelliSense에 `연산자` 제안이 표시됩니다.
	"editor.suggest.showOperators": true,

	// 사용하도록 설정되면 IntelliSense에 '속성' 제안이 표시됩니다.
	"editor.suggest.showProperties": true,

	// 사용하도록 설정되면 IntelliSense에 '참조' 제안이 표시됩니다.
	"editor.suggest.showReferences": true,

	// 사용하도록 설정되면 IntelliSense에 '코드 조각' 제안이 표시됩니다.
	"editor.suggest.showSnippets": true,

	// 제안 위젯 하단의 상태 표시줄 가시성을 제어합니다.
	"editor.suggest.showStatusBar": false,

	// 사용하도록 설정되면 IntelliSense에 '구조' 제안이 표시됩니다.
	"editor.suggest.showStructs": true,

	// 사용하도록 설정된 경우 IntelliSense에 'typeParameter' 제안이 표시됩니다.
	"editor.suggest.showTypeParameters": true,

	// 사용하도록 설정되면 IntelliSense에 '단위' 제안이 표시됩니다.
	"editor.suggest.showUnits": true,

	// IntelliSense를 사용하도록 설정하면 `user`-제안이 표시됩니다.
	"editor.suggest.showUsers": true,

	// 사용하도록 설정되면 IntelliSense에 '값' 제안이 표시됩니다.
	"editor.suggest.showValues": true,

	// 사용하도록 설정되면 IntelliSense에 '변수' 제안이 표시됩니다.
	"editor.suggest.showVariables": true,

	// 사용하도록 설정되면 IntelliSense에 '텍스트' 제안이 표시됩니다.
	"editor.suggest.showWords": true,

	// 활성 코드 조각이 빠른 제안을 방지하는지 여부를 제어합니다.
	"editor.suggest.snippetsPreventQuickSuggestions": false,

	// 제안 위젯의 글꼴 크기입니다. `0`(으)로 설정하면 `editor.fontSize` 값이 사용됩니다.
	"editor.suggestFontSize": 0,

	// 제안 위젯의 줄 높이입니다. `0`(으)로 설정하면 `editor.lineHeight` 값이 사용됩니다. 최소값은 8입니다.
	"editor.suggestLineHeight": 0,

	// 트리거 문자를 입력할 때 제안을 자동으로 표시할지 여부를 제어합니다.
	"editor.suggestOnTriggerCharacters": true,

	// 제안 목록을 표시할 때 제한이 미리 선택되는 방식을 제어합니다.
	//  - first: 항상 첫 번째 제안을 선택합니다.
	//  - recentlyUsed: `log`가 최근에 완료되었으므로 추가 입력에서 제안을 선택하지 않은 경우 최근 제안을 선택하세요(예: `console.| -> console.log`).
	//  - recentlyUsedByPrefix: 해당 제안을 완료한 이전 접두사에 따라 제안을 선택합니다(예: `co -> console` 및 `con -> const`).
	"editor.suggestSelection": "first",

	// 탭 완성을 사용하도록 설정합니다.
	//  - on: 탭 완료는 탭을 누를 때 가장 일치하는 제안을 삽입합니다.
	//  - off: 탭 완성을 사용하지 않도록 설정합니다.
	//  - onlySnippets: 접두사가 일치하는 경우 코드 조각을 탭 완료합니다. 'quickSuggestions'를 사용하지 않을 때 가장 잘 작동합니다.
	"editor.tabCompletion": "off",

	// 편집기에서 탭을 받을지 또는 탐색을 위해 워크벤치로 미룰지를 제어합니다.
	"editor.tabFocusMode": false,

	// 탭이 같은 공백의 수입니다. 이 설정은 `editor.detectIndentation`이(가) 켜져 있을 때 파일 내용을 기반으로 재정의됩니다.
	"editor.tabSize": 4,

	// 현재 선택한 색 테마의 편집기 구문 색과 글꼴 스타일을 재정의합니다.
	"editor.tokenColorCustomizations": {
		"[*Light*]": {
			"textMateRules": [
				{
					"scope": "ref.matchtext",
					"settings": {
						"foreground": "#000"
					}
				}
			]
		},
		"[*Dark*]": {
			"textMateRules": [
				{
					"scope": "ref.matchtext",
					"settings": {
						"foreground": "#fff"
					}
				}
			]
		}
	},

	// 끝에 자동 삽입된 공백을 제거합니다.
	"editor.trimAutoWhitespace": true,

	// 줄 바꿈을 삭제할 때 편집기에서 다음 줄의 들여쓰기 공백도 삭제할지 여부를 제어합니다.
	"editor.trimWhitespaceOnDelete": false,

	// 접힌 줄이 줄을 펼친 후 빈 콘텐츠를 클릭할지 여부를 제어합니다.
	"editor.unfoldOnClickAfterEndOfLine": false,

	// 강조 표시되지 않는 허용된 문자를 정의합니다.
	"editor.unicodeHighlight.allowedCharacters": {},

	// 허용된 로캘에서 공통적인 유니코드 문자는 강조 표시되지 않습니다.
	"editor.unicodeHighlight.allowedLocales": {
		"_os": true,
		"_vscode": true
	},

	// 현재 사용자 로캘에서 공통되는 문자를 제외한 기본 ASCII 문자와 혼동할 수 있는 문자를 강조 표시할지 여부를 제어합니다.
	"editor.unicodeHighlight.ambiguousCharacters": true,

	// 주석의 문자에도 유니코드 강조 표시를 적용해야 하는지 여부를 제어합니다.
	"editor.unicodeHighlight.includeComments": "inUntrustedWorkspace",

	// 문자열의 문자에도 유니코드 강조 표시를 적용해야 하는지 여부를 제어합니다.
	"editor.unicodeHighlight.includeStrings": true,

	// 공백만 예약하거나 너비가 전혀 없는 문자를 강조 표시할지 여부를 제어합니다.
	"editor.unicodeHighlight.invisibleCharacters": true,

	// 기본이 아닌 모든 ASCII 문자를 강조 표시할지 여부를 제어합니다. U+0020과 U+007E 사이의 문자, 탭, 줄 바꿈 및 캐리지 리턴만 기본 ASCII로 간주됩니다.
	"editor.unicodeHighlight.nonBasicASCII": "inUntrustedWorkspace",

	// 문제를 일으킬 수 있는 비정상적인 줄 종결자를 제거합니다.
	//  - auto: 비정상적인 줄 종결자가 자동으로 제거됩니다.
	//  - off: 비정상적인 줄 종결자가 무시됩니다.
	//  - prompt: 제거할 비정상적인 줄 종결자 프롬프트입니다.
	"editor.unusualLineTerminators": "prompt",

	// 탭 정지에 맞춰 공백과 탭이 삽입되고 삭제됩니다.
	"editor.useTabStops": true,

	// 문서의 단어를 기준으로 완성도를 계산해야 하는지 여부 및 완성도가 계산되는 문서를 기준으로 계산되는지 여부를 제어합니다.
	//  - off: 단어 기반 추천을 끕니다.
	//  - currentDocument: 활성 문서에서만 단어를 제안합니다.
	//  - matchingDocuments: 같은 언어의 모든 열린 문서에서 단어를 제안합니다.
	//  - allDocuments: 모든 열린 문서에서 단어를 제안합니다.
	"editor.wordBasedSuggestions": "matchingDocuments",

	// 중국어/일본어/한국어(CJK) 텍스트에 사용되는 단어 분리 규칙을 제어합니다.
	//  - normal: 기본 줄 바꿈 규칙을 사용합니다.
	//  - keepAll: 단어 분리는 중국어/일본어/한국어(CJK) 텍스트에 사용할 수 없습니다. CJK가 아닌 텍스트 동작은 일반 텍스트 동작과 같습니다.
	"editor.wordBreak": "normal",

	// 단어 관련 탐색 또는 작업을 수행할 때 단어 구분에 사용할 로캘입니다. 인식할 단어의 BCP 47 언어 태그를 지정합니다(예: ja, zh-CN, zh-Hant-TW 등).
	"editor.wordSegmenterLocales": [],

	// 단어 관련 탐색 또는 작업을 수행할 때 단어 구분 기호로 사용할 문자입니다.
	"editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

	// 줄 바꿈 여부를 제어합니다.
	//  - off: 줄이 바뀌지 않습니다.
	//  - on: 뷰포트 너비에서 줄이 바뀝니다.
	//  - wordWrapColumn: `editor.wordWrapColumn`에서 줄이 바뀝니다.
	//  - bounded: 뷰포트의 최소값 및 `editor.wordWrapColumn`에서 줄이 바뀝니다.
	"editor.wordWrap": "off",

	// `editor.wordWrap`이 `wordWrapColumn` 또는 'bounded'인 경우 편집기의 열 줄 바꿈을 제어합니다.
	"editor.wordWrapColumn": 80,

	// '#editor.wordWrap#'을 사용할 때 리터럴 '\n'이 wordWrap을 트리거할지 여부를 제어합니다.
	// 
	// 예:
	// ```c
	// char* str="hello\nworld"
	// ```
	// 은(는) 다음과 같이 표시됩니다.
	// ```c
	// char* str="hello\n
	//            world"
	// ```
	"editor.wrapOnEscapedLineFeeds": false,

	// 줄 바꿈 행의 들여쓰기를 제어합니다.
	//  - none: 들여쓰기가 없습니다. 줄 바꿈 행이 열 1에서 시작됩니다.
	//  - same: 줄 바꿈 행의 들여쓰기가 부모와 동일합니다.
	//  - indent: 줄 바꿈 행이 부모 쪽으로 +1만큼 들여쓰기됩니다.
	//  - deepIndent: 줄 바꿈 행이 부모 쪽으로 +2만큼 들여쓰기됩니다.
	"editor.wrappingIndent": "same",

	// 래핑 지점을 계산하는 알고리즘을 제어합니다. 접근성 모드에서는 최상의 환경을 위해 고급 기능이 사용됩니다.
	//  - simple: 모든 문자가 동일한 너비라고 가정합니다. 이 알고리즘은 고정 폭 글꼴과 문자 모양의 너비가 같은 특정 스크립트(예: 라틴 문자)에 적절히 작동하는 빠른 알고리즘입니다.
	//  - advanced: 래핑 점 계산을 브라우저에 위임합니다. 이 알고리즘은 매우 느려서 대용량 파일의 경우 중단될 수 있지만 모든 경우에 적절히 작동합니다.
	"editor.wrappingStrategy": "simple",

	// 인라인 채팅에서 변경 내용에 대해 액세스 가능한 차이 뷰어도 렌더링하는지 여부입니다.
	//  - auto: 액세스 가능한 차이 뷰어는 사용 중인 화면 읽기 프로그램 모드를 기반으로 합니다.
	//  - on: 액세스 가능한 diff 뷰어는 항상 사용하도록 설정됩니다.
	//  - off: 액세스 가능한 diff 뷰어는 사용하도록 설정되지 않습니다.
	"inlineChat.accessibleDiffView": "auto",

	// 인라인 채팅의 다음 버전을 사용할지 여부입니다.
	"inlineChat.enableV2": false,

	// 변경된 지역 외부에서 입력할 때 인라인 채팅 세션을 완료할지 여부입니다.
	"inlineChat.finishOnType": false,

	// 요청 후 인라인 채팅 위젯을 숨길지 여부입니다. 활성화하면 요청이 이루어진 후 위젯이 숨겨지고 대신 채팅 오버레이가 표시됩니다. 위젯을 숨기면 인라인 채팅 키 바인딩 또는 채팅 오버레이 위젯에서 언제든지 다시 표시할 수 있습니다. *참고* 이 설정을 사용하려면 '#inlineChat.enableV2#'을 활성화해야 합니다.
	"inlineChat.hideOnRequest": false,

	// 인라인 채팅 키 바인딩을 보유하면 음성 인식이 자동으로 활성화되는지 여부입니다.
	"inlineChat.holdToSpeech": true,

	// 빈 줄에 인라인 채팅을 사용하여 코드를 생성하는 힌트가 표시되는지 여부입니다.
	"inlineChat.lineEmptyHint": false,

	// 자연어 또는 의사 코드가 사용하는 줄에 인라인 채팅을 계속하기 위한 힌트를 표시할지 여부입니다. instance 경우 '이름과 취미가 있는 수업 사람'은 채팅을 계속하기 위한 힌트를 표시합니다.
	"inlineChat.lineNaturalLanguageHint": true,

	// 전자 필기장의 인라인 채팅 위젯에 에이전트와 유사한 동작을 활성화합니다. 사용 중인 '#inlineChat.enableV2#' 설정에 따라 달라집니다.
	"inlineChat.notebookAgent": false,

	// 저장할 때 전자 필기장에 대해 일련의 코드 작업을 실행합니다. 코드 작업을 지정해야 하며 편집기를 종료하면 안 됩니다. `files.autoSave`이(가) 'afterDelay'로 설정된 경우 코드 작업은 파일이 명시적으로 저장될 때만 실행됩니다. 예: `"notebook.source.organizeImports": "explicit"`
	"notebook.codeActionsOnSave": {},

	// 사용자 확인 없이 허용할 UNC 호스트 이름 집합('192.168.0.1' 또는 'my-server'와 같이 백슬래시 앞이나 뒤에 붙지 않음)입니다. 이 설정을 통해 허용되지 않거나 사용자 확인을 통해 승인되지 않은 UNC 호스트에 액세스하는 경우 오류가 발생하며 작업이 중지됩니다. 이 설정을 변경하려면 다시 시작해야 합니다. https://aka.ms/vscode-windows-unc에서 이 설정에 대해 자세히 알아보세요.
	"security.allowedUNCHosts": [],

	// 사용하도록 설정하면 로컬 파일 또는 작업 영역이 프로토콜 처리기를 통해 열려고 할 때마다 대화 상자에서 확인을 요청합니다.
	"security.promptForLocalFileProtocolHandling": true,

	// 사용하도록 설정하면 원격 파일 또는 작업 영역이 프로토콜 처리기를 통해 열려고 할 때마다 대화 상자에서 확인을 요청합니다.
	"security.promptForRemoteFileProtocolHandling": true,

	// 활성화된 경우 `security.allowedUNCHosts` 설정 또는 사용자 확인 후에 허용된 UNC 호스트 이름에 대한 액세스만 허용합니다. https://aka.ms/vscode-windows-unc에서 이 설정에 대해 자세히 알아보세요.
	"security.restrictUNCAccess": true,

	// 제한된 모드 배너가 표시되는 시기를 제어합니다.
	//  - always: 신뢰할 수 없는 작업 영역이 열릴 때마다 배너를 표시합니다.
	//  - untilDismissed: 해제될 때까지 신뢰할 수 없는 작업 영역을 열 때 배너를 표시합니다.
	//  - never: 신뢰할 수 없는 작업 영역이 열려 있는 경우 배너를 표시하지 않습니다.
	"security.workspace.trust.banner": "untilDismissed",

	// 빈 창이 기본적으로 VS Code 내에서 신뢰할 수 있는지 여부를 제어합니다. '#security.workspace.trust.untrustedFiles#’와(과) 함께 사용하는 경우 빈 창에서 메시지를 표시하지 않고 VS Code 전체 기능을 사용하도록 설정할 수 있습니다.
	"security.workspace.trust.emptyWindow": true,

	// VS Code 내에서 작업 영역 신뢰를 사용할지를 제어합니다.
	"security.workspace.trust.enabled": true,

	// 작업 영역을 신뢰하라는 시작 프롬프트가 표시되는 시기를 제어합니다.
	//  - always: 신뢰할 수 없는 작업 영역이 열릴 때마다 신뢰를 요청합니다.
	//  - once: 신뢰할 수 없는 작업 영역을 처음 열 때 신뢰를 요청합니다.
	//  - never: 신뢰할 수 없는 작업 영역이 열릴 때 신뢰를 요청하지 마세요.
	"security.workspace.trust.startupPrompt": "once",

	// 신뢰할 수 있는 작업 영역에서 신뢰할 수 없는 파일 열기를 처리하는 방법을 제어합니다. 이 설정은`security.workspace.trust.emptyWindow`을 통해 신뢰할 수 있는 빈 창에서 파일을 여는 작업에도 적용됩니다.
	//  - prompt: 각 작업 영역에 대해 신뢰할 수 없는 파일을 처리하는 방법을 묻습니다. 신뢰할 수 없는 파일이 신뢰할 수 있는 작업 영역에 도입되면 다시 메시지가 표시되지 않습니다.
	//  - open: 항상 신뢰할 수 없는 파일을 프롬프트 없이 신뢰할 수 있는 작업 영역에 도입할 수 있도록 허용합니다.
	//  - newWindow: 항상 메시지를 표시하지 않고 제한된 모드에서 별도의 창에서 신뢰할 수 없는 파일을 엽니다.
	"security.workspace.trust.untrustedFiles": "prompt",

	// 포커스가 없는 편집기와 터미널을 흐리게 처리하여 입력한 입력이 어디로 이동하는지 더 명확하게 표시할지 여부입니다. 이 기능은 노트북이나 확장 웹뷰 편집기처럼 iframe을 사용하는 편집기를 제외한 대부분의 편집기에서 작동합니다.
	"accessibility.dimUnfocused.enabled": false,

	// 포커스가 없는 편집기와 터미널에 사용할 불투명도 비율(0.2~1.0)입니다. 이는 `accessibility.dimUnfocused.enabled`이(가) 활성화된 경우에만 적용됩니다.
	"accessibility.dimUnfocused.opacity": 0.75,

	// 액세스 가능 보기를 숨길지 여부를 제어합니다.
	"accessibility.hideAccessibleView": false,

	// 편집기 탭의 높이를 제어합니다. `workbench.editor.showTabs`(이)가 `multiple`(으)로 설정되지 않은 경우에도 제목 컨트롤 표시줄에 적용됩니다.
	"window.density.editorTabHeight": "default",

	// Workbench에서 작업 표시줄 아이콘을 클릭하는 동작을 제어합니다. 이 값은 `workbench.activityBar.location`(이)가 `default`(으)로 설정되지 않은 경우 무시됩니다.
	//  - toggle: 클릭한 항목이 이미 표시된 경우 기본 사이드바를 숨깁니다.
	//  - focus: 클릭한 항목이 이미 표시된 경우 기본 사이드바에 초점을 맞춥니다.
	"workbench.activityBar.iconClickBehavior": "toggle",

	// 기본 및 보조 사이드바를 기준으로 작업 표시줄의 위치를 제어합니다.
	//  - default: 기본 사이드바의 측면과 보조 사이드바 위에 작업 막대를 표시합니다.
	//  - top: 기본 및 보조 사이드바 위에 작업 막대를 표시합니다.
	//  - bottom: 기본 및 보조 사이드바 아래쪽에 작업 막대를 표시합니다.
	//  - hidden: 기본 및 보조 사이드바에서 작업 표시줄을 숨깁니다.
	"workbench.activityBar.location": "default",

	// 현재 작업 영역에 대해 클라우드에 저장된 사용 가능한 작업 변경 내용을 자동으로 계속할지 여부를 제어합니다.
	//  - onReload: 창을 다시 로드할 때 클라우드에서 사용 가능한 작업 변경 내용을 자동으로 계속합니다.
	//  - off: 클라우드에서 작업 변경 내용을 계속하려고 시도하지 마세요.
	"workbench.cloudChanges.autoResume": "onReload",

	// 계속 작업을 사용할 때 사용자에게 작업 변경 내용을 클라우드에 저장하라는 메시지를 표시할지 여부를 제어합니다.
	//  - prompt: 계속 작업을 사용하여 클라우드에 작업 변경 내용을 저장하기 위해 로그인하라는 메시지를 사용자에게 표시합니다.
	//  - off: 사용자가 클라우드 변경 내용을 이미 설정한 경우를 제외하고는 작업 변경을 클라우드에 저장하지 마세요.
	"workbench.cloudChanges.continueOn": "prompt",

	// 현재 선택한 색 테마에서 색을 재정의합니다.
	"workbench.colorCustomizations": {},

	// `window.autoDetectColorScheme`이(가) 활성화되지 않으면 워크벤치에서 사용되는 색 테마로 지정합니다.
	"workbench.colorTheme": "Default Dark Modern",

	// 명령 팔레트에서 채팅 질문을 해야 하는 위치를 제어합니다.
	//  - chatView: 채팅 보기에서 채팅 질문을 하세요.
	//  - quickChat: 빠른 채팅에서 채팅 질문을 하세요.
	"workbench.commandPalette.experimental.askChatLocation": "chatView",

	// 명령 팔레트에 유사한 명령을 포함할지 여부를 제어합니다. 자연어 지원을 제공하는 확장이 설치되어 있어야 합니다.
	"workbench.commandPalette.experimental.enableNaturalLanguageSearch": true,

	// 명령 팔레트에 일반적으로 사용되는 명령 목록이 있어야 하는지 여부를 제어합니다.
	"workbench.commandPalette.experimental.suggestCommands": false,

	// 명령 팔레트 기록을 유지하기 위해 최근 사용한 명령 개수를 제어합니다. 0으로 설정하면 명령 기록을 사용하지 않습니다.
	"workbench.commandPalette.history": 50,

	// 다음에 열 때 마지막으로 명령 팔레트에 입력한 내용을 복원할지 여부를 제어합니다.
	"workbench.commandPalette.preserveInput": false,

	// 편집기 그룹이 활성 상태가 아닌 경우에도 편집기 작업을 항상 표시할지를 제어합니다.
	"workbench.editor.alwaysShowEditorActions": false,

	// 나열된 형식 중 하나와 일치하는 편집기가 편집기 그룹에서 첫 번째로 열리고 둘 이상의 그룹이 열려 있으면, 그룹이 자동으로 잠깁니다. 잠긴 그룹은 사용자 제스처(예: 끌어서 놓기)에 의해 명시적으로 선택된 경우에만 편집기를 여는 데 사용되며 기본적으로는 사용되지 않습니다. 따라서 잠긴 그룹의 활성 편집기는 실수로 다른 편집기로 바뀔 가능성이 적습니다.
	"workbench.editor.autoLockGroups": {
		"default": false,
		"sqlite-viewer.option": false,
		"workbench.editor.chatSession": true,
		"workbench.editorinputs.searchEditorInput": false,
		"workbench.editor.processExplorer": true,
		"notebookOutputEditor": false,
		"jupyter-notebook": false,
		"repl": false,
		"workbench.editors.gettingStartedInput": false,
		"terminalEditor": true,
		"markdownEditor.customEditor": false,
		"imagePreview.previewEditor": false,
		"vscode.audioPreview": false,
		"vscode.videoPreview": false,
		"jsProfileVisualizer.cpuprofile.table": false,
		"jsProfileVisualizer.heapprofile.table": false,
		"jsProfileVisualizer.heapsnapshot.table": false,
		"bito.diffView": false,
		"gitlens.rebase": false,
		"sqlite-viewer.view": false,
		"decompiled.javaClass": false,
		"markdown-preview-enhanced": false,
		"migrate.java.formulaEditor": false,
		"java.formatterSettingsEditor": false,
		"workbench.input.interactive": false,
		"mainThreadWebview-markdown.preview": false,
		"mainThreadWebview-simpleBrowser.view": true,
		"mainThreadWebview-browserPreview": true
	},

	// 가운데 맞춤 레이아웃에서 둘 이상의 그룹을 열 때 최대 너비에 맞게 자동으로 크기를 조정할지 여부를 제어합니다. 하나의 그룹만 열면 원래 가운데 맞춤 너비로 되돌아옵니다.
	"workbench.editor.centeredLayoutAutoResize": true,

	// 창 크기가 조정될 때 가운데 맞춤 레이아웃이 상수 너비를 유지하려고 하는지 여부를 제어합니다.
	"workbench.editor.centeredLayoutFixedWidth": false,

	// 그룹의 마지막 탭을 닫을 때 빈 편집기 그룹의 동작을 제어합니다. 사용하도록 설정하면 그룹이 자동으로 닫히고 사용하지 않도록 설정하면 빈 그룹이 그리드의 일부로 남습니다.
	"workbench.editor.closeEmptyGroups": true,

	// 세션 동안 열린 파일을 표시하는 편집기가 다른 프로세스에서 삭제하거나 이름을 바꾸는 경우 자동으로 닫혀야 하는지 여부를 제어합니다. 이 기능을 사용하지 않으면 해당 이벤트에서 편집기가 계속 열려 있습니다. 애플리케이션 내에서 삭제하는 경우 항상 편집기를 닫으며 저장되지 않은 변경 내용이 있는 편집기는 데이터가 보존되도록 닫히지 않습니다.
	"workbench.editor.closeOnFileDelete": false,

	// 사용자 지정 워크벤치 편집기 레이블을 적용할지 여부를 제어합니다.
	"workbench.editor.customLabels.enabled": true,

	// 편집기 레이블의 렌더링을 제어합니다. 각 __Item__은 파일 경로와 일치하는 패턴입니다. 상대 및 절대 파일 경로가 모두 지원됩니다. 상대 경로에는 WORKSPACE_FOLDER가 포함되어야 합니다(예: `WORKSPACE_FOLDER/src/**.tsx` or `*/src/**.tsx`). 절대 패턴은 `/`로 시작해야 합니다. 여러 패턴이 일치하는 경우 최대 길이 일치 경로가 선택됩니다. 각 __Value__는 __Item__이 일치할 때 렌더링된 편집기의 템플릿입니다. 변수는 컨텍스트에 따라 대체됩니다.
	// - `${dirname}`: 파일이 있는 폴더의 이름입니다(예: `WORKSPACE_FOLDER/folder/file.txt -> folder`).
	// - `${dirname(N)}`: 파일이 있는 n번째 상위 폴더의 이름입니다(예: `N=2: WORKSPACE_FOLDER/static/folder/file.txt -> WORKSPACE_FOLDER`). 음수를 사용하여 경로의 시작 부분에서 폴더를 선택할 수 있습니다(예: `N=-1: WORKSPACE_FOLDER/folder/file.txt -> WORKSPACE_FOLDER`). __Item__이 절대 패턴 경로인 경우 첫 번째 폴더(`N=-1`)는 절대 경로의 첫 번째 폴더를 가리키고, 그렇지 않으면 작업 영역 폴더에 해당합니다.
	// - `${filename}`: 파일 확장명을 제외한 파일의 이름입니다(예: `WORKSPACE_FOLDER/folder/file.txt -> file`).
	// - `${extname}`: 파일 확장명입니다(예: `WORKSPACE_FOLDER/folder/file.txt -> txt`).
	// - '${extname(N)}': '.'로 구분된 파일의 n번째 확장명입니다(예: 'N=2: WORKSPACE_FOLDER/folder/file.ext1.ext2.ext3 -> ext1'). 음수를 사용하여 확장명의 시작 부분에서 확장명을 선택할 수 있습니다(예: `N=-1: WORKSPACE_FOLDER/folder/file.ext1.ext2.ext3 -> ext2`).
	// 
	// 예: `"**/static/**/*.html": "${filename} - ${dirname} (${extname})"`은 `WORKSPACE_FOLDER/static/folder/file.html` 파일을 `file - folder (html)`로 렌더링합니다.
	"workbench.editor.customLabels.patterns": {},

	// 편집기 파일 장식에 배지를 사용할지 여부를 제어합니다.
	"workbench.editor.decorations.badges": true,

	// 편집기 파일 장식에 색을 사용할지 여부를 제어합니다.
	"workbench.editor.decorations.colors": true,

	// 이진 파일로 검색된 파일의 기본 편집기입니다. 정의되지 않은 경우 사용자에게 선택기가 표시됩니다.
	"workbench.editor.defaultBinaryEditor": "",

	// 탭을 두 번 클릭할 때 편집기 그룹의 크기를 조정하는 방법을 제어합니다. 이 값은 `workbench.editor.showTabs`(이)가 `multiple`(으)로 설정되지 않은 경우 무시됩니다.
	//  - maximize: 다른 모든 편집기 그룹은 숨겨지고 현재 편집기 그룹은 전체 편집기 영역을 차지하도록 최대화됩니다.
	//  - expand: 편집기 그룹은 다른 모든 편집기 그룹을 가능한 한 작게 만들어 최대한 많은 공간을 차지합니다.
	//  - off: 탭을 두 번 클릭하면 편집기 그룹의 크기가 조정되지 않습니다.
	"workbench.editor.doubleClickTabToToggleEditorGroupSizes": "expand",

	// 편집기를 창 밖으로 끌어서 새 창에서 열 수 있는지를 제어합니다. 이를 동적으로 전환하려면 끄는 동안 `Alt` 키를 길게 누르세요.
	"workbench.editor.dragToOpenWindow": true,

	// 편집기 작업이 표시되는 위치를 제어합니다.
	//  - default: `workbench.editor.showTabs`(이)가 `none`(으)로 설정된 경우 창 제목 표시줄에 편집기 작업을 표시합니다. 그렇지 않으면 편집기 탭 표시줄에 편집기 작업이 표시됩니다.
	//  - titleBar: 창 제목 표시줄에 편집기 작업을 표시합니다. `window.customTitleBarVisibility`(이)가 `never`(으)로 설정되면 편집기 작업이 숨겨집니다.
	//  - hidden: 편집기 작업이 표시되지 않습니다.
	"workbench.editor.editorActionsLocation": "default",

	// 비어 있는 편집기 텍스트 힌트가 편집기에 표시되어야 하는지 여부를 제어합니다.
	"workbench.editor.empty.hint": "text",

	// 편집기를 열 때 미리보기 모드를 사용할지 여부를 제어합니다. 편집기 그룹당 최대 하나의 미리 보기 모드 편집기가 있습니다. 이 편집기는 탭 또는 제목 레이블과 편집기 열기 보기에서 파일 이름을 기울임꼴로 표시합니다. 해당 콘텐츠는 미리보기 모드에서 열린 다음 편집기로 대체됩니다. 미리보기 모드 편집기에서 변경하면 레이블을 두 번 클릭하거나 레이블 컨텍스트 메뉴의 '열린 상태 유지' 옵션과 마찬가지로 변경 내용이 유지됩니다. 탐색기에서 파일을 두 번 클릭하여 열면 편집기가 즉시 유지됩니다.
	"workbench.editor.enablePreview": true,

	// 편집기에서 코드 탐색을 시작하는 경우 편집기가 미리 보기에 남아 있을지를 제어합니다. 미리 보기 편집기는 열린 상태로 유지되지 않으며 명시적으로 열린 상태로 유지되도록 설정할 때까지(더블 클릭 또는 편집을 통해) 재사용됩니다. 이 값은 `workbench.editor.showTabs`(이)가 `multiple`(으)로 설정되지 않은 경우 무시됩니다.
	"workbench.editor.enablePreviewFromCodeNavigation": false,

	// Quick Open에서 연 편집기를 미리 보기 편집기로 표시할지를 제어합니다. 미리 보기 편집기는 열린 상태로 유지되지 않으며 명시적으로 열린 상태로 유지되도록 설정할 때까지(더블 클릭 또는 편집을 통해) 재사용됩니다. 활성화된 경우 선택하기 전에 Ctrl 키를 눌러 편집기를 미리 보기가 아닌 상태로 엽니다. 이 값은 `workbench.editor.showTabs`(이)가 `multiple`(으)로 설정되지 않은 경우 무시됩니다.
	"workbench.editor.enablePreviewFromQuickOpen": false,

	// 편집기를 최근에 사용한 순서대로 닫을 것인지 왼쪽에서 오른쪽으로 닫을 것인지를 제어합니다.
	"workbench.editor.focusRecentEditorAfterClose": true,

	// 저장하지 않은 변경 내용이 있는 편집기의 탭에 위쪽 테두리를 그릴지 여부를 제어합니다. 이 값은 `workbench.editor.showTabs`(이)가 multiple(으)로 설정되지 않은 경우 무시됩니다.
	"workbench.editor.highlightModifiedTabs": false,

	// 언어 감지에서 편집기 기록을 사용할 수 있습니다. 이것은 자동 언어 감지가 최근에 열린 언어를 선호하게 하고 자동 언어 감지가 더 작은 입력으로 작동하도록 합니다.
	"workbench.editor.historyBasedLanguageDetection": true,

	// 편집기 레이블의 형식을 제어합니다.
	//  - default: 파일 이름을 표시합니다. 탭이 사용하도록 설정되어 있고 하나의 그룹에서 파일 2개의 이름이 동일하면, 각 파일 경로의 고유한 섹션이 추가됩니다. 탭이 사용하도록 설정되어 있지 않으면, 작업 영역 폴더에 대한 경로는 편집기가 활성 상태일 때 표시됩니다.
	//  - short: 파일 이름과 파일의 디렉터리 이름을 차례로 표시합니다.
	//  - medium: 파일 이름과 작업 영역 폴더에 상대적인 파일 경로를 차례로 표시합니다.
	//  - long: 파일 이름과 절대 경로를 차례로 표시합니다.
	"workbench.editor.labelFormat": "default",

	// 설정에서 언어를 명확히 설정하지 않은 경우, 텍스트 편집기의 언어가 자동으로 감지할 지를 설정합니다. 또한 이 기능은 언어별로 범위를 지정할 수 있으므로 이 기능을 끄고 싶지 않은 언어들을 지정할 수도 있습니다. 이 기능은 다른 프로그래밍 언어를 포함하는 Markdown과 같은 언어에 유용합니다. Markdown이 아닌 임베디드 언어라고 인식하게 해 언어 감지를 피하게 할 수 있게 합니다.
	"workbench.editor.languageDetection": true,

	// 사용하도록 설정하면 편집기 언어가 감지된 콘텐츠 언어와 일치하지 않을 때 상태 표시줄 빠른 수정을 표시합니다.
	"workbench.editor.languageDetectionHints": {
		"untitledEditors": true,
		"notebookEditors": true
	},

	// 열린 편집기의 수를 제한할지 여부를 제어합니다. 사용하도록 설정하면 편집기를 새로 열기 위한 공간을 만들기 위해 가장 오래 전에 사용한 편집기가 닫힙니다.
	"workbench.editor.limit.enabled": false,

	// 열려 있는 최대 편집기 수가 구성된 한도를 계산하기 위해 더티 편집기를 제외해야 하는지를 제어합니다.
	"workbench.editor.limit.excludeDirty": false,

	// 열린 편집기의 최대 수 제한을 편집기 그룹별로 적용할지 또는 모든 편집기 그룹에 적용할지를 제어합니다.
	"workbench.editor.limit.perEditorGroup": false,

	// 열려 있는 편집기의 최대 수를 제어합니다. `workbench.editor.limit.perEditorGroup` 설정을 사용하여 편집기 그룹 또는 모든 그룹에서 이 제한을 제어합니다.
	"workbench.editor.limit.value": 10,

	// '돌아가기' 및 '앞으로 이동' 명령에 마우스 단추 4와 5를 사용할 수 있습니다.
	"workbench.editor.mouseBackForwardToNavigate": true,

	// '돌아가기' 및 '앞으로 이동'과 같은 명령에 대해 편집기에서 기록 탐색 범위를 제어합니다.
	//  - default: 열려 있는 모든 편집기 및 편집기 그룹을 탐색합니다.
	//  - editorGroup: 활성 편집기 그룹의 편집기에서만 탐색합니다.
	//  - editor: 활성 편집기에서만 탐색합니다.
	"workbench.editor.navigationScope": "default",

	// 편집기가 열리는 위치를 제어합니다. `left` 또는 `right`(을)를 선택하여 현재 활성화된 편집기의 왼쪽 또는 오른쪽에 있는 편집기를 엽니다. `first` 또는 `last`(을)를 선택하여 현재 활성화된 편집기에서 독립적으로 편집기를 엽니다.
	"workbench.editor.openPositioning": "right",

	// 탐색기 등에서 나란히 열리는 편집기의 기본 방향을 제어합니다. 기본적으로 편집기는 현재 활성 편집기 오른쪽에 열립니다. 'down'으로 변경하는 경우 편집기가 현재 활성 편집기 아래에 열립니다. 이는 편집기 도구 모음의 분할 편집기 작업에도 영향을 줍니다.
	"workbench.editor.openSideBySideDirection": "right",

	// 고정된 편집기 탭의 크기를 제어합니다. 고정된 탭은 열려 있는 모든 탭의 시작 부분으로 정렬되며 일반적으로 고정 해제될 때까지 닫지 않습니다. 이 값은 `workbench.editor.showTabs`(이)가 `multiple`(으)로 설정되지 않은 경우 무시됩니다.
	//  - normal: 고정된 탭이 고정되지 않은 탭의 모양을 상속합니다.
	//  - compact: 고정된 탭이 아이콘 또는 편집기 이름의 첫 문자만 있는 컴팩트 형식으로 표시됩니다.
	//  - shrink: 고정된 탭이 편집기 이름의 일부를 표시하는 컴팩트 고정 크기로 축소됩니다.
	"workbench.editor.pinnedTabSizing": "normal",

	// 사용하도록 설정하면 다른 모든 탭 위에 있는 별도의 행에 고정된 탭이 표시됩니다. 이 값은 `workbench.editor.showTabs`(이)가 `multiple`(으)로 설정되지 않은 경우 무시됩니다.
	"workbench.editor.pinnedTabsOnSeparateRow": false,

	// 활성화되면 편집기 기록을 고려하는 언어 감지 모델에 더 높은 우선 순위가 부여됩니다.
	"workbench.editor.preferHistoryBasedLanguageDetection": false,

	// 키보드 또는 마우스 가운데 클릭을 사용하여 닫을 때 고정된 편집기를 닫을지 여부를 제어합니다.
	//  - keyboardAndMouse: 마우스 가운데 클릭 또는 키보드를 사용할 때 항상 고정된 편집기를 닫지 않도록 합니다.
	//  - keyboard: 키보드를 사용할 때 고정된 편집기를 닫지 않습니다.
	//  - mouse: 마우스 가운데 클릭을 사용할 때 고정된 편집기를 닫지 않습니다.
	//  - never: 고정된 편집기를 절대 닫지 않습니다.
	"workbench.editor.preventPinnedEditorClose": "keyboardAndMouse",

	// 편집기를 닫은 후 다시 열 때 마지막 편집기 보기 상태(예: 스크롤 위치)를 복원합니다. 편집기 보기 상태는 편집기 그룹별로 저장되며 그룹이 닫힐 때 삭제됩니다. 편집기 그룹에 대해 이전 보기 상태가 발견되지 않은 경우 모든 편집기 그룹에서 마지막으로 알려진 보기 상태를 사용하려면 `workbench.editor.sharedViewState` 설정을 사용하세요.
	"workbench.editor.restoreViewState": true,

	// 편집기를 여는 경우 보이는 그룹 중 하나에 표시할지를 제어합니다. 사용하지 않도록 설정하면 편집기가 기본적으로 현재 활성 편집기 그룹에 열립니다. 사용하도록 설정하면 현재 활성 편집기 그룹에서 편집기가 다시 열리지 않고 이미 열린 편집기가 표시됩니다. 강제로 편집기가 특정 그룹에서 열리거나 현재 활성 그룹 옆에 열리도록 하는 등의 일부 경우에는 이 설정이 무시됩니다.
	"workbench.editor.revealIfOpen": false,

	// 탭 위로 스크롤하여 열지 여부를 제어합니다. 기본적으로 탭은 스크롤할 때만 표시되지만 열리지는 않습니다. 스크롤하는 동안 Shift 키를 길게 눌러 해당 기간 동안 이 동작을 변경할 수 있습니다. 이 값은 `workbench.editor.showTabs`(이)가 `multiple`(으)로 설정되지 않은 경우 무시됩니다.
	"workbench.editor.scrollToSwitchTabs": false,

	// 모든 편집기 그룹에서 가장 최근의 편집기 보기 상태(예: 스크롤 위치)를 보존하고 편집기 그룹에 대한 특정 편집기 보기 상태가 없는 경우 복원합니다.
	"workbench.editor.sharedViewState": false,

	// 열린 편집기를 아이콘과 함께 표시할지 여부를 제어합니다. 이를 위해서는 파일 아이콘 테마도 사용하도록 설정해야 합니다.
	"workbench.editor.showIcons": true,

	// 사용하도록 설정하면 탭 인덱스가 표시됩니다. 이 값은 `workbench.editor.showTabs`(이)가 `multiple`(으)로 설정되지 않은 경우 무시됩니다.
	"workbench.editor.showTabIndex": false,

	// 열린 편집기가 개별 탭으로 표시되어야 하는지, 하나의 큰 탭으로 표시할지 또는 제목 영역을 표시하지 않아야 하는지를 제어합니다.
	//  - multiple: 각 편집기는 편집기 제목 영역에 탭으로 표시됩니다.
	//  - single: 활성 편집기는 편집기 제목 영역에 하나의 큰 탭으로 표시됩니다.
	//  - none: 편집기 제목 영역이 표시되지 않습니다.
	"workbench.editor.showTabs": "multiple",

	// 편집기가 편집기 그룹에서 세로 또는 가로로 분할될 때의 레이아웃을 제어합니다.
	//  - vertical: 편집기는 위에서 아래로 배치됩니다.
	//  - horizontal: 편집기는 왼쪽에서 오른쪽으로 배치됩니다.
	"workbench.editor.splitInGroupLayout": "horizontal",

	// 편집기 영역의 가장자리에 편집기 또는 파일을 놓아 편집기 그룹을 끌어서 놓기 작업에서 분할할 수 있는지 여부를 제어합니다.
	"workbench.editor.splitOnDragAndDrop": true,

	// 편집기 그룹 분할 시 편집기 그룹 크기를 제어합니다.
	//  - auto: 모든 편집기 그룹이 이미 동일한 부분에 있지 않는 한 활성 편집기 그룹을 동일한 부분으로 분할합니다. 이 경우 모든 편집기 그룹을 동일한 부분으로 분할합니다.
	//  - distribute: 모든 편집기 그룹을 동일한 부분으로 분할합니다.
	//  - split: 활성 편집기 그룹을 동일한 부분으로 분할합니다.
	"workbench.editor.splitSizing": "auto",

	// 탭 닫기 실행 단추의 표시 여부를 제어합니다.
	"workbench.editor.tabActionCloseVisibility": true,

	// 편집기 탭 실행 단추(닫기, 고정 해제)의 위치를 제어합니다. 이 값은 `workbench.editor.showTabs`(이)가 `multiple`(으)로 설정되지 않은 경우 무시됩니다.
	"workbench.editor.tabActionLocation": "right",

	// 탭 고정 해제 실행 단추의 표시 여부를 제어합니다.
	"workbench.editor.tabActionUnpinVisibility": true,

	// 편집기 탭의 크기를 제어합니다. 이 값은 `workbench.editor.showTabs`(이)가 `multiple`(으)로 설정되지 않은 경우 무시됩니다.
	//  - fit: 항상 전체 편집기 레이블을 표시할 만큼 큰 탭을 유지합니다.
	//  - shrink: 한 번에 모든 탭을 표시할 만큼 사용 가능한 공간이 없는 경우 탭을 작게 만들 수 있습니다.
	//  - fixed: 모든 탭을 같은 크기로 만듭니다. 사용 가능한 공간이 부족하여 모든 탭을 한 번에 표시할 수 없을 때는 탭의 크기를 작게 조정할 수 있습니다.
	"workbench.editor.tabSizing": "fit",

	// `workbench.editor.tabSizing`이(가) `fixed`(으)로 설정된 경우 탭의 최대 너비를 제어합니다.
	"workbench.editor.tabSizingFixedMaxWidth": 160,

	// `workbench.editor.tabSizing`이(가) `fixed`(으)로 설정된 경우 탭의 최소 너비를 제어합니다.
	"workbench.editor.tabSizingFixedMinWidth": 50,

	// 편집기 제목 영역에서 탭 및 이동 경로에 사용되는 스크롤 막대의 높이를 제어합니다.
	//  - default: 기본 크기.
	//  - large: 마우스로 더 쉽게 잡을 수 있도록 크기를 늘립니다.
	"workbench.editor.titleScrollbarSizing": "default",

	// 편집기 제목 영역에서 탭 및 이동 경로에 사용되는 스크롤 막대의 표시 유형을 제어합니다.
	//  - auto: 가로 스크롤 막대는 필요한 경우에만 표시됩니다.
	//  - visible: 가로 스크롤 막대가 항상 표시됩니다.
	//  - hidden: 가로 스크롤 막대를 항상 숨깁니다.
	"workbench.editor.titleScrollbarVisibility": "auto",

	// 제목 없는 편집기의 레이블 형식을 제어합니다.
	//  - content: 제목 없는 파일의 이름은 연결된 파일 경로가 없는 경우 첫 번째 줄의 콘텐츠에서 파생됩니다. 줄이 비어 있거나 단어 문자가 없는 경우 해당 이름으로 대체됩니다.
	//  - name: 제목 없는 파일의 이름은 파일 콘텐츠에서 파생되지 않습니다.
	"workbench.editor.untitled.labelFormat": "content",

	// 사용 가능한 공간을 초과할 때 탭을 여러 줄에 래핑할지 또는 스크롤 막대를 대신 표시할지 여부를 제어합니다. 이 값은 `workbench.editor.showTabs`(이)가 ‘`multiple`’로 설정되지 않은 경우 무시됩니다.
	"workbench.editor.wrapTabs": false,

	// [GLOB 패턴](https://aka.ms/vscode-glob-patterns)을 편집기로 구성합니다(예: `"*.hex": "hexEditor.hexedit"`). 이러한 동작은 기본 동작보다 우선합니다.
	"workbench.editorAssociations": {
		"*.copilotmd": "vscode.markdown.preview.editor"
	},

	// 편집기에서 열 때 확인을 요청하기 전에 파일의 최소 크기(MB)를 제어합니다. 이 설정은 일부 편집기 유형 및 환경에는 적용되지 않을 수 있습니다.
	"workbench.editorLargeFileConfirmation": 1024,

	// Microsoft 온라인 서비스에서 실행할 실험을 가져옵니다.
	"workbench.enableExperiments": true,

	// 현재 작업 영역에 대해 사용 가능한 작업 변경 내용을 클라우드에 자동으로 저장할지 여부를 제어합니다. 이 설정은 웹에는 영향을 주지 않습니다.
	//  - onShutdown: 창을 닫을 때 현재 작업 중인 변경 내용을 클라우드에 자동으로 저장합니다.
	//  - off: 작업 변경 내용을 클라우드에 자동으로 저장하려고 시도하지 마세요.
	"workbench.experimental.cloudChanges.autoStore": "off",

	// 현재 세션과 부분적으로 일치하는 클라우드 변경 내용을 표시할지 여부를 제어합니다.
	"workbench.experimental.cloudChanges.partialMatches.enabled": false,

	// `window.commandCenter`이(가) `true`일 때 명령 센터 옆에 있는 공유 작업을 렌더링할지 여부를 제어합니다.
	"workbench.experimental.share.enabled": false,

	// 외부에서 http 또는 https 링크를 여는 데 사용할 브라우저를 구성합니다. 이는 브라우저의 이름('edge', 'chrome', 'firefox') 또는 브라우저 실행 파일의 절대 경로일 수 있습니다. 설정하지 않으면 시스템 기본값을 사용합니다.
	"workbench.externalBrowser": "",

	// 외부 URI(http, https)에 사용할 opener를 구성합니다.
	"workbench.externalUriOpeners": {},

	// workbench 항목(예: 일부 확장에서 트리 뷰 항목을 제공함)에 호버가 표시된 후 지연 시간(밀리초)을 제어합니다. 이미 표시된 항목에 이 설정 변경 내용을 적용하려면 해당 항목을 새로 고쳐야 할 수 있습니다.
	"workbench.hover.delay": 500,

	// 워크벤치에서 사용한 파일 아이콘 테마를 지정하거나, 파일 아이콘을 표시하지 않도록 'null'을 지정합니다.
	//  - null: 파일 아이콘 없음
	//  - vs-minimal
	//  - vs-seti
	//  - vs-nomo-dark
	//  - material-icon-theme
	"workbench.iconTheme": "vs-seti",

	// 레이아웃 컨트롤을 사용자 지정 제목 표시줄에 표시할지 여부를 제어합니다. 이 설정은`window.customTitleBarVisibility`이(가) `never`(으)로 설정되지 않은 경우에만 적용됩니다.
	"workbench.layoutControl.enabled": true,

	// 사용자 지정 제목 표시줄의 레이아웃 컨트롤이 단일 메뉴 버튼으로 표시되는지 또는 여러 UI 토글과 함께 표시되는지 제어합니다.
	//  - menu: 레이아웃 옵션의 드롭다운이 있는 단일 버튼을 표시합니다.
	//  - toggles: 패널과 사이드 바의 표시 유형을 전환하기 위한 여러 버튼을 표시합니다.
	//  - both: 드롭다운 및 토글 버튼을 모두 표시합니다.
	"workbench.layoutControl.type": "both",

	// 워크벤치에서 목록 및 트리를 검색할 때 사용하는 일치 유형을 제어합니다.
	//  - fuzzy: 검색할 때 유사 항목 일치를 사용합니다.
	//  - contiguous: 검색할 때 연속 일치를 사용합니다.
	"workbench.list.defaultFindMatchType": "fuzzy",

	// 워크벤치에서 목록 및 트리의 기본 찾기 모드를 제어합니다.
	//  - highlight: 검색할 때 요소를 강조 표시합니다. 추가 위아래 탐색은 강조 표시된 요소만 탐색합니다.
	//  - filter: 검색할 때 요소를 필터링합니다.
	"workbench.list.defaultFindMode": "highlight",

	// 'Alt' 키를 누를 때 스크롤 속도 승수입니다.
	"workbench.list.fastScrollSensitivity": 5,

	// 워크벤치에서 목록 및 트리의 가로 스크롤 여부를 제어합니다. 경고: 이 설정을 켜면 성능에 영향을 미칩니다.
	"workbench.list.horizontalScrolling": false,

	// 대신 'workbench.list.defaultFindMode' 및 'workbench.list.typeNavigationMode'를 사용하세요.
	// 워크벤치의 목록 및 트리 키보드 탐색 스타일을 제어합니다. 간소화하고, 강조 표시하고, 필터링할 수 있습니다.
	//  - simple: 간단한 키보드 탐색에서는 키보드 입력과 일치하는 요소에 집중합니다. 일치는 접두사에서만 수행됩니다.
	//  - highlight: 키보드 탐색 강조 표시에서는 키보드 입력과 일치하는 요소를 강조 표시합니다. 이후로 탐색에서 위 및 아래로 이동하는 경우 강조 표시된 요소만 트래버스합니다.
	//  - filter: 키보드 탐색 필터링에서는 키보드 입력과 일치하지 않는 요소를 모두 필터링하여 숨깁니다.
	"workbench.list.keyboardNavigation": "highlight",

	// 마우스 휠 스크롤 이벤트의 `deltaX` 및 `deltaY`에서 사용할 승수입니다.
	"workbench.list.mouseWheelScrollSensitivity": 1,

	// 마우스로 트리와 목록의 항목을 다중 선택에 추가할 때 사용할 한정자입니다(예를 들어 탐색기에서 편집기와 SCM 보기를 여는 경우). '옆에서 열기' 마우스 제스처(지원되는 경우)는 다중 선택 한정자와 충돌하지 않도록 조정됩니다.
	//  - ctrlCmd: Windows와 Linux의 'Control'을 macOS의 'Command'로 매핑합니다.
	//  - alt: Windows와 Linux의 'Alt'를 macOS의 'Option'으로 매핑합니다.
	"workbench.list.multiSelectModifier": "ctrlCmd",

	// 트리와 목록에서 마우스를 사용하여 항목을 여는 방법을 제어합니다(지원되는 경우). 일부 트리와 목록에서는 이 설정을 적용할 수 없는 경우 무시하도록 선택할 수 있습니다.
	"workbench.list.openMode": "singleClick",

	// 스크롤 막대 스크롤 페이지의 페이지별 클릭 여부를 제어합니다.
	"workbench.list.scrollByPage": false,

	// 목록과 트리에 부드러운 화면 이동 기능이 있는지를 제어합니다.
	"workbench.list.smoothScrolling": false,

	// 워크벤치의 목록 및 트리에서 형식 탐색이 작동하는 방식을 제어합니다. 'trigger'로 설정 시 'list.triggerTypeNavigation' 명령이 실행되면 형식 탐색이 시작됩니다.
	"workbench.list.typeNavigationMode": "automatic",

	// 로컬 파일 기록의 활성화 여부를 제어합니다. 활성화하면 저장된 편집기의 파일 내용이 백업 위치에 저장되어 나중에 내용을 복원하거나 검토할 수 있습니다. 이 설정을 변경해도 기존 로컬 파일 기록 항목에는 영향을 미치지 않습니다.
	"workbench.localHistory.enabled": true,

	// 로컬 파일 기록에서 파일을 제외할 경로 또는 [GLOB 패턴](https://aka.ms/vscode-glob-patterns)을 구성합니다. GLOB 패턴은 절대 경로가 아닌 경우 작업 영역 폴더의 경로에 따라 항상 평가됩니다. 이 설정을 변경해도 기존 로컬 파일 기록 항목에는 영향을 주지 않습니다.
	"workbench.localHistory.exclude": {},

	// 파일당 로컬 파일 기록 항목의 최대 수를 제어합니다. 로컬 파일 기록 항목 수가 파일에 대해 이 수를 초과하면 가장 오래된 항목이 삭제됩니다.
	"workbench.localHistory.maxFileEntries": 50,

	// 로컬 파일 기록에 대해 고려할 파일의 최대 크기(KB)를 제어합니다. 더 큰 파일은 로컬 파일 기록에 추가되지 않습니다. 이 설정을 변경해도 기존 로컬 파일 기록 항목에는 영향을 미치지 않습니다.
	"workbench.localHistory.maxFileSize": 256,

	// 로컬 파일 기록의 마지막 항목이 추가되는 항목으로 대체되는 간격(초)을 구성합니다. 이렇게 하면 자동 저장이 활성화된 경우와 같이 추가되는 전체 항목 수를 줄이는 데 도움이 됩니다. 이 설정은 출처가 동일한 항목에만 적용됩니다. 이 설정을 변경해도 기존 로컬 파일 기록 항목에는 영향을 미치지 않습니다.
	"workbench.localHistory.mergeWindow": 10,

	// 탐색 컨트롤이 사용자 지정 제목 표시줄에 표시되는지 여부를 제어합니다. 이 설정은`window.customTitleBarVisibility`이(가) `never`(으)로 설정되지 않은 경우에만 적용됩니다.
	"workbench.navigationControl.enabled": true,

	// 새 작업 영역에서 패널의 기본 위치(터미널, 디버그 콘솔, 출력, 문제)를 제어합니다. 편집기 영역의 아래쪽, 위쪽, 오른쪽 또는 왼쪽에 표시될 수 있습니다.
	"workbench.panel.defaultLocation": "bottom",

	// 패널이 최대화되어 열리는지 여부를 제어합니다. 항상 최대화되어 열리거나, 최대화되어 열리지 않거나, 닫기 전 상태였던 마지막 상태로 열 수 있습니다.
	//  - always: 패널을 열 때 항상 패널을 최대화합니다.
	//  - never: 패널을 열 때 최대화하지 마세요.
	//  - preserve: 패널을 닫기 전 상태로 엽니다.
	"workbench.panel.opensMaximized": "preserve",

	// 패널 제목의 활동 항목이 레이블 또는 아이콘으로 표시되는지 여부를 제어합니다.
	"workbench.panel.showLabels": true,

	// 시스템 색 모드가 다크 모드이며 `window.autoDetectColorScheme`이(가) 활성화된 경우 색 테마를 지정합니다.
	"workbench.preferredDarkColorTheme": "Default Dark Modern",

	// 고대비 다크 모드이며 `window.autoDetectHighContrast`이(가) 활성화된 경우 색 테마를 지정합니다.
	"workbench.preferredHighContrastColorTheme": "Default High Contrast",

	// 고대비 밝음 모드이며 `window.autoDetectHighContrast`이(가) 활성화된 경우 색 테마를 지정합니다.
	"workbench.preferredHighContrastLightColorTheme": "Default High Contrast Light",

	// 시스템 색 모드가 밝음 모드이며 `window.autoDetectColorScheme`이(가) 활성화된 경우 색 테마를 지정합니다.
	"workbench.preferredLightColorTheme": "Default Light Modern",

	// 사용되는 제품 아이콘 테마를 지정합니다.
	//  - Default: 기본값
	"workbench.productIconTheme": "Default",

	// Quick Open이 포커스를 잃으면 해당 Quick Open을 자동으로 닫을지 여부를 제어합니다.
	"workbench.quickOpen.closeOnFocusLost": true,

	// 다음에 열 때 마지막으로 Quick Open에 입력한 내용을 복원할지 여부를 제어합니다.
	"workbench.quickOpen.preserveInput": false,

	// 워크벤치가 더 적은 애니메이션으로 렌더링되어야 하는지 여부를 제어합니다.
	//  - on: 항상 감소된 동작으로 렌더링합니다.
	//  - off: 축소된 동작으로 렌더링 안 함
	//  - auto: OS 구성에 따라 감소된 동작으로 렌더링합니다.
	"workbench.reduceMotion": "auto",

	// 사용하도록 설정하면 원격 확장 권장 사항이 원격 표시기 메뉴에 표시됩니다.
	"workbench.remoteIndicator.showExtensionRecommendations": true,

	// 보기/편집기 간 끌기 영역의 호버 피드백 지연 시간(밀리초)을 제어합니다.
	"workbench.sash.hoverDelay": 300,

	// 보기/편집기 사이의 끌기 영역의 피드백 영역 크기를 픽셀 단위로 제어합니다. 마우스를 사용하여 보기 크기를 조정하기가 어려운 경우 더 큰 값으로 설정합니다.
	"workbench.sash.size": 4,

	// 처음으로 열리는 작업 영역 또는 빈 창에서 보조 사이드바의 기본 가시성을 제어합니다.
	//  - hidden: 보조 사이드바를 기본적으로 숨깁니다.
	//  - visibleInWorkspace: 작업 영역을 열면 보조 사이드바가 기본적으로 표시됩니다.
	//  - visible: 보조 사이드바를 기본적으로 표시합니다.
	//  - maximizedInWorkspace: 작업 영역을 열면 보조 사이드바가 기본적으로 표시되고 최대화됩니다.
	//  - maximized: 보조 사이드바가 기본적으로 표시되고 최대화됩니다.
	"workbench.secondarySideBar.defaultVisibility": "visibleInWorkspace",

	// 보조 사이드바 제목의 활동 항목이 레이블 또는 아이콘으로 표시되는지 여부를 제어합니다. 이 설정은 `workbench.activityBar.location`이(가) `top`(으)로 설정되지 않은 경우에만 적용됩니다.
	"workbench.secondarySideBar.showLabels": true,

	// 모든 프로필에 적용할 설정을 구성합니다.
	"workbench.settings.applyToAllProfiles": [],

	// 기본적으로 사용할 설정 편집기를 결정합니다.
	//  - ui: 설정 UI 편집기를 사용합니다.
	//  - json: JSON 파일 편집기를 사용합니다.
	"workbench.settings.editor": "ui",

	// 설정에 대한 자연어 검색 모드를 사용할지 여부를 제어합니다. 자연어 검색은 Microsoft 온라인 서비스에 의해 제공됩니다.
	"workbench.settings.enableNaturalLanguageSearch": true,

	// 키 바인딩 설정을 열면 모든 기본 키 바인딩 설정을 표시하는 편집기도 열리는지 여부를 제어합니다.
	"workbench.settings.openDefaultKeybindings": false,

	// 설정을 열면 모든 기본 설정을 표시하는 편집기도 열리는지 여부를 제어합니다.
	"workbench.settings.openDefaultSettings": false,

	// 검색하는 동안 설정 편집기 목차의 동작을 제어합니다. 설정 편집기에서 이 설정을 변경하는 경우 검색 쿼리가 수정된 후에 설정이 적용됩니다.
	//  - hide: 검색하는 동안 목차를 숨깁니다.
	//  - filter: 일치하는 설정이 있는 범주로 목차를 필터링합니다. 범주를 클릭하면 해당 범주로 결과가 필터링됩니다.
	"workbench.settings.settingsSearchTocBehavior": "filter",

	// 검색을 수행한 후 AI 검색 결과를 사용할 수 있게 되면 설정 편집기의 검색 창에 AI 검색 결과 토글을 표시할지 여부를 제어합니다.
	"workbench.settings.showAISearchToggle": true,

	// JSON으로 설정을 편집할 때 분할 JSON 편집기를 사용할지 여부를 제어합니다.
	"workbench.settings.useSplitJSON": false,

	// 기본 사이드바 및 활동 표시줄의 위치를 제어합니다. 워크벤치의 왼쪽이나 오른쪽에 표시할 수 있습니다. 보조 사이드 바는 작업대의 반대쪽에 표시됩니다.
	"workbench.sideBar.location": "left",

	// 이전 세션에서 복원된 편집기가 없는 경우 시작 시 편집기의 표시 여부를 제어합니다.
	//  - none: 편집기를 사용하지 않고 시작합니다.
	//  - welcomePage: VS Code 및 확장을 시작하는 데 도움이 되는 콘텐츠가 포함된 시작 페이지를 엽니다.
	//  - readme: 폴더가 포함된 폴더를 열 때 README를 열고, 그렇지 않으면 'welcomePage'로 대체합니다. 참고: 이 항목은 전역 ccnfiguration으로만 관찰되며, 작업 영역 또는 폴더 구성에 설정된 경우 무시됩니다.
	//  - newUntitledFile: 제목 없는 새 텍스트 파일을 엽니다(빈 창을 열 때만 적용됨).
	//  - welcomePageInEmptyWorkbench: 빈 워크벤치를 열 때 시작 페이지를 엽니다.
	//  - terminal: 편집기 영역에서 새 터미널을 엽니다.
	"workbench.startupEditor": "welcomePage",

	// 워크벤치 아래쪽에서 상태 표시줄의 표시 유형을 제어합니다.
	"workbench.statusBar.visible": true,

	// 사용하도록 설정되면 편집기가 열리지 않았을 때 워터마크 팁이 표시됩니다.
	"workbench.tips.enabled": true,

	// 트리에서 고정 스크롤을 사용할지 여부를 제어합니다.
	"workbench.tree.enableStickyScroll": true,

	// 폴더 이름을 클릭할 때 트리 폴더가 확장되는 방법을 제어합니다. 일부 트리와 목록에서는 이 설정을 적용할 수 없는 경우 무시하도록 선택할 수 있습니다.
	"workbench.tree.expandMode": "singleClick",

	// 트리 들여쓰기를 픽셀 단위로 제어합니다.
	"workbench.tree.indent": 8,

	// 트리에서 들여쓰기 가이드를 렌더링할지 여부를 제어합니다.
	"workbench.tree.renderIndentGuides": "onHover",

	// `workbench.tree.enableStickyScroll`을(를) 사용하도록 설정한 경우 트리에 표시되는 고정 요소의 수를 제어합니다.
	"workbench.tree.stickyScrollMaxItemCount": 7,

	// 사용하도록 설정하면 신뢰할 수 있는 작업 영역에서 링크를 열 때 트러스트된 도메인 프롬프트가 표시됩니다.
	"workbench.trustedDomains.promptInTrustedWorkspace": false,

	// 보기 머리글 작업의 표시 여부를 제어합니다. 보기 머리글 작업은 항상 표시할 수도 있고 보기에 포커스가 있거나 보기를 마우스로 가리킬 때만 표시할 수도 있습니다.
	"workbench.view.alwaysShowHeaderActions": false,

	// 확장에서 숨겨진 보기를 표시하도록 요청하는 경우 클릭 가능한 상태 표시줄 표시기를 대신 표시합니다.
	"workbench.view.showQuietly": {},

	// 사용되지 않습니다. 전역 'workbench.reduceMotion'을 사용합니다.
	// 사용하도록 설정하면 시작 페이지에서 동작을 줄입니다.
	"workbench.welcomePage.preferReducedMotion": false,

	// 사용하도록 설정하면 확장 프로그램을 설치할 때 확장 프로그램의 단계별 설명이 열립니다.
	"workbench.welcomePage.walkthroughs.openOnInstall": true,

	// 사용하도록 설정하면 시스템 색 모드에 따라 색 테마가 자동으로 선택됩니다. 시스템 색 모드가 다크 모드이면 `workbench.preferredDarkColorTheme#`을(를) 사용하며, 그렇지 않으면 `#workbench.preferredLightColorTheme`을(를) 사용합니다.
	"window.autoDetectColorScheme": false,

	// 사용하도록 설정하면 OS가 고대비 테마를 사용하는 경우 고대비 테마로 자동 변경됩니다. 사용할 고대비 테마는 `workbench.preferredHighContrastColorTheme#` 및 `#workbench.preferredHighContrastLightColorTheme`(으)로 지정됩니다.
	"window.autoDetectHighContrast": true,

	// 창의 테두리 색을 제어합니다.
	// - `default`: 색 테마 설정 준수, Windows 설정으로 대체
	// - `system`: Windows 설정만 적용
	// - `off`: 테두리 색 사용 안 함
	// - `<color>`: 16진수, RGB, RGBA, HSL, HSLA 형식의 특정 색
	// 
	// `workbench.colorCustomizations#`을(를) 사용하여 활성 창과 비활성 창에 다른 색상을 설정할 수 있습니다. `#window.titleBarStyle`이(가) `native`(으)로 설정되면 이 설정은 무시됩니다.
	"window.border": "default",

	// 마지막 편집기를 닫을 때 창도 닫을지 여부를 제어합니다. 이 설정은 폴더를 표시하지 않는 창에만 적용됩니다.
	"window.closeWhenEmpty": false,

	// 창 제목과 함께 명령 시작 관리자를 표시합니다. 이 설정은`window.customTitleBarVisibility`이(가) `never`(으)로 설정되지 않은 경우에만 적용됩니다.
	"window.commandCenter": true,

	// 창을 닫거나 애플리케이션을 종료하기 전에 확인 대화 상자를 표시할지 여부를 제어합니다.
	//  - always: 항상 확인을 요청합니다.
	//  - keyboardOnly: 키 바인딩이 사용된 경우에만 확인을 요청합니다.
	//  - never: 확인을 명시적으로 요청하지 마세요.
	"window.confirmBeforeClose": "never",

	// 다른 작업 영역으로 전환할 때 창에 열려 있는 제목 없는 작업 영역을 저장할지 삭제할지 묻는 확인 대화 상자를 표시할지 여부를 제어합니다. 확인 대화 상자를 사용하지 않도록 설정하면 제목 없는 작업 영역이 항상 삭제됩니다.
	"window.confirmSaveUntitledWorkspace": true,

	// OS에 맞게 창 컨트롤의 모양을 네이티브로 조정합니다(사용자 지정 그림 또는 숨김). 변경 내용을 적용하려면 완전히 다시 시작해야 합니다.
	"window.controlsStyle": "native",

	// <Alt> 키를 눌러 메뉴 모음이 포커스되는지 여부를 제어합니다. 이 설정은 <Alt> 키로 메뉴 모음을 토글하는 데는 영향을 주지 않습니다.
	"window.customMenuBarAltFocus": true,

	// 사용자 지정 제목 표시줄을 표시할 시기를 조정합니다. `windowed`를 사용하여 전체 화면 모드에 있을 때 사용자 지정 제목 표시줄을 숨길 수 있습니다. `window.titleBarStyle`이(가) `native`로 설정된 경우 `never`를 사용해야만 전체 화면이 아닌 모드에서 사용자 지정 제목 표시줄을 숨길 수 있습니다.
	//  - auto: 사용자 지정 제목 표시줄 표시 여부를 자동으로 변경합니다.
	//  - windowed: 전체 화면에서 사용자 지정 제목 표시줄을 숨깁니다. 전체 화면이 아닌 경우 사용자 지정 제목 표시줄 표시 여부를 자동으로 변경합니다.
	//  - never: `window.titleBarStyle`이(가) `native`로 설정된 경우 사용자 지정 제목 표시줄을 숨깁니다.
	"window.customTitleBarVisibility": "auto",

	// 대화 상자의 모양을 OS에 맞게 또는 사용자 지정하여 조정합니다.
	"window.dialogStyle": "native",

	// 활성화된 경우 이 설정에서 제목 표시줄의 애플리케이션 아이콘을 두 번 클릭하면 창이 닫힙니다. 창은 아이콘으로 끌 수 없습니다. 이 설정은 `window.titleBarStyle`이(가) `custom`으로 설정된 경우에만 유효합니다.
	"window.doubleClickIconToClose": false,

	// <Alt> 키 바로 가기를 통해 주 메뉴를 열 수 있는지 여부를 제어합니다. 대신 니모닉을 사용하지 않도록 설정하면 이러한 <Alt> 키 바로 가기를 편집기 명령에 바인딩할 수 있습니다.
	"window.enableMenuBarMnemonics": true,

	// 메뉴 모음의 표시 여부를 제어합니다. '토글' 설정은 메뉴 모음이 숨겨지고 'Alt' 키를 한 번 누르면 메뉴 모음이 표시됨을 의미합니다. '컴팩트' 설정은 메뉴를 사이드바로 이동시킵니다.
	//  - classic: 메뉴가 창 위쪽에 표시되고 전체 화면 모드에서만 숨겨집니다.
	//  - visible: 전체 화면 모드에서도 메뉴가 항상 창 위쪽에 표시됩니다.
	//  - toggle: 메뉴가 숨겨지지만, <Alt> 키를 통해 창 위쪽에 표시할 수 있습니다.
	//  - hidden: 메뉴가 항상 숨겨집니다.
	//  - compact: 메뉴는 사이드바에 컴팩트 단추로 표시됩니다. 이 값은 `window.titleBarStyle#`이(가) `native`이고 `#window.menuStyle`이(가) `native` 또는 `inherit`인 경우 무시됩니다.
	"window.menuBarVisibility": "classic",

	// 메뉴 스타일을 OS에서 기본으로 사용하거나 사용자 지정하거나 `window.titleBarStyle`에 정의된 제목 표시줄 스타일에서 상속되도록 조정합니다. 이는 상황에 맞는 메뉴 모양에도 영향을 줍니다. 변경 내용을 적용하려면 완전히 다시 시작해야 합니다.
	//  - custom: 사용자 지정 메뉴를 사용하세요.
	//  - native: 기본 메뉴를 사용합니다. `window.titleBarStyle`이(가) `custom`(으)로 설정된 경우 무시됩니다.
	//  - inherit: 메뉴 스타일을 `window.titleBarStyle`에서 정의된 제목 표시줄 스타일과 일치시킵니다.
	"window.menuStyle": "inherit",

	// 하나 이상의 창이 이미 열려 있을 때 새 창을 여는 크기를 제어합니다. 이 설정은 여는 첫 번째 창에는 적용되지 않습니다. 첫 번째 창의 경우 항상 창을 닫기 전의 크기와 위치가 복원됩니다.
	//  - default: 화면 가운데에서 새 창을 엽니다.
	//  - inherit: 마지막 활성 창과 동일한 크기로 새 창을 엽니다.
	//  - offset: 오프셋 위치에 있는 마지막 활성 창과 차원이 같은 새 창을 엽니다.
	//  - maximized: 최대화된 새 창을 엽니다.
	//  - fullscreen: 전체 화면 모드에서 새 창을 엽니다.
	"window.newWindowDimensions": "default",

	// 새 창을 열 때 사용할 프로필을 지정합니다. 프로필 이름이 제공되면 새 창에서 해당 프로필을 사용합니다. 프로필 이름이 제공되지 않으면 활성 창이 없는 경우 새 창에서 활성 창의 프로필 또는 기본 프로필을 사용합니다.
	"window.newWindowProfile": null,

	// 명령줄이나 파일 대화 상자를 사용할 때 파일을 새 창에서 열어야 하는지 여부를 제어합니다.
	// 이 설정이 무시되는 경우가 여전히 있을 수 있습니다(예: `--new-window` 또는 `--reuse -window` 명령줄 옵션).
	//  - on: 파일이 새 창에서 열립니다.
	//  - off: 파일이 파일의 폴더가 열려 있는 창 또는 마지막 활성 창에서 열립니다.
	//  - default: 애플리케이션 내에서 선택(예: 파일 메뉴를 통해)하는 경우를 제외하고 파일이 새 창에서 열립니다.
	"window.openFilesInNewWindow": "off",

	// 폴더를 새 창에서 열거나 마지막 활성 창을 바꿀지 여부를 제어합니다.
	// 이 설정이 무시되는 경우도 있을 수 있습니다(예: '--new-window' 또는 '--reuse-window' 명령줄 옵션을 사용할 경우).
	//  - on: 폴더가 새 창에서 열립니다.
	//  - off: 폴더가 마지막 활성 창을 바꿉니다.
	//  - default: 폴더를 애플리케이션 내에서 선택(예: 파일 메뉴를 통해)하는 경우를 제외하고 폴더가 새 창에서 열립니다.
	"window.openFoldersInNewWindow": "default",

	// 인수 없이 두 번째 인스턴스를 시작할 때 새로운 빈 창을 열지 또는 실행 중인 마지막 인스턴스에 포커스가 생기는지 여부를 제어합니다.
	// 이 설정이 무시되는 경우도 있을 수 있습니다(예: '--new-window' 또는 '--reuse-window' 명령줄 옵션을 사용할 경우).
	//  - on: 빈 창을 새로 엽니다.
	//  - off: 실행 중인 마지막 활성 인스턴스에 포커스가 생깁니다.
	"window.openWithoutArgumentsInNewWindow": "on",

	// 창이 전체 화면 모드에서 종료된 경우 창을 전체 화면 모드로 복원할지 여부를 제어합니다.
	"window.restoreFullscreen": false,

	// 창 및 편집기를 열 때 복원하는 방법을 제어합니다.
	//  - preserve: 항상 모든 창을 다시 엽니다. 폴더 또는 작업 영역이 열려 있는 경우(예: 명령줄에서) 이전에 열리지 않은 한 새 창으로 엽니다. 파일이 열리면 이전에 열었던 편집기와 함께 복원된 창 중 하나에서 열립니다.
	//  - all: 폴더, 작업 영역 또는 파일이 열려 있지 않은 한(예: 명령줄에서) 모든 창을 다시 엽니다. 파일이 열리면 이전에 창에서 열었던 편집기가 대체됩니다.
	//  - folders: 폴더, 작업 영역 또는 파일이 열려 있지 않은 한(예: 명령줄에서) 열린 폴더 또는 작업 영역이 있는 모든 창을 다시 엽니다. 파일이 열리면 이전에 창에서 열었던 편집기가 대체됩니다.
	//  - one: 폴더, 작업 영역 또는 파일이 열려 있지 않은 한(예: 명령줄에서) 마지막 활성 창을 다시 엽니다. 파일이 열리면 이전에 창에서 열었던 편집기가 대체됩니다.
	//  - none: 창을 다시 열지 않습니다. 폴더 또는 작업 영역이 열려 있지 않은 한(예: 명령줄에서) 빈 창이 표시됩니다.
	"window.restoreWindows": "all",

	// 열린 작업 영역 또는 활성 편집기 같은 현재 컨텍스트를 기반으로 창 제목을 제어합니다. 변수는 컨텍스트에 따라 대체됩니다.
	// - `${activeEditorShort}`: 파일 이름(예: myFile.txt).
	// - '${activeEditorMedium}: 작업 영역 폴더(예: myFolder/myFileFolder/myFile.txt)와 관련된 파일의 경로입니다.
	// - `${activeEditorLong}`: 파일 전체 경로(예: /Users/Development/myFolder/myFileFolder/myFile.txt).
	// - '${activeFolderShort}: 파일이 포함된 폴더 이름(예: myFileFolder)입니다.
	// - `${activeFolderMedium}`: 파일이 포함된 관련된 작업 영역 폴더(예: myFolder/myFileFolder)에 포함된 폴더 경로.
	// - `${activeFolderLong}`: 파일이 포함된 폴더 전체 경로(예: /Users/Development/myFolder/myFileFolder).
	// - `${folderName}`: 파일이 포함된 작업 영역 폴더의 이름(예 : myFolder).
	// - `${folderPath}`: 파일이 포함된 작업 영역 폴더의 파일 경도(예: /Users/Development/myFolder).
	// - `${rootName}`: 해당되는 경우 선택적인 원격 이름 및 작업 영역 표시기가 있는 작업 영역의 이름(예: myFolder, myRemoteFolder [SSH] 또는 myWorkspace(Workspace)).
	// - '${rootNameShort}': 접미사가 없는 작업 영역의 단축 이름입니다(예: myFolder, myRemoteFolder 또는 myWorkspace).
	// - `${rootPath}`: 열려 있는 작업 영역 또는 폴더의 파일 경로입니다(예: /Users/Development/myWorkspace).
	// - `${profileName}`: 작업 영역이 열리는 프로필의 이름입니다(예: 데이터 과학(프로필)). 기본 프로필을 사용하는 경우 무시됩니다.
	// - `${appName}`: 예: VS Code.
	// - `${remoteName}`: 예: SSH
	// - `${dirty}`: 활성 편집기에 저장되지 않은 변경 내용이 있는 경우에 대한 표시기입니다.
	// - `${focusedView}`: 현재 포커스가 맞춰져 있는 보기의 이름입니다.
	// - '${activeRepositoryName}': 활성 리포지토리의 이름(예: vscode)
	// - '${activeRepositoryBranchName}': 활성 리포지토리(예: main)의 활성 분기 이름입니다.
	// - '${activeEditorState}': 활성 편집기의 상태에 대한 정보(예: 수정됨)를 제공합니다. `accessibility.windowTitleOptimized`(이)가 사용하도록 설정된 화면 읽기 프로그램 모드에서 기본적으로 추가됩니다.
	// - `${separator}`: 값 또는 정적 텍스트가 있는 변수로 둘러싸인 경우에만 표시되는 조건부 구분 기호 ( "-").
	"window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${profileName}${separator}${appName}",

	// OS 또는 사용자 지정에 의해 네이티브가 되도록 창 제목 표시줄의 모양을 조정합니다. 변경 내용을 적용하려면 완전히 다시 시작해야 합니다.
	"window.titleBarStyle": "custom",

	// `window.title`이(가) 사용하는 구분 기호입니다.
	"window.titleSeparator": " - ",

	// 모든 창의 기본 확대/축소 수준을 조정합니다. '0'(예: '1') 또는 이하(예: '-1')를 초과하는 각 증가는 확대/축소 '20%'를 더 크거나 더 작게 나타냅니다. 소수 자릿수를 입력하여 확대/축소 수준을 더 세밀하게 조정할 수도 있습니다. '확대' 및 '축소' 명령이 모든 창에 확대/축소 수준을 적용하는지 아니면 활성 창에만 적용하는지 구성하려면 `window.zoomPerWindow`(을)를 참조하세요.
	"window.zoomLevel": 0,

	// '확대' 및 '축소' 명령이 확대/축소 수준을 모든 창에 적용할지 아니면 활성 창에만 적용할지를 제어합니다. 모든 창의 기본 확대/축소 수준을 구성하려면 `window.zoomLevel` 페이지를 참조하세요.
	"window.zoomPerWindow": true,

	// 스크린캐스트 모드 키보드의 글꼴 크기(픽셀)를 제어합니다.
	"screencastMode.fontSize": 56,

	// 스크린캐스트 모드에서 키보드 오버레이를 사용자 지정하는 옵션입니다.
	"screencastMode.keyboardOptions": {
		"showKeys": true,
		"showKeybindings": true,
		"showCommands": true,
		"showCommandGroups": false,
		"showSingleEditorCursorMoves": true
	},

	// 스크린캐스트 모드에서 키보드 오버레이가 표시되는 시간(밀리초)을 제어합니다.
	"screencastMode.keyboardOverlayTimeout": 800,

	// 스크린캐스트 모드에서 마우스 표시기의 헥스(#RGB, #RGBA, #RRGGBB 또는 #RRGGBBAA) 색상을 제어합니다.
	"screencastMode.mouseIndicatorColor": "#FF0000",

	// 스크린캐스트 모드에서 마우스 표시기의 크기(픽셀)를 제어합니다.
	"screencastMode.mouseIndicatorSize": 20,

	// 맨 아래에서 스크린캐스트 모드 오버레이의 수직 오프셋을 워크벤치 높이의 백분율로 제어합니다.
	"screencastMode.verticalOffset": 20,

	// 언어에 대한 파일 연결의 [GLOB 패턴](https://aka.ms/vscode-glob-patterns)을 구성합니다(예: `"*.extension": "html"`). 패턴은 경로 구분 기호가 포함된 경우 파일의 절대 경로에서 일치하며, 그렇지 않은 경우 파일 이름에서 일치합니다. 이는 설치된 언어의 기본 연결보다 우선합니다.
	"files.associations": {},

	// 사용하도록 설정하면 편집기는 파일을 열 때 문자 집합 인코딩을 추측하려고 시도합니다. 이 설정은 언어별로 구성할 수도 있습니다. 이 설정은 텍스트 검색에서 적용되지 않습니다. `files.encoding`만 적용됩니다.
	"files.autoGuessEncoding": false,

	// 저장되지 않은 변경 사항이 있는 편집기의 [자동 저장](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save)을 제어합니다.
	//  - off: 변경 내용이 있는 편집기는 자동으로 저장되지 않습니다.
	//  - afterDelay: 변경 내용이 있는 편집기는 구성된 '#files.autoSaveDelay#' 후에 자동으로 저장됩니다.
	//  - onFocusChange: 편집기에서 포커스가 손실되면 변경 내용이 있는 편집기가 자동으로 저장됩니다.
	//  - onWindowChange: 창에서 포커스가 손실되면 변경 내용이 있는 편집기가 자동으로 저장됩니다.
	"files.autoSave": "off",

	// 저장되지 않은 변경 내용이 있는 편집기가 자동으로 저장되기까지의 지연(밀리초)을 제어합니다. '#files.autoSave#'가 'afterDelay'(으)로 설정된 경우에만 적용됩니다.
	"files.autoSaveDelay": 50,

	// 사용하도록 설정하면 자동 저장이 트리거될 때 보고되는 오류가 없는 파일로 편집기의 [자동 저장](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save)을 제한합니다. `files.autoSave`을(를) 사용하도록 설정된 경우에만 적용됩니다.
	"files.autoSaveWhenNoErrors": false,

	// 사용 설정하면 편집기의 [자동 저장](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save)을 열린 작업 영역 내에 있는 파일로 제한합니다. `files.autoSave`을(를) 사용하도록 설정된 경우에만 적용됩니다.
	"files.autoSaveWorkspaceFilesOnly": false,

	// 편집기에서 나열된 순서대로 추측해야 하는 문자 집합 인코딩 목록입니다. 확인할 수 없는 경우 `files.encoding` 적용됨
	//  - utf8: UTF-8
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - cp1125: Cyrillic (CP 1125)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - cp950: Traditional Chinese (Big5)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - gb2312: Simplified Chinese (GB 2312)
	"files.candidateGuessEncodings": [],

	// 새 파일에 할당된 기본 언어 식별자입니다. `${activeEditorLanguage}`로 구성된 경우 현재 활성화된 텍스트 편집기의 언어 식별자(있는 경우)를 사용합니다.
	"files.defaultLanguage": "",

	// 파일 대화 상자의 기본 경로로, 사용자의 홈 경로를 재정의합니다. 가장 최근에 연 파일 또는 폴더와 같은 컨텍스트 관련 경로가 없는 경우에만 사용됩니다.
	"files.dialog.defaultPath": "",

	// 파일/폴더를 삭제하면 OS 휴지통(Windows의 휴지통)으로 이동합니다. 사용하지 않도록 설정하면 파일/폴더를 영구적으로 삭제합니다.
	"files.enableTrash": true,

	// 파일을 읽고 쓸 때 사용할 기본 문자 집합 인코딩입니다. 이 설정은 언어별로 구성할 수도 있습니다.
	//  - utf8: UTF-8
	//  - utf8bom: UTF-8 with BOM
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - iso88591: Western (ISO 8859-1)
	//  - iso88593: Western (ISO 8859-3)
	//  - iso885915: Western (ISO 8859-15)
	//  - macroman: Western (Mac Roman)
	//  - cp437: DOS (CP 437)
	//  - windows1256: Arabic (Windows 1256)
	//  - iso88596: Arabic (ISO 8859-6)
	//  - windows1257: Baltic (Windows 1257)
	//  - iso88594: Baltic (ISO 8859-4)
	//  - iso885914: Celtic (ISO 8859-14)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - cp852: Central European (CP 852)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - cp1125: Cyrillic (CP 1125)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - koi8u: Cyrillic (KOI8-U)
	//  - iso885913: Estonian (ISO 8859-13)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - iso885910: Nordic (ISO 8859-10)
	//  - iso885916: Romanian (ISO 8859-16)
	//  - windows1254: Turkish (Windows 1254)
	//  - iso88599: Turkish (ISO 8859-9)
	//  - windows1258: Vietnamese (Windows 1258)
	//  - gbk: Simplified Chinese (GBK)
	//  - gb18030: Simplified Chinese (GB18030)
	//  - cp950: Traditional Chinese (Big5)
	//  - big5hkscs: Traditional Chinese (Big5-HKSCS)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - windows874: Thai (Windows 874)
	//  - iso885911: Latin/Thai (ISO 8859-11)
	//  - koi8ru: Cyrillic (KOI8-RU)
	//  - koi8t: Tajik (KOI8-T)
	//  - gb2312: Simplified Chinese (GB 2312)
	//  - cp865: Nordic DOS (CP 865)
	//  - cp850: Western European DOS (CP 850)
	"files.encoding": "utf8",

	// 줄 바꿈 문자의 기본 끝입니다.
	//  - \n: LF
	//  - \r\n: CRLF
	//  - auto: 운영 체제별 줄 바꿈 문자를 사용합니다.
	"files.eol": "auto",

	// 파일 및 폴더 제외를 위해 [GLOB 패턴](https://aka.ms/vscode-glob-patterns)을 구성합니다. 예를 들어 파일 탐색기는 이 설정에 따라 표시하거나 숨길 파일과 폴더를 결정합니다. 검색 제외를 정의하려면 `search.exclude#` 설정을 참조합니다. `.gitignore`에 따라 파일을 무시하려면 `#explorer.excludeGitIgnore` 설정을 참조합니다.
	"files.exclude": {
		"**/.git": true,
		"**/.svn": true,
		"**/.hg": true,
		"**/.DS_Store": true,
		"**/Thumbs.db": true
	},

	// [Hot Exit](https://aka.ms/vscode-hot-exit)는 저장하지 않은 파일을 세션 간에 기억하여, 편집기를 종료할 때 저장할지 묻는 메시지를 건너뛸지 여부를 제어합니다.
	//  - off: 핫 종료를 사용하지 않도록 설정합니다. 저장하지 않은 변경 내용이 있는 편집기가 있는 창을 닫을 때 프롬프트가 표시됩니다.
	//  - onExit: Windows/Linux에서 마지막 창이 닫히거나 `workbench.action.quit` 명령이 트리거될 때(명령 팔레트, 키 바인딩, 메뉴) Hot Exit가 트리거됩니다. 열린 폴더가 없는 모든 창은 다음 실행 시 복원됩니다. 저장되지 않은 파일이 있는 이전에 연 창 목록은 `파일 > 최근 파일 열기 > 더 보기...`에서 액세스할 수 있습니다.
	//  - onExitAndWindowClose: Windows/Linux에서 마지막 창이 닫히거나 `workbench.action.quit` 명령이 트리거될 때(명령 팔레트, 키 바인딩, 메뉴) 또는 마지막 창인지 여부와 관계 없이 폴더가 열린 모든 창에 대해 Hot Exit가 트리거됩니다. 열린 폴더가 없는 모든 창은 다음 실행 시 복원됩니다. 저장되지 않은 파일이 있는 이전에 연 창 목록은 `파일 > 최근 파일 열기 > 더 보기...`에서 액세스할 수 있습니다.
	"files.hotExit": "onExit",

	// 사용하도록 설정되면 저장할 때 파일 끝에 마지막 줄바꿈을 삽입합니다.
	"files.insertFinalNewline": false,

	// 생성, 이름 바꾸기 및 삭제를 위한 파일 참가자가 취소된 후 밀리초 단위의 시간 제한입니다. 참가자를 비활성화하려면 '0'을 사용합니다.
	"files.participants.timeout": 60000,

	// `files.readonlyInclude` 설정 결과와 일치하는 경우 경로 또는 [GLOB 패턴](https://aka.ms/vscode-glob-patterns)이 읽기 전용으로 표시되지 않도록 구성합니다. GLOB 패턴은 절대 경로가 아닌 경우 작업 영역 폴더의 경로에 따라 항상 평가됩니다. 읽기 전용 파일 시스템 공급자의 파일은 항상 이 설정과 독립적으로 읽기 전용입니다.
	"files.readonlyExclude": {},

	// 파일 사용 권한이 다음과 같이 표시되면 파일을 읽기 전용으로 표시합니다. 이 설정은 `files.readonlyInclude#` 및 `#files.readonlyExclude` 설정을 통해 재정의할 수 있습니다.
	"files.readonlyFromPermissions": false,

	// 읽기 전용으로 표시하도록 경로 또는 [GLOB 패턴](https://aka.ms/vscode-glob-patterns)을 구성합니다. GLOB 패턴은 절대 경로가 아닌 경우 작업 영역 폴더의 경로에 따라 항상 평가됩니다. `files.readonlyExclude` 설정을 통해 일치하는 경로를 제외할 수 있습니다. 읽기 전용 파일 시스템 공급자의 파일은 항상 이 설정과 독립적으로 읽기 전용입니다.
	"files.readonlyInclude": {},

	// 리팩터링의 일부인 파일이 자동으로 저장되는지를 제어합니다.
	"files.refactoring.autoSave": true,

	// 파일을 다시 열 때 실행 취소 스택을 복원합니다.
	"files.restoreUndoStack": true,

	// 그동안 다른 프로그램에 의해 변경된 디스크에 파일을 저장할 경우 저장 충돌이 발생할 수 있습니다. 데이터 손실을 방지하기 위해 편집기의 변경 내용과 디스크의 버전을 비교하라는 메시지가 사용자에게 표시됩니다. 이 설정은 충돌 오류가 자주 발생하는 경우에만 변경해야 하며, 부주의한 사용은 데이터 손실을 초래할 수 있습니다.
	//  - askUser: 저장을 거부하고 수동으로 저장 충돌을 해결하도록 요청합니다.
	//  - overwriteFileOnDisk: 편집기의 변경 내용으로 디스크의 파일을 덮어써서 저장 충돌을 해결할 수 있습니다.
	"files.saveConflictResolution": "askUser",

	// 파일 및 폴더를 열고 저장할 수 있는 단순 파일 대화 상자를 활성화합니다. 사용 가능한 경우 단순 파일 대화 상자가 시스템 파일 대화 상자를 대체합니다.
	"files.simpleDialog.enable": false,

	// 사용하도록 설정되면 저장할 때 파일 끝에 마지막 줄 바꿈 이후의 모든 줄 바꿈이 잘립니다.
	"files.trimFinalNewlines": false,

	// 사용하도록 설정되면 파일을 저장할 때 후행 공백이 잘립니다.
	"files.trimTrailingWhitespace": false,

	// 사용하도록 설정하면 후행 공백이 여러 줄 문자열에서 제거되고 저장 시 또는 'editor.action.trimTrailingWhitespace'를 실행할 때 regexe가 제거됩니다. 이로 인해 최신 토큰 정보가 없는 경우 줄에서 공백이 잘려지지 않을 수 있습니다.
	"files.trimTrailingWhitespaceInRegexAndStrings": true,

	// 파일 감시에서 제외할 경로 또는 [GLOB 패턴](https://aka.ms/vscode-glob-patterns)을 구성합니다. 경로는 감시되는 폴더의 상대 경로이거나 절대 경로일 수 있습니다. GLOB 패턴은 감시되는 폴더에서 상대적으로 일치합니다. 파일 감시자 프로세스에서 CPU를 많이 사용하는 경우 관심도가 낮은 큰 폴더(예: 빌드 출력 폴더)를 제외해야 합니다.
	"files.watcherExclude": {
		"**/.git/objects/**": true,
		"**/.git/subtree-cache/**": true,
		"**/.hg/store/**": true,
		"**/.dart_tool": true
	},

	// 작업 영역 내부의 변경 내용을 감시할 추가 경로를 구성합니다. 기본적으로 기호 링크인 폴더를 제외한 모든 작업 영역 폴더는 재귀적으로 감시됩니다. 기호 링크인 감시 폴더를 지원하기 위해 절대 또는 상대 경로를 명시적으로 추가할 수 있습니다. 상대 경로는 현재 열려 있는 작업 영역을 사용하여 절대 경로로 해석됩니다.
	"files.watcherInclude": [],

	// Zen 모드를 켜면 레이아웃도 가운데로 맞춰지는지 여부를 제어합니다.
	"zenMode.centerLayout": true,

	// Zen 모드를 켜면 워크벤치도 전체 화면 모드로 전환되는지 여부를 제어합니다.
	"zenMode.fullScreen": true,

	// Zen 모드를 켜면 워크벤치의 왼쪽 또는 오른쪽에 있는 작업 막대도 숨길지 여부를 제어합니다.
	"zenMode.hideActivityBar": true,

	// Zen 모드를 설정하면 편집기 줄 번호도 숨길 것인지 여부를 제어합니다.
	"zenMode.hideLineNumbers": true,

	// Zen 모드를 켜면 워크벤치 하단에서 상태 표시줄도 숨길지 여부를 제어합니다.
	"zenMode.hideStatusBar": true,

	// 창이 Zen 모드에서 종료된 경우 Zen 모드로 복원할지를 제어합니다.
	"zenMode.restore": true,

	// Zen 모드를 켜면 여러 편집기 탭, 단일 편집기 탭을 표시할지 아니면 편집기 제목 영역을 완전히 숨길지 여부를 제어합니다.
	//  - multiple: 각 편집기는 편집기 제목 영역에 탭으로 표시됩니다.
	//  - single: 활성 편집기는 편집기 제목 영역에 하나의 큰 탭으로 표시됩니다.
	//  - none: 편집기 제목 영역이 표시되지 않습니다.
	"zenMode.showTabs": "multiple",

	// Zen 모드에 있는 동안 알림 방해 금지 모드를 활성화할지를 제어합니다. true인 경우 오류 알림만 표시합니다.
	"zenMode.silentNotifications": true,

	// 탐색기에 파일을 놓을 때 탐색기에서 자동으로 파일을 열지 여부를 제어합니다.
	"explorer.autoOpenDroppedFile": true,

	// 탐색기에서 파일을 열 때 자동으로 표시하고 선택할지를 제어합니다.
	//  - true: 파일이 표시되고 선택됩니다.
	//  - false: 파일이 표시되지 않고 선택되지 않습니다.
	//  - focusNoScroll: 파일을 스크롤하여 볼 수 없지만 포커스는 계속 있습니다.
	"explorer.autoReveal": true,

	// 파일 및 폴더가 열려 있을 때 탐색기에서 파일 및 폴더가 표시 및 선택되지 않도록 경로 또는 [GLOB 패턴](https://aka.ms/vscode-glob-patterns)을 구성합니다. GLOB 패턴은 절대 경로가 아닌 경우 작업 영역 폴더의 경로에 따라 항상 평가됩니다.
	"explorer.autoRevealExclude": {
		"**/node_modules": true,
		"**/bower_components": true
	},

	// 탐색기가 폴더를 압축 형식으로 렌더링할지를 제어합니다. 이러한 양식에서 단일 하위 폴더는 결합된 트리 요소로 압축됩니다. 예를 들어 Java 패키지 구조에 유용합니다.
	"explorer.compactFolders": true,

	// 파일을 휴지통에서 삭제할 때 탐색기에서 확인을 요청해야 할지를 제어합니다.
	"explorer.confirmDelete": true,

	// 끌어서 놓기를 사용하여 파일 및 폴더를 이동하기 위해 탐색기에서 확인을 요청해야 할지를 제어합니다.
	"explorer.confirmDragAndDrop": true,

	// 탐색기가 네이티브 파일 및 폴더를 붙여넣을 때 확인을 요청해야 하는지 여부를 제어합니다.
	"explorer.confirmPasteNative": true,

	// 탐색기가 실행 취소할 때 확인을 요청해야 하는지 여부를 제어합니다.
	//  - verbose: 탐색기는 모든 실행 취소 작업 전에 메시지를 표시합니다.
	//  - default: 탐색기는 파괴적인 실행 취소 작업 전에 메시지를 표시합니다.
	//  - light: 탐색기는 포커스가 있을 때 작업을 실행 취소하기 전에 메시지를 표시하지 않습니다.
	"explorer.confirmUndo": "default",

	// 파일 경로를 복사할 때 사용되는 경로 구분 문자입니다.
	//  - /: 슬래시를 경로 구분 문자로 사용하세요.
	//  - \: 백슬래시를 경로 분리 문자로 사용하세요.
	//  - auto: 운영 체제별 경로 구분 문자를 사용하세요.
	"explorer.copyPathSeparator": "auto",

	// 상대 파일 경로를 복사할 때 사용되는 경로 구분 문자입니다.
	//  - /: 슬래시를 경로 구분 문자로 사용하세요.
	//  - \: 백슬래시를 경로 분리 문자로 사용하세요.
	//  - auto: 운영 체제별 경로 구분 문자를 사용하세요.
	"explorer.copyRelativePathSeparator": "auto",

	// 파일 장식에 배지를 사용할지 여부를 제어합니다.
	"explorer.decorations.badges": true,

	// 파일 장식에 색을 사용할지 여부를 제어합니다.
	"explorer.decorations.colors": true,

	// 탐색기에서 끌어서 놓기를 통해 파일 및 폴더를 이동할지를 제어합니다. 이 설정은 탐색기 내에서 끌어서 놓기에만 영향을 미칩니다.
	"explorer.enableDragAndDrop": true,

	// 탐색기가 파일 및 폴더 작업 실행 취소를 지원해야 하는지 여부를 제어합니다.
	"explorer.enableUndo": true,

	// .gitignore의 항목을 구문 분석하고 탐색기에서 제외해야 하는지 여부를 제어합니다. `files.exclude`과(와) 비슷합니다.
	"explorer.excludeGitIgnore": false,

	// 초기화 중에 폴더가 하나만 포함된 다중 루트 작업 영역을 탐색기에서 확장해야 하는지 여부를 제어합니다.
	"explorer.expandSingleFolderWorkspaces": true,

	// 탐색기에서 파일 중첩을 사용할지 여부를 제어합니다. 파일 중첩을 사용하면 디렉터리의 관련 파일을 단일 상위 파일 아래에 시각적으로 그룹화할 수 있습니다.
	"explorer.fileNesting.enabled": false,

	// 파일 중첩이 자동으로 확장되는지 여부를 제어합니다. 이 작업을 적용하려면 `explorer.fileNesting.enabled`을(를) 설정해야 합니다.
	"explorer.fileNesting.expand": true,

	// 탐색기에서 파일 중첩을 제어합니다. 이를 적용하려면 `explorer.fileNesting.enabled`을(를) 설정해야 합니다. 각 __Item__은 상위 패턴을 나타내며 모든 문자열과 일치하는 단일 `*` 문자를 포함할 수 있습니다. 각 __Value__는 지정된 상위 항목 아래에 중첩되어 표시되어야 하는 하위 패턴의 쉼표로 구분된 목록을 나타냅니다. 하위 패턴에는 다음과 같은 몇 가지 특수 토큰이 포함될 수 있습니다.
	// - `${capture}`: 상위 패턴의 확인된 `*` 값과 일치
	// - `${basename}`: 상위 파일의 기본 이름과 일치, `file.ts`의 `file`
	// - `${extname}`: 상위 파일의 확장명과 일치, `file.ts`의 `ts
	// - `${dirname}`: 상위 파일의 디렉터리 이름과 일치, `src/file.ts`의 `src`
	// - `*`: 모든 문자열과 일치, 하위 패턴당 한 번만 사용할 수 있음
	"explorer.fileNesting.patterns": {
		"*.ts": "${capture}.js",
		"*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
		"*.jsx": "${capture}.js",
		"*.tsx": "${capture}.ts",
		"tsconfig.json": "tsconfig.*.json",
		"package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml, bun.lockb, bun.lock",
		"pubspec.yaml": "pubspec.lock,pubspec_overrides.yaml,.packages,.flutter-plugins,.flutter-plugins-dependencies,.metadata",
		"*.dart": "${capture}.g.dart"
	},

	// 붙여넣기에서 중복된 탐색기 항목에 새 이름을 지정할 때 사용할 명명 규칙을 제어합니다.
	//  - simple: 중복된 이름 끝에 "복사본"이라는 단어를 추가하고 뒤에 숫자를 붙일 수 있습니다.
	//  - smart: 중복된 이름 끝에 숫자를 추가합니다. 숫자가 이미 이름의 일부인 경우 숫자를 더 추가합니다.
	//  - disabled: 증분 이름 지정을 비활성화합니다. 같은 이름의 파일이 두 개 있는 경우 기존 파일을 덮어쓰라는 메시지가 표시됩니다.
	"explorer.incrementalNaming": "simple",

	// 편집기 열기 창에 미리 할당된 편집기 슬롯의 최소 수입니다. 0으로 설정하면 편집기 열기 창은 편집기 수에 따라 동적으로 크기가 조정됩니다.
	"explorer.openEditors.minVisible": 0,

	// 열린 편집기 창에서 편집기의 정렬 순서를 제어합니다.
	//  - editorOrder: 편집기가 편집기 탭이 표시된 것과 같은 순서로 정렬됩니다.
	//  - alphabetical: 편집기는 각 편집기 그룹 내에서 탭 이름을 기준으로 사전순으로 정렬됩니다.
	//  - fullPath: 편집기는 각 편집기 그룹 내의 전체 경로를 기준으로 사전순으로 정렬됩니다.
	"explorer.openEditors.sortOrder": "editorOrder",

	// 편집자 열기 창에 표시되는 초기 최대 편집자 수입니다. 이 제한을 초과하면 스크롤 막대가 표시되고 창 크기를 조정하여 더 많은 항목을 표시할 수 있습니다.
	"explorer.openEditors.visible": 9,

	// 탐색기에서 파일 및 폴더의 속성 기반 정렬을 제어합니다. `explorer.fileNesting.enabled`가 활성화되면 중첩된 파일의 정렬도 제어합니다.
	//  - default: 파일 및 폴더가 이름별로 정렬됩니다. 폴더가 파일 앞에 표시됩니다.
	//  - mixed: 파일 및 폴더가 이름별로 정렬됩니다. 파일이 폴더와 뒤섞입니다.
	//  - filesFirst: 파일 및 폴더가 이름별로 정렬됩니다. 파일이 폴더 앞에 표시됩니다.
	//  - type: 파일 및 폴더가 확장 형식별로 그룹화되고 이름별로 정렬됩니다. 폴더가 파일 앞에 표시됩니다.
	//  - modified: 파일 및 폴더가 마지막으로 수정한 날짜별로 내림차순 정렬됩니다. 폴더가 파일 앞에 표시됩니다.
	//  - foldersNestsFiles: 파일과 폴더는 이름별로 정렬됩니다. 폴더가 파일 앞에 표시됩니다. 중첩된 자식이 있는 파일이 다른 파일 앞에 표시됩니다.
	"explorer.sortOrder": "default",

	// Explorer에서 파일 및 폴더 이름의 사전 정렬을 제어합니다.
	//  - default: 대문자와 소문자는 함께 혼합됩니다.
	//  - upper: 대문자는 소문자 이름 앞에 함께 그룹화됩니다.
	//  - lower: 소문자는 대문자 이름 앞에 함께 그룹화됩니다.
	//  - unicode: 이름은 유니코드 순서로 정렬됩니다.
	"explorer.sortOrderLexicographicOptions": "default",

	// 파일 및 폴더 정렬 순서를 되돌릴지 여부를 제어합니다.
	"explorer.sortOrderReverse": false,

	// Specifies how to format absolute dates (e.g. using the `${date}` token) for the inline blame annotation, when not specified `gitlens.defaultDateFormat` is used. Use `full`, `long`, `medium`, `short`, or a custom format, e.g. `MMMM Do, YYYY h:mma`, similar to [Moment.js formats](https://momentjs.com/docs/#/displaying/format/)
	"gitlens.currentLine.dateFormat": null,

	// Specifies whether to provide an inline blame annotation for the current line, by default. Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current window
	"gitlens.currentLine.enabled": true,

	// Specifies the font family of the inline blame annotation
	"gitlens.currentLine.fontFamily": "",

	// Specifies the font size of the inline blame annotation
	"gitlens.currentLine.fontSize": 0,

	// Specifies the font style of the inline blame annotation
	"gitlens.currentLine.fontStyle": "normal",

	// Specifies the font weight of the inline blame annotation
	"gitlens.currentLine.fontWeight": "normal",

	// Specifies the format of the inline blame annotation. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting
	"gitlens.currentLine.format": "${author, }${agoOrDate}${' via  'pullRequest}${ • message|50?}",

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the inline blame annotation. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.currentLine.pullRequests.enabled": true,

	// Specifies whether the inline blame annotation can be scrolled into view when it is outside the viewport. **NOTE**: Setting this to `false` will inhibit the hovers from showing over the annotation; Set `gitlens.hovers.currentLine.over` to `line` to enable the hovers to show anywhere over the line.
	"gitlens.currentLine.scrollable": true,

	// Specifies the uncommitted changes format of the inline blame annotation. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting.
	// 
	// **NOTE**: Setting this to an empty string will disable inline blame annotations for uncommitted changes.
	"gitlens.currentLine.uncommittedChangesFormat": null,

	// The number of days (if enabled) to keep unused workspace cache data. Beyond this limit, cached workspace data may be removed.
	"java.configuration.workspaceCacheLimit": 90,

	// This setting is deprecated, please use 'java.jdt.ls.java.home' instead.
	// Specifies the folder path to the JDK (21 or more recent) used to launch the Java Language Server.
	// On Windows, backslashes must be escaped, i.e.
	// "java.home":"C:\\Program Files\\Java\\jdk-21.0_5"
	"java.home": null,

	// [Experimental] Specify whether to enable Android project importing. When set to `auto`, the Android support will be enabled in Visual Studio Code - Insiders.
	// 
	// **Note:** Only works for Android Gradle Plugin `3.2.0` or higher.
	"java.jdt.ls.androidSupport.enabled": "auto",

	// [Experimental] Enable Java AppCDS (Application Class Data Sharing) for improvements to extension activation. When set to `auto`, AppCDS will be enabled in Visual Studio Code - Insiders, and for pre-release versions.
	"java.jdt.ls.appcds.enabled": "auto",

	// Specifies the folder path to the JDK (21 or more recent) used to launch the Java Language Server. This setting will replace the Java extension's embedded JRE to start the Java Language Server. 
	// 
	// On Windows, backslashes must be escaped, i.e.
	// "java.jdt.ls.java.home":"C:\\Program Files\\Java\\jdk-21.0_5"
	"java.jdt.ls.java.home": null,

	// [Experimental] Specify whether to enable Javac-based compilation in the language server. Requires running this extension with Java 24
	"java.jdt.ls.javac.enabled": "off",

	// Whether to load lombok processors from project classpath
	"java.jdt.ls.lombokSupport.enabled": true,

	// Specify whether to automatically add Protobuf output source directories to the classpath.
	// 
	// **Note:** Only works for Gradle `com.google.protobuf` plugin `0.8.4` or higher.
	"java.jdt.ls.protobufSupport.enabled": true,

	// Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx2G -Xms100m -Xlog:disable` to optimize memory usage with the parallel garbage collector
	"java.jdt.ls.vmargs": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx2G -Xms100m -Xlog:disable",

	// The launch mode for the Java extension
	//  - Standard: Provides full features such as intellisense, refactoring, building, Maven/Gradle support etc.
	//  - LightWeight: Starts a syntax server with lower start-up cost. Only provides syntax features such as outline, navigation, javadoc, syntax errors.
	//  - Hybrid: Provides full features with better responsiveness. It starts a standard language server and a secondary syntax server. The syntax server provides syntax features until the standard server is ready.
	"java.server.launchMode": "Hybrid",

	// [Experimental] Specify whether to share indexes between different workspaces. When set to `auto`, shared indexes will be enabled in Visual Studio Code - Insiders.
	"java.sharedIndexes.enabled": "auto",

	// Specifies a common index location for all workspaces. See default values as follows:
	//  
	// Windows: First use `"$APPDATA\\.jdt\\index"`, or `"~\\.jdt\\index"` if it does not exist
	//  
	// macOS: `"~/Library/Caches/.jdt/index"`
	//  
	// Linux: First use `"$XDG_CACHE_HOME/.jdt/index"`, or `"~/.cache/.jdt/index"` if it does not exist
	"java.sharedIndexes.location": "",

	// Traces the communication between VS Code and the Java language server.
	"java.trace.server": "off",

	// Enable usage data and errors to be sent to Red Hat servers. Read our [privacy statement](https://developers.redhat.com/article/tool-data-collection).
	"redhat.telemetry.enabled": null,

	// Specifies the command to be executed when an _authors_ CodeLens is clicked
	//  - false: Disables click interaction
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Searches for commits within the range
	//  - gitlens.showQuickCommitDetails: Shows an Inspect quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit URL to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file URL to the clipboard (when available)
	"gitlens.codeLens.authors.command": "gitlens.toggleFileBlame",

	// Specifies whether to provide an _authors_ CodeLens, showing number of authors of the file or code block and the most prominent author (if there is more than one)
	"gitlens.codeLens.authors.enabled": true,

	// Specifies how to format absolute dates in the Git CodeLens, when not specified `gitlens.defaultDateFormat` is used. Use `full`, `long`, `medium`, `short`, or a custom format, e.g. `MMMM Do, YYYY h:mma`, similar to [Moment.js formats](https://momentjs.com/docs/#/displaying/format/)
	"gitlens.codeLens.dateFormat": null,

	// Specifies whether to provide any Git CodeLens, by default. Use the `Toggle Git CodeLens` command (`gitlens.toggleCodeLens`) to toggle the Git CodeLens on and off for the current window
	"gitlens.codeLens.enabled": true,

	// Specifies whether to provide any Git CodeLens on symbols that span only a single line
	"gitlens.codeLens.includeSingleLineSymbols": false,

	// Specifies the command to be executed when a _recent change_ CodeLens is clicked
	//  - false: Disables click interaction
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Shows the Inspect
	//  - gitlens.showQuickCommitDetails: Shows an Inspect quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit URL to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file URL to the clipboard (when available)
	"gitlens.codeLens.recentChange.command": "gitlens.showQuickCommitFileDetails",

	// Specifies whether to provide a _recent change_ CodeLens, showing the author and date of the most recent commit for the file or code block
	"gitlens.codeLens.recentChange.enabled": true,

	// Specifies where Git CodeLens will be shown in the document
	//  - document: Adds CodeLens at the top of the document
	//  - containers: Adds CodeLens at the start of container-like symbols (modules, classes, interfaces, etc)
	//  - blocks: Adds CodeLens at the start of block-like symbols (functions, methods, etc) lines
	"gitlens.codeLens.scopes": [
		"document",
		"containers"
	],

	// Deprecated. Use the per-language `gitlens.codeLens.scopes#` and `#gitlens.codeLens.symbolScopes` settings instead
	// 
	"gitlens.codeLens.scopesByLanguage": null,

	// Specifies a set of document symbols where Git CodeLens will or will not be shown in the document. Prefix with `!` to avoid providing a Git CodeLens for the symbol. Must be a member of `SymbolKind`
	"gitlens.codeLens.symbolScopes": [],

	// Specifies the string to be shown in place of the _authors_ CodeLens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.authorsOnly": "$(ellipsis)",

	// Specifies the string to be shown in place of both the _recent change_ and _authors_ CodeLens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": "$(ellipsis)",

	// Specifies the string to be shown in place of the _recent change_ CodeLens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": "$(ellipsis)",

	// Specifies the blame alignment in the status bar
	//  - left: Aligns to the left
	//  - right: Aligns to the right
	"gitlens.statusBar.alignment": "right",

	// Specifies the command to be executed when the blame status bar item is clicked
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.toggleCodeLens: Toggles Git CodeLens
	//  - gitlens.diffWithPrevious: Compares the current line commit with the previous
	//  - gitlens.diffWithWorking: Compares the current line commit with the working tree
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Shows the Inspect
	//  - gitlens.showQuickCommitDetails: Shows an Inspect quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit URL to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file URL to the clipboard (when available)
	"gitlens.statusBar.command": "gitlens.showQuickCommitDetails",

	// Specifies how to format absolute dates (e.g. using the `${date}` token) in the blame information in the status bar, when not specified `gitlens.defaultDateFormat` is used. Use `full`, `long`, `medium`, `short`, or a custom format, e.g. `MMMM Do, YYYY h:mma`, similar to [Moment.js formats](https://momentjs.com/docs/#/displaying/format/)
	"gitlens.statusBar.dateFormat": null,

	// Specifies whether to provide blame information in the status bar
	"gitlens.statusBar.enabled": true,

	// Specifies the format of the blame information in the status bar. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.statusBar.dateFormat` setting
	"gitlens.statusBar.format": "${author}, ${agoOrDate}${' via  'pullRequest}",

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the status bar. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.statusBar.pullRequests.enabled": true,

	// Specifies whether to avoid clearing the previous blame information when changing lines to reduce status bar "flashing"
	"gitlens.statusBar.reduceFlicker": true,

	// Specifies the format (in markdown) of hover shown over the blame information in the status bar. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.statusBar.tooltipFormat": "${avatar} &nbsp;__${author}__ &nbsp;$(history) ${ago} _(${date})_${' via  'pullRequest} ${message}${\n\n---\n\nfootnotes}\n\n${commands}",

	// 검색 보기에서 행의 작업 모음 위치를 제어합니다.
	//  - auto: 검색 보기가 좁을 때는 오른쪽에, 그리고 검색 보기가 넓을 때는 콘텐츠 바로 뒤에 작업 모음을 배치합니다.
	//  - right: 작업 모음을 항상 오른쪽에 배치합니다.
	"search.actionsPosition": "right",

	// 검색 결과를 축소 또는 확장할지 여부를 제어합니다.
	//  - auto: 결과가 10개 미만인 파일이 확장됩니다. 다른 파일은 축소됩니다.
	//  - alwaysCollapse
	//  - alwaysExpand
	"search.collapseResults": "alwaysExpand",

	// 검색 파일 장식에 배지를 사용할지 여부를 제어합니다.
	"search.decorations.badges": true,

	// 검색 파일 장식에서 색을 사용해야 하는지 여부를 제어합니다.
	"search.decorations.colors": true,

	// 기본 검색 결과 보기 모드를 제어합니다.
	//  - tree: 검색 결과를 트리로 표시합니다.
	//  - list: 검색 결과를 목록으로 표시합니다.
	"search.defaultViewMode": "list",

	// 전체 텍스트 검색에서 파일 및 폴더를 제외하고 빠른 열기에서 파일 및 폴더를 제외하도록 [GLOB 패턴](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)을 구성합니다. 빠른 열기에서 최근에 열린 목록에서 파일을 제외하려면 패턴이 절대 패턴이어야 합니다(예: '**/node_modules/**'). '#files.exclude#' 설정에서 모든 GLOB 패턴을 상속합니다.
	"search.exclude": {
		"**/node_modules": true,
		"**/bower_components": true,
		"**/*.code-search": true
	},

	// 닫힌 전자 필기장에 대한 전자 필기장 편집기 서식 있는 콘텐츠 결과를 표시합니다. 이 설정을 변경한 후 검색 결과를 새로 고치세요.
	"search.experimental.closedNotebookRichContentResults": false,

	// 검색하는 동안 symlink를 누를지 여부를 제어합니다.
	"search.followSymlinks": true,

	// 이 설정은 더 이상 사용되지 않습니다. 대신 검색 아이콘을 새 위치로 끌 수 있습니다.
	// 검색을 사이드바의 보기로 표시할지 또는 가로 간격을 늘리기 위해 패널 영역의 패널로 표시할지를 제어합니다.
	"search.location": "sidebar",

	// 검색 캐시는 종료되지 않는 확장 호스트에 보관되므로 이 설정은 더 이상 필요하지 않습니다.
	// 사용하도록 설정하면 searchService 프로세스가 1시간의 비활성 상태 이후 종료되지 않고 계속 유지됩니다. 메모리에 파일 검색 캐시가 유지됩니다.
	"search.maintainFileSearchCache": false,

	// 최대 검색 결과 수를 제어합니다. 이 값을 'null'(비어 있음)으로 설정하여 무제한 결과를 반환할 수 있습니다.
	"search.maxResults": 20000,

	// 검색 보기 또는 검색 편집기 중 새 `검색: 파일에서 찾기` 및 `폴더에서 찾기` 작업이 발생하는 위치를 제어합니다.
	//  - view: 패널 또는 사이드바의 검색 보기에서 검색합니다.
	//  - reuseEditor: 기존 검색 편집기(있는 경우)에서 검색합니다. 기존 검색 편집기가 없으면 새 검색 편집기에서 검색합니다.
	//  - newEditor: 새 검색 편집기에서 검색합니다.
	"search.mode": "view",

	// 다음에 열 때 마지막으로 빠른 검색에 입력한 내용을 복원할지 여부를 제어합니다.
	"search.quickAccess.preserveInput": false,

	// 필터링할 때 빠른 열기에서 편집기 기록의 정렬 순서를 제어합니다.
	//  - default: 기록 항목은 사용된 필터 값을 기준으로 관련성별로 정렬됩니다. 관련성이 더 높은 항목이 먼저 표시됩니다.
	//  - recency: 기록이 최신순으로 정렬됩니다. 가장 최근에 열람한 항목부터 표시됩니다.
	"search.quickOpen.history.filterSortOrder": "default",

	// Quick Open에 대한 파일 결과에 최근에 연 파일의 결과를 포함할지 여부입니다.
	"search.quickOpen.includeHistory": true,

	// Quick Open에 대한 파일 결과에 전역 기호 검색 결과를 포함할지 여부입니다.
	"search.quickOpen.includeSymbols": false,

	// 검색에 사용할 스레드 수입니다. 0으로 설정하면 엔진이 이 값을 자동으로 결정합니다.
	"search.ripgrep.maxThreads": 0,

	// 새 검색 편집기를 만들 때 사용할 둘러싸는 컨텍스트 줄의 기본 수입니다. `search.searchEditor.reusePriorSearchConfiguration`을 사용하는 경우, 이전 검색 편집기의 구성을 사용하려면 `null`(비어 있음)로 설정할 수 있습니다.
	"search.searchEditor.defaultNumberOfContextLines": 1,

	// 검색 편집기에서 결과를 두 번 클릭하는 효과를 구성합니다.
	//  - selectWord: 두 번 클릭하면 커서 아래에 있는 단어가 선택됩니다.
	//  - goToLocation: 두 번 클릭하면 활성 편집기 그룹에 결과가 열립니다.
	//  - openLocationToSide: 두 번 클릭하면 측면의 편집기 그룹에 결과가 열리고, 편집기 그룹이 없으면 새로 만듭니다.
	"search.searchEditor.doubleClickBehaviour": "goToLocation",

	// 검색이 트리거되면 검색 편집기 입력 대신 검색 편집기 결과에 포커스를 둡니다.
	"search.searchEditor.focusResultsOnSearch": false,

	// 사용하도록 설정하면 새 검색 편집기가 이전에 연 검색 편집기의 포함, 제외, 플래그를 다시 사용합니다.
	"search.searchEditor.reusePriorSearchConfiguration": false,

	// 검색 편집기에서 결과를 한 번 클릭하는 효과를 구성합니다.
	//  - default: 한 번 클릭해도 아무 작업도 수행되지 않습니다.
	//  - peekDefinition: 한 번 클릭하면 정의 피킹 창이 열립니다.
	"search.searchEditor.singleClickBehaviour": "default",

	// 입력할 때 모든 파일을 검색합니다.
	"search.searchOnType": true,

	// `search.searchOnType#`을(를) 사용하도록 설정하면 입력되는 문자와 검색 시작 사이의 시간 제한(밀리초)을 제어합니다. `#search.searchOnType`을(를) 사용하지 않도록 설정된 경우에는 아무런 효과가 없습니다.
	"search.searchOnTypeDebouncePeriod": 300,

	// 검색 보기에서 키워드 제안을 사용하도록 설정합니다.
	"search.searchView.keywordSuggestions": false,

	// 검색 보기에서 표시되는 의미 체계 검색 결과의 동작을 제어합니다.
	//  - manual: 의미 체계 검색 결과만 수동으로 요청합니다.
	//  - runOnEmpty: 텍스트 검색 결과가 없을 때만 의미 체계 결과를 자동으로 요청합니다.
	//  - auto: 검색할 때마다 의미 체계 결과를 자동으로 요청합니다.
	"search.searchView.semanticSearchBehavior": "manual",

	// 검색 보기에 포커스가 있을 때 검색 쿼리를 편집기의 선택한 텍스트로 업데이트합니다. 이 동작은 클릭 시 또는 `workbench.views.search.focus` 명령을 트리거할 때 발생합니다.
	"search.seedOnFocus": false,

	// 활성 편집기에 선택 항목이 없을 경우 커서에 가장 가까운 단어에서 시드 검색을 사용합니다.
	"search.seedWithNearestWord": false,

	// 검색 결과의 줄 번호를 표시할지 여부를 제어합니다.
	"search.showLineNumbers": false,

	// 패턴이 모두 소문자인 경우 대/소문자를 구분하지 않고 검색하고, 그렇지 않으면 대/소문자를 구분하여 검색합니다.
	"search.smartCase": false,

	// 검색 결과의 정렬 순서를 제어합니다.
	//  - default: 결과는 폴더 및 파일 이름의 알파벳 순으로 정렬됩니다.
	//  - fileNames: 결과는 폴더 순서를 무시하고 파일 이름별 알파벳 순으로 정렬됩니다.
	//  - type: 결과는 파일 확장자의 알파벳 순으로 정렬됩니다.
	//  - modified: 결과는 파일을 마지막으로 수정한 날짜의 내림차순으로 정렬됩니다.
	//  - countDescending: 결과는 파일별 개수의 내림차순으로 정렬됩니다.
	//  - countAscending: 결과는 파일별 개수의 오름차순으로 정렬됩니다.
	"search.sortOrder": "default",

	// 파일을 검색할 때 전역 gitignore 파일(예: '$HOME/.config/git/ignore')을 사용할지 여부를 제어합니다. `search.useIgnoreFiles`을(를) 사용하도록 설정해야 합니다.
	"search.useGlobalIgnoreFiles": false,

	// 파일을 검색할 때 '.gitignore' 파일 및 '.ignore' 파일을 사용할지 여부를 제어합니다.
	"search.useIgnoreFiles": true,

	// 파일을 검색할 때 부모 디렉터리에서 '.gitignore' 파일 및 '.ignore' 파일을 사용할지 여부를 제어합니다. `search.useIgnoreFiles`을(를) 사용하도록 설정해야 합니다.
	"search.useParentIgnoreFiles": false,

	// 사용되지 않습니다. PCRE2는 PCRE2에서만 지원하는 regex 기능을 사용할 경우 자동으로 사용됩니다.
	// 텍스트 검색에서 PCRE2 regex 엔진을 사용할지 여부입니다. 사용하도록 설정하면 lookahead 및 backreferences와 같은 몇 가지 고급 regex 기능을 사용할 수 있습니다. 하지만 모든 PCRE2 기능이 지원되지는 않으며, JavaScript에서도 지원되는 기능만 지원됩니다.
	"search.usePCRE2": false,

	// 일치하는 항목을 선택하거나 바꿀 때 미리 보기 바꾸기를 열지 여부를 제어합니다.
	"search.useReplacePreview": true,

	// 사용되지 않습니다. 고급 regex 기능을 지원하려면 "search.usePCRE2"를 사용해 보세요.
	// 이 설정은 사용되지 않으며 이제 "search.usePCRE2"로 대체됩니다.
	"search.useRipgrep": true,

	// Specifies whether to provide a _changes (diff)_ hover for all lines when showing blame annotations
	"gitlens.hovers.annotations.changes": true,

	// Specifies whether to provide a _commit details_ hover for all lines when showing blame annotations
	"gitlens.hovers.annotations.details": true,

	// Specifies whether to provide any hovers when showing blame annotations
	"gitlens.hovers.annotations.enabled": true,

	// Specifies when to trigger hovers when showing blame annotations
	//  - annotation: Only shown when hovering over the line annotation
	//  - line: Shown when hovering anywhere over the line
	"gitlens.hovers.annotations.over": "line",

	// Specifies whether to automatically link external resources in commit messages
	"gitlens.hovers.autolinks.enabled": true,

	// Specifies whether to lookup additional details about automatically link external resources in commit messages. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.hovers.autolinks.enhanced": true,

	// Specifies whether to show avatar images in hovers
	"gitlens.hovers.avatars": true,

	// Specifies the size of the avatar images in hovers
	"gitlens.hovers.avatarSize": 32,

	// Specifies whether to show just the changes to the line or the set of related changes in the _changes (diff)_ hover
	//  - line: Shows only the changes to the line
	//  - hunk: Shows the set of related changes
	"gitlens.hovers.changesDiff": "line",

	// Specifies whether to provide a _changes (diff)_ hover for the current line
	"gitlens.hovers.currentLine.changes": true,

	// Specifies whether to provide a _commit details_ hover for the current line
	"gitlens.hovers.currentLine.details": true,

	// Specifies whether to provide any hovers for the current line
	"gitlens.hovers.currentLine.enabled": true,

	// Specifies when to trigger hovers for the current line
	//  - annotation: Only shown when hovering over the line annotation
	//  - line: Shown when hovering anywhere over the line
	"gitlens.hovers.currentLine.over": "annotation",

	// Specifies the format (in markdown) of the _commit details_ hover. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.hovers.detailsMarkdownFormat": "${avatar} &nbsp;__${author}__ &nbsp;$(history) ${ago} _(${date})_${' via  'pullRequest} ${message}${\n\n---\n\nfootnotes}\n\n${commands}",

	// Specifies whether to provide any hovers
	"gitlens.hovers.enabled": true,

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the hovers. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.hovers.pullRequests.enabled": true,

	// Specifies the time (in milliseconds) to wait before re-blaming an unsaved document after an edit but before it is saved. Use 0 to specify an infinite wait. Only applies if the file is under the `gitlens.advanced.sizeThresholdAfterEdit`
	"gitlens.advanced.blame.delayAfterEdit": 5000,

	// Specifies the maximum document size (in lines) allowed to be re-blamed after an edit while still unsaved. Use 0 to specify no maximum
	"gitlens.advanced.blame.sizeThresholdAfterEdit": 5000,

	// Specifies whether the file annotations button in the editor title shows a menu or immediately toggles the specified file annotations
	//  - null: Shows a menu to choose which file annotations to toggle
	//  - blame: Toggles file blame annotations
	//  - heatmap: Toggles file heatmap annotations
	//  - changes: Toggles file changes annotations
	"gitlens.fileAnnotations.command": null,

	// Specifies whether pressing the `ESC` key dismisses the active file annotations
	"gitlens.fileAnnotations.dismissOnEscape": true,

	// Specifies whether file annotations will be preserved while editing. Use `gitlens.advanced.blame.delayAfterEdit` to control how long to wait before the annotation will update while the file is still dirty
	"gitlens.fileAnnotations.preserveWhileEditing": true,

	// 이 설정은 사용되지 않습니다. 'update.mode'을(를) 대신 사용하세요.
	// 자동 업데이트를 받을지 여부를 구성합니다. 변경 후 다시 시작해야 합니다. 업데이트는 Microsoft 온라인 서비스에서 가져옵니다.
	"update.channel": "default",

	// 새로운 VS Code 버전을 Windows 백그라운드에 다운로드 및 설치하려면 사용하도록 설정
	"update.enableWindowsBackgroundUpdates": true,

	// 자동 업데이트를 받을지 여부를 구성합니다. 변경 후 다시 시작해야 합니다. 업데이트는 Microsoft 온라인 서비스에서 가져옵니다.
	//  - none: 업데이트를 사용하지 않도록 설정합니다.
	//  - manual: 자동 백그라운드 업데이트 확인을 사용하지 않도록 설정합니다. 업데이트를 수동으로 확인하여 진행할 수 있습니다.
	//  - start: 시작할 때만 업데이트를 확인합니다. 자동 백그라운드 업데이트 검사를 사용하지 않도록 설정합니다.
	//  - default: 자동 업데이트 확인을 사용하도록 설정합니다. Code에서 정기적으로 업데이트를 자동 확인합니다.
	"update.mode": "default",

	// 업데이트 후 릴리스 노트를 표시합니다. 릴리스 노트는 Microsoft 온라인 서비스에서 가져옵니다.
	"update.showReleaseNotes": true,

	// AltGraph+ 한정자를 Ctrl+Alt+로 처리해야 하는지를 제어합니다.
	"keyboard.mapAltGrToCtrlAlt": false,

	// Specifies whether to show avatar images in the file blame annotations
	"gitlens.blame.avatars": true,

	// Specifies whether to compact (deduplicate) matching adjacent file blame annotations
	"gitlens.blame.compact": true,

	// Specifies how to format absolute dates (e.g. using the `${date}` token) in file blame annotations, when not specified `gitlens.defaultDateFormat` is used. Use `full`, `long`, `medium`, `short`, or a custom format, e.g. `MMMM Do, YYYY h:mma`, similar to [Moment.js formats](https://momentjs.com/docs/#/displaying/format/)
	"gitlens.blame.dateFormat": null,

	// Specifies the font family of the file blame annotations
	"gitlens.blame.fontFamily": "",

	// Specifies the font size of the file blame annotations
	"gitlens.blame.fontSize": 0,

	// Specifies the font style of the file blame annotations
	"gitlens.blame.fontStyle": "normal",

	// Specifies the font weight of the file blame annotations
	"gitlens.blame.fontWeight": "normal",

	// Specifies the format of the file blame annotations. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.blame.dateFormat` setting
	"gitlens.blame.format": "${message|50?} ${agoOrDate|14-}",

	// Specifies whether to provide a heatmap indicator in the file blame annotations
	"gitlens.blame.heatmap.enabled": true,

	// Specifies where the heatmap indicators will be shown in the file blame annotations
	//  - left: Adds a heatmap indicator on the left edge of the file blame annotations
	//  - right: Adds a heatmap indicator on the right edge of the file blame annotations
	"gitlens.blame.heatmap.location": "right",

	// Specifies whether to highlight lines associated with the current line
	"gitlens.blame.highlight.enabled": true,

	// Specifies where the associated line highlights will be shown
	//  - gutter: Adds an indicator to the gutter
	//  - line: Adds a full-line highlight background color
	//  - overview: Adds an indicator to the scroll bar
	"gitlens.blame.highlight.locations": [
		"gutter",
		"line",
		"overview"
	],

	// Specifies whether file blame annotations will be separated by a small gap
	"gitlens.blame.separateLines": true,

	// Specifies how the file blame annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.blame.toggleMode": "file",

	// Node.js의 페치 구현 대신 Electron의 페치 구현을 사용할지 여부를 제어합니다. 모든 로컬 확장은 전역 페치 API에 대한 Electron의 페치 구현을 가져옵니다.
	"http.electronFetch": false,

	// OS에서 CA 인증서의 실험적 로드를 사용하도록 설정할지 여부를 제어합니다. 기본 구현보다 더 일반적인 방법을 사용합니다. [remote development](https://aka.ms/vscode-remote) 동안 `http.useLocalProxyConfiguration` 설정을 사용하지 않도록 설정하는 경우 로컬 및 원격 설정에서 별도로 이 설정을 구성할 수 있습니다.
	"http.experimental.systemCertificatesV2": false,

	// 추가 지원을 통해 Node.js 가져오기 구현을 확장할지 여부를 제어합니다. 해당 설정을 사용하도록 설정하면 현재 프록시 지원(`http.proxySupport#`) 및 시스템 인증서(`#http.systemCertificates#`)가 추가됩니다. [remote development](https://aka.ms/vscode-remote) 동안 `#http.useLocalProxyConfiguration` 설정을 사용하지 않도록 설정하는 경우 로컬 및 원격 설정에서 별도로 이 설정을 구성할 수 있습니다.
	"http.fetchAdditionalSupport": true,

	// HTTP/HTTPS 요청에 대해 프록시 설정을 무시해야 하는 도메인 이름을 지정합니다. [remote development](https://aka.ms/vscode-remote) 동안 `http.useLocalProxyConfiguration` 설정을 사용하지 않도록 설정하는 경우 로컬 및 원격 설정에서 별도로 이 설정을 구성할 수 있습니다.
	"http.noProxy": [],

	// 사용할 프록시 설정입니다. 설정하지 않으면 'http_proxy' 및 'https_proxy' 환경 변수에서 상속됩니다. [remote development](https://aka.ms/vscode-remote) 동안 `http.useLocalProxyConfiguration` 설정을 사용하지 않도록 설정하는 경우 로컬 및 원격 설정에서 별도로 이 설정을 구성할 수 있습니다.
	"http.proxy": "",

	// 모든 네트워크 요청에 대해 'Proxy-Authorization' 헤더로 보낼 값입니다. [remote development](https://aka.ms/vscode-remote) 동안 `http.useLocalProxyConfiguration` 설정을 사용하지 않도록 설정하는 경우 로컬 및 원격 설정에서 별도로 이 설정을 구성할 수 있습니다.
	"http.proxyAuthorization": null,

	// Kerberos 인증에 대한 주 서비스 이름을 HTTP 프록시로 재정의합니다. 프록시 호스트 이름을 기반으로 하는 기본값은 설정되지 않은 경우에 사용됩니다. [remote development](https://aka.ms/vscode-remote) 동안 `http.useLocalProxyConfiguration` 설정을 사용하지 않도록 설정하는 경우 로컬 및 원격 설정에서 별도로 이 설정을 구성할 수 있습니다.
	"http.proxyKerberosServicePrincipal": "",

	// 제공된 CA 목록에 대해 프록시 서버 인증서를 확인해야 하는지 여부를 제어합니다. [remote development](https://aka.ms/vscode-remote) 동안 `http.useLocalProxyConfiguration` 설정을 사용하지 않도록 설정하는 경우 로컬 및 원격 설정에서 별도로 이 설정을 구성할 수 있습니다.
	"http.proxyStrictSSL": true,

	// 확장에 프록시 지원을 사용합니다. [remote development](https://aka.ms/vscode-remote) 동안 `http.useLocalProxyConfiguration` 설정을 사용하지 않도록 설정하는 경우 로컬 및 원격 설정에서 별도로 이 설정을 구성할 수 있습니다.
	//  - off: 확장에 대한 프록시 지원을 사용하지 않도록 설정합니다.
	//  - on: 확장에 대한 프록시 지원을 사용하도록 설정합니다.
	//  - fallback: 프록시를 찾을 수 없는 경우 확장에 대한 프록시 지원을 사용하도록 설정하고 요청 옵션으로 대체합니다.
	//  - override: 확장에 대한 프록시 지원을 사용하지 않도록 설정하고 요청 옵션을 재정의합니다.
	"http.proxySupport": "override",

	// OS에서 CA 인증서를 로드해야 하는지 여부를 제어합니다. Windows 및 macOS에서는 이 기능을 끈 후 창을 다시 로드해야 합니다. [remote development](https://aka.ms/vscode-remote) 동안 `http.useLocalProxyConfiguration` 설정을 사용하지 않도록 설정하는 경우 로컬 및 원격 설정에서 별도로 이 설정을 구성할 수 있습니다.
	"http.systemCertificates": true,

	// 원격 확장 호스트에서 로컬 프록시 구성을 사용할지 여부를 제어합니다. 이 설정은 [remote development](https://aka.ms/vscode-remote). 중에 원격 설정으로만 적용됩니다.
	"http.useLocalProxyConfiguration": true,

	// Specifies where the indicators of the file changes annotations will be shown
	//  - gutter: Adds an indicator to the gutter
	//  - line: Adds a full-line highlight background color
	//  - overview: Adds an indicator to the scroll bar
	"gitlens.changes.locations": [
		"gutter",
		"line",
		"overview"
	],

	// Specifies how the file changes annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.changes.toggleMode": "file",

	// Specifies the age of the most recent change (in days) after which the file heatmap annotations will be cold rather than hot (i.e. will use `gitlens.heatmap.coldColor#` instead of `#gitlens.heatmap.hotColor`)
	"gitlens.heatmap.ageThreshold": 90,

	// Specifies the base color of the file heatmap annotations when the most recent change is older (cold) than the `gitlens.heatmap.ageThreshold` value
	"gitlens.heatmap.coldColor": "#0a60f6",

	// Specifies the whether to fade out older lines
	"gitlens.heatmap.fadeLines": true,

	// Specifies the base color of the file heatmap annotations when the most recent change is newer (hot) than the `gitlens.heatmap.ageThreshold` value
	"gitlens.heatmap.hotColor": "#f66a0a",

	// Specifies where the indicators of the file heatmap annotations will be shown
	//  - gutter: Adds an indicator to the gutter
	//  - line: Adds a full-line highlight background color
	//  - overview: Adds an indicator to the scroll bar
	"gitlens.heatmap.locations": [
		"gutter",
		"overview"
	],

	// Specifies how the file heatmap annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.heatmap.toggleMode": "file",

	// 모든 파일에서 중단점을 설정할 수 있습니다.
	"debug.allowBreakpointsEverywhere": false,

	// getter와 같이 지연적으로 확인되는 변수가 디버거에 의해 자동으로 확인되고 확장되는지 여부를 제어합니다.
	//  - auto: 화면 읽기 프로그램 최적화 모드에서 지연 변수를 자동으로 확장합니다.
	//  - on: 항상 지연 변수를 자동으로 확장합니다.
	//  - off: 지연 변수를 자동으로 확장하지 않습니다.
	"debug.autoExpandLazyVariables": "auto",

	// 디버그 세션이 끝나면 해당 세션과 연결된 모든 읽기 전용 탭이 닫힙니다.
	"debug.closeReadonlyTabsOnEnd": false,

	// 활성 디버그 세션이 있는 경우 창이 닫힐 때 확인할지 여부를 제어합니다.
	//  - never: 절대 확인하지 마세요.
	//  - always: 디버그 세션이 있는지 항상 확인하세요.
	"debug.confirmOnExit": "never",

	// 디버그 콘솔에서 Enter를 누를 시 제안을 수락할지 여부를 제어합니다. Enter는 디버그 콘솔에 입력된 내용을 평가하는 데에도 사용됩니다.
	"debug.console.acceptSuggestionOnEnter": "off",

	// 디버그 세션을 종료할 때 디버그 콘솔을 자동으로 닫을지를 제어합니다.
	"debug.console.closeOnEnd": false,

	// 디버그 콘솔에서 같은 줄을 축소하고 발생 횟수를 배지로 표시해야 할지를 제어합니다.
	"debug.console.collapseIdenticalLines": true,

	// 디버그 콘솔에서 글꼴 패밀리를 제어합니다.
	"debug.console.fontFamily": "default",

	// 디버그 콘솔에서 글꼴 크기(픽셀)를 제어합니다.
	"debug.console.fontSize": 14,

	// 디버그 콘솔에서 이전에 입력한 항목을 제안할지 여부를 제어합니다.
	"debug.console.historySuggestions": true,

	// 디버그 콘솔에서 줄 높이(픽셀)를 제어합니다. 글꼴 크기에서 줄 높이를 계산하려면 0을 사용합니다.
	"debug.console.lineHeight": 0,

	// 디버그 콘솔에서 최대 줄 수를 제어합니다.
	"debug.console.maximumLines": 10000,

	// 디버그 콘솔에서 줄을 자동으로 바꿀지를 제어합니다.
	"debug.console.wordWrap": true,

	// 디스어셈블리 뷰에서 소스 코드를 표시합니다.
	"debug.disassemblyView.showSourceCode": true,

	// 디버거가 활성화된 경우 상태 표시줄의 색입니다.
	"debug.enableStatusBarColor": true,

	// 디버거가 중단될 때 편집기에 초점을 맞출지 여부를 제어합니다.
	"debug.focusEditorOnBreak": true,

	// 디버거가 중단될 때 워크벤치 창이 포커스를 받을지 여부를 제어합니다.
	"debug.focusWindowOnBreak": true,

	// 마우스 가운데 단추로 편집기 여백을 클릭할 때 수행할 작업을 제어합니다.
	//  - logpoint: Logpoint를 추가합니다.
	//  - conditionalBreakpoint: 조건부 중단점을 추가합니다.
	//  - triggeredBreakpoint: 트리거된 중단점을 추가합니다.
	//  - none: 아무 작업도 수행하지 마세요.
	"debug.gutterMiddleClickAction": "logpoint",

	// 디버깅이 활성화된 동안 '실행 및 디버그' 보기의 제목 표시줄에서 '디버깅 시작' 컨트롤을 숨깁니다. `debug.toolBarLocation`이(가) '도킹'되지 않은 경우에만 관련이 있습니다.
	"debug.hideLauncherWhileDebugging": false,

	// `preLaunchTask`가 한동안 실행 중일 때 표시되는 경고를 숨깁니다.
	"debug.hideSlowPreLaunchWarning": false,

	// 디버그하는 동안 편집기에서 변수 값을 인라인으로 표시합니다.
	//  - on: 디버그하는 동안 편집기에서 변수 값을 인라인으로 항상 표시합니다.
	//  - off: 디버그하는 동안 편집기에서 변수 값을 인라인으로 표시하지 않습니다.
	//  - auto: 언어에서 인라인 값 위치를 지원하는 경우 디버깅하는 동안 변수 값을 편집기에 인라인으로 표시합니다.
	"debug.inlineValues": "auto",

	// 내부 디버그 콘솔을 열어야 할 경우를 제어합니다.
	"debug.internalConsoleOptions": "openOnFirstSessionStart",

	// preLaunchTask를 실행한 후 오류가 발생할 때 수행할 작업을 제어합니다.
	//  - debugAnyway: 작업 오류를 무시하고 디버깅을 시작합니다.
	//  - showErrors: 문제 보기를 표시하고 디버깅을 시작하지 않습니다.
	//  - prompt: 프롬프트 사용자입니다.
	//  - abort: 디버깅을 취소합니다.
	"debug.onTaskErrors": "prompt",

	// 디버그 보기를 열 경우를 제어합니다.
	"debug.openDebug": "openOnDebugBreak",

	// 디버그 세션 끝에 자동으로 탐색기 뷰를 엽니다.
	"debug.openExplorerOnEnd": false,

	// 디버그 세션을 시작하기 전에 저장할 편집기를 제어합니다.
	//  - allEditorsInActiveGroup: 디버그 세션을 시작하기 전에 모든 편집기를 활성 그룹에 저장합니다.
	//  - nonUntitledEditorsInActiveGroup: 디버그 세션을 시작하기 전에 제목이 없는 편집기를 제외한 모든 편집기를 활성 그룹에 저장합니다.
	//  - none: 디버그 세션을 시작하기 전에 편집기를 저장하지 않습니다.
	"debug.saveBeforeStart": "allEditorsInActiveGroup",

	// 중단점을 개요 눈금자에 표시할지 여부를 제어합니다.
	"debug.showBreakpointsInOverviewRuler": false,

	// 디버깅하는 동안 인라인 중단점 후보 장식을 편집기에 표시할지 여부를 제어합니다.
	"debug.showInlineBreakpointCandidates": true,

	// 디버그 상태 표시줄을 표시할 경우를 제어합니다.
	//  - never: 상태 표시줄에 디버그 표시 안 함
	//  - always: 상태 표시줄에 디버그 항상 표시
	//  - onFirstSessionStart: 디버그를 처음으로 시작한 후에만 상태 표시줄에 디버그 표시
	"debug.showInStatusBar": "onFirstSessionStart",

	// 디버그 도구 모음에서 디버그 하위 세션을 표시할지 여부를 제어합니다. 이 설정이 false이면 하위 세션의 중지 명령이 부모 세션도 중지합니다.
	"debug.showSubSessionsInToolBar": false,

	// 디버그 세션 중 변수 창에 변수 형식 표시
	"debug.showVariableTypes": false,

	// 통합 또는 외부 터미널에서 새 디버그 세션을 시작하기 전에 터미널을 지우세요.
	"debug.terminal.clearBeforeReusing": false,

	// 디버그 도구 모음의 위치를 제어합니다. '부동'(모든 뷰), '고정'(디버그 뷰), 'commandCenter'(`window.commandCenter` 필요) 또는 '숨김'입니다.
	//  - floating: 모든 보기에서 디버그 도구 모음을 표시합니다.
	//  - docked: 디버그 보기에만 디버그 도구 모음을 표시합니다.
	//  - commandCenter: '(실험적)' 명령 센터에 디버그 도구 모음을 표시합니다.
	//  - hidden: 디버그 도구 모음을 표시하지 않습니다.
	"debug.toolBarLocation": "floating",

	// 전역 디버그 시작 구성입니다. 작업 영역에서 공유되는 'launch.json' 대신 사용되어야 합니다.
	"launch": {
		"configurations": [],
		"compounds": []
	},

	// 스레드가 확인될 때 주석 스레드를 축소할지 여부를 제어합니다.
	"comments.collapseOnResolve": true,

	// 주석 위젯이 스크롤되거나 확장되는지 여부를 제어합니다.
	"comments.maxHeight": true,

	// 이 설정은 'comments.openView'를 위해 사용되지 않습니다.
	// 주석 패널을 열어야 하는 경우를 제어합니다.
	"comments.openPanel": "openOnSessionStartWithComments",

	// 주석 뷰를 열어야 하는 시기를 제어합니다.
	//  - never: 주석 보기는 열리지 않습니다.
	//  - file: 메모가 있는 파일이 활성 상태이면 메모 보기가 열립니다.
	//  - firstFile: 이 세션 중에 메모 보기가 아직 열리지 않은 경우 메모가 있는 파일이 활성 상태인 세션 중에 처음으로 열립니다.
	//  - firstFileUnresolved: 이 세션 중에 주석 보기가 아직 열리지 않았고 주석이 해결되지 않은 경우 주석이 있는 파일이 활성 상태인 세션 중에 처음으로 열립니다.
	"comments.openView": "firstFile",

	// 주석 스레드를 축소할 때 확인 대화 상자를 표시할지 여부를 제어합니다.
	//  - whenHasUnsubmittedComments: 제출되지 않은 주석이 있는 주석 스레드를 축소할 때 확인 대화 상자를 표시합니다.
	//  - never: 주석 스레드를 축소할 때 확인 대화 상자를 표시하지 않습니다.
	"comments.thread.confirmOnCollapse": "whenHasUnsubmittedComments",

	// 상대 시간이 메모 타임스탬프(예: '1일 전')에 사용될지 여부를 결정합니다.
	"comments.useRelativeTime": true,

	// 댓글 범위 및 댓글이 있는 편집기에서 댓글 표시줄 및 댓글 스레드의 표시 여부를 제어합니다. 댓글은 여전히 ​​댓글 보기를 통해 액세스할 수 있으며 "댓글: 편집기 댓글 달기 전환" 명령을 실행하여 댓글을 토글하는 것과 같은 방식으로 댓글이 켜집니다.
	"comments.visible": true,

	// HTML 태그의 자동 닫기를 사용하거나 사용하지 않습니다.
	"html.autoClosingTags": true,

	// HTML 속성 할당을 위한 따옴표 자동 생성을 사용하도록/사용하지 않도록 설정합니다. 따옴표의 유형은 `html.completion.attributeDefaultValue`로 구성할 수 있습니다.
	"html.autoCreateQuotes": true,

	// 완료가 수락되는 경우 특성의 기본값을 제어합니다.
	//  - doublequotes: 특성 값이 ""(으)로 설정됩니다.
	//  - singlequotes: 특성 값이 ''(으)로 설정되어 있습니다.
	//  - empty: 특성 값이 설정되지 않았습니다.
	"html.completion.attributeDefaultValue": "doublequotes",

	// [사용자 지정 데이터 형식](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md)에 따라 JSON 파일을 가리키는 상대 파일 경로의 목록입니다.
	// 
	// VS Code는 시작 시 사용자 지정 데이터를 로드하여 JSON 파일에 지정하는 사용자 지정 HTML 태그, 특성 및 특성 값에 대한 HTML 지원을 향상합니다.
	// 
	// 파일 경로는 작업 영역에 상대적이며 작업 영역 폴더 설정만 고려됩니다.
	"html.customData": [],

	// 쉼표로 분리된 태그 목록으로, 콘텐츠의 서식을 다시 지정해서는 안 됩니다. 'pre' 태그의 기본값은 'null'로 설정됩니다.
	"html.format.contentUnformatted": "pre,code,textarea",

	// 기본 HTML 포맷터를 사용하거나 사용하지 않도록 설정합니다.
	"html.format.enable": true,

	// 쉼표로 분리된 태그 목록으로 앞에 줄 바꿈을 추가로 넣어야 합니다. '"head, body, /html"'의 기본값은 'null'로 설정됩니다.
	"html.format.extraLiners": "head, body, /html",

	// `{{#foo}}` 및 `{{/foo}}`를 서식 지정하고 들여쓰기합니다.
	"html.format.indentHandlebars": false,

	// '<head>' 및 '<body>' 섹션을 들여씁니다.
	"html.format.indentInnerHtml": false,

	// 청크 한 개에 유지할 수 있는 최대 줄 바꿈 수입니다. 무제한일 때는 'null'을 사용합니다.
	"html.format.maxPreserveNewLines": null,

	// 요소 앞에 있는 기존 줄 바꿈을 유지해야 하는지 제어합니다. 요소 앞에만 적용되며 태그 안에서나 텍스트에는 적용되지 않습니다.
	"html.format.preserveNewLines": true,

	// django, erb, handlebars 및 php 템플릿 언어 태그를 사용합니다.
	"html.format.templating": false,

	// 쉼표로 분리된 태그 목록으로, 서식을 다시 지정해서는 안 됩니다. https://www.w3.org/TR/html5/dom.html#phrasing-content에 나열된 모든 태그의 기본값은 'null'로 설정됩니다.
	"html.format.unformatted": "wbr",

	// 이 문자열 간에 텍스트 콘텐츠를 함께 유지합니다.
	"html.format.unformattedContentDelimiter": "",

	// 특성을 래핑합니다.
	//  - auto: 줄 길이를 초과하는 경우에만 특성을 래핑합니다.
	//  - force: 첫 번째 특성을 제외한 각 특성을 래핑합니다.
	//  - force-aligned: 첫 번째 특성을 제외한 각 특성을 래핑하고 정렬된 상태를 유지합니다.
	//  - force-expand-multiline: 각 특성을 래핑합니다.
	//  - aligned-multiple: 줄 길이를 초과하는 경우 줄 바꿈하여 특성을 세로로 정렬합니다.
	//  - preserve: 특성 줄 바꿈을 유지합니다.
	//  - preserve-aligned: 특성의 줄 바꿈을 유지하되 정렬합니다.
	"html.format.wrapAttributes": "auto",

	// 래핑된 속성을 N자 이후로 들여씁니다. 기본 들여쓰기 크기를 사용하려면 'null'을 사용하세요. `html.format.wrapAttributes`가 `aligned`(정렬)로 설정된 경우 무시됩니다.
	"html.format.wrapAttributesIndentSize": null,

	// 한 줄당 최대 문자 수입니다(0 = 사용 안 함).
	"html.format.wrapLineLength": 120,

	// 가리킬 때 태그 및 특성 설명서를 표시합니다.
	"html.hover.documentation": true,

	// 가리킬 때 MDN에 대한 참조를 표시합니다.
	"html.hover.references": true,

	// 사용되지 않으며, 대신 `editor.linkedEditing`이 사용됩니다.
	// 일치하는 HTML 태그에서 미러링 커서를 활성화/비활성화합니다.
	"html.mirrorCursorOnMatchingTag": false,

	// 기본으로 제공하는 HTML 언어 지원에서 HTML5 태그와 속성 및 값을 제안할지 여부를 제어합니다.
	"html.suggest.html5": true,

	// VS Code와 HTML 언어 서버 간 통신을 추적합니다.
	"html.trace.server": "off",

	// 기본으로 제공하는 HTML 언어 지원에서 포함된 스크립트 유효성을 검사할지 여부를 제어합니다.
	"html.validate.scripts": true,

	// 기본으로 제공하는 HTML 언어 지원에서 포함된 스타일의 유효성을 검사할지 여부를 제어합니다.
	"html.validate.styles": true,

	// `json.colorDecorators.enable` 설정은 `editor.colorDecorators`를 위해 사용되지 않습니다.
	// 색 데코레이터 사용 또는 사용 안 함
	"json.colorDecorators.enable": true,

	// 기본 JSON 포맷터를 사용하거나 사용하지 않습니다.
	"json.format.enable": true,

	// 서식을 지정할 때 기존의 모든 새 줄을 유지합니다.
	"json.format.keepLines": false,

	// 계산된 최대 윤곽선 기호 및 폴딩 영역의 수입니다(성능상의 이유로 제한됨).
	"json.maxItemsComputed": 5000,

	// 사용하도록 설정하면 http 및 https 위치에서 JSON 스키마를 페치할 수 있습니다.
	"json.schemaDownload.enable": true,

	// 현재 프로젝트에서 스키마를 JSON 파일에 연결합니다.
	"json.schemas": [],

	// VS Code와 JSON 언어 서버 간 통신을 추적합니다.
	"json.trace.server": "off",

	// JSON 유효성 검사를 사용하거나 사용하지 않도록 설정합니다.
	"json.validate.enable": true,

	// 복사/붙여넣기 또는 끌어서 놓기로 만든 파일의 경로와 파일 이름을 설정합니다. 새 파일을 만들어야 하는 대상 경로에 대한 Markdown 문서 경로와 일치하는 GLOB 맵입니다.
	// 
	// 대상 경로는 다음 변수를 사용할 수 있습니다.
	// 
	// - '${documentDirName}' — Markdown 문서의 절대 부모 디렉터리 경로입니다(예: '/Users/me/myProject/docs').
	// - '${documentRelativeDirName}' — Markdown 문서의 상대 부모 디렉터리 경로입니다(예: 'docs'). 파일이 작업 영역의 일부가 아닌 경우 '${documentDirName}'과(와) 동일합니다.
	// - '${documentFileName}' — Markdown 문서의 전체 파일 이름입니다(예: 'README.md').
	// - '${documentBaseName}' — Markdown 문서의 기본 이름입니다(예: 'README').
	// - '${documentExtName}' — Markdown 문서의 확장입니다(예: 'md').
	// - '${documentFilePath}' — Markdown 문서의 절대 경로입니다(예: '/Users/me/myProject/docs/README.md').
	// - '${documentRelativeFilePath}' — Markdown 문서의 상대 경로입니다(예: 'docs/README.md'). 파일이 작업 영역의 일부가 아닌 경우 '${documentFilePath}'과(와) 동일합니다.
	// - '${documentWorkspaceFolder}' — Markdown 문서의 작업 영역 폴더입니다(예: '/Users/me/myProject'). 파일이 작업 영역의 일부가 아닌 경우 '${documentDirName}'과(와) 동일합니다.
	// - '${fileName}' — 삭제된 파일의 파일 이름입니다(예: 'image.png').
	// - '${fileExtName}' — 삭제된 파일의 확장명입니다(예: 'png').
	// - '${unixTime}' - 현재 Unix 타임스탬프입니다(밀리초 단위).
	// - '${isoTime}' — ISO 8601 형식의 현재 시간입니다(예: '2025-06-06T08:40:32.123Z').
	"markdown.copyFiles.destination": {},

	// 놓기 또는 붙여넣기로 만든 파일이 기존 파일을 덮어쓸지 여부를 제어합니다.
	//  - nameIncrementally: 이름이 같은 파일이 이미 있는 경우 파일 이름에 숫자를 추가합니다(예: 'image.png'는 'image-1.png'가 됩니다.).
	//  - overwrite: 이름이 같은 파일이 이미 있는 경우 덮어씁니다.
	"markdown.copyFiles.overwriteBehavior": "nameIncrementally",

	// Markdown 편집기에 놓인 작업 영역 외부의 파일을 작업 영역으로 복사할지 여부를 제어합니다.
	// 
	// `markdown.copyFiles.destination`을 사용하여 복사한 파일을 만들 위치를 구성합니다.
	//  - mediaFiles: 외부 이미지 및 비디오 파일을 작업 영역에 복사해 봅니다.
	//  - never: 외부 파일을 작업 영역에 복사하지 마세요.
	"markdown.editor.drop.copyIntoWorkspace": "mediaFiles",

	// Shift 키를 누른 상태에서 Markdown 편집기에 파일 놓기를 설정합니다. '#editor.dropIntoEditor.enabled#'을 사용하도록 설정해야 합니다.
	//  - always: 항상 Markdown 링크를 삽입합니다.
	//  - smart: 코드 블록 또는 다른 특수 요소에 드롭하지 않을 때 기본적으로 Markdown 링크를 스마트하게 만듭니다. 드롭 위젯을 사용하여 일반 텍스트로 붙여넣기 또는 Markdown 링크로 붙여넣기 간에 전환합니다.
	//  - never: Markdown 링크를 만들지 않습니다.
	"markdown.editor.drop.enabled": "smart",

	// Markdown에 오디오를 추가할 때 사용되는 코드 조각입니다. 이 코드 조각은 다음 변수를 사용할 수 있습니다.
	// - `${src}` - 오디오 파일의 확인된 경로입니다.
	// - `${title}` - 오디오에 사용되는 제목입니다. 이 변수에 대한 코드 조각 자리 표시자가 자동으로 만들어집니다.
	"markdown.editor.filePaste.audioSnippet": "<audio controls src=\"${src}\" title=\"${title}\"></audio>",

	// Markdown 편집기에 붙여넣은 작업 영역 외부의 파일을 작업 영역으로 복사할지 여부를 제어합니다.
	// 
	// `markdown.copyFiles.destination`을 사용하여 복사한 파일을 만들 위치를 구성합니다.
	//  - mediaFiles: 외부 이미지 및 비디오 파일을 작업 영역에 복사해 봅니다.
	//  - never: 외부 파일을 작업 영역에 복사하지 마세요.
	"markdown.editor.filePaste.copyIntoWorkspace": "mediaFiles",

	// Markdown 편집기에 파일을 붙여넣어 Markdown 링크를 만들 수 있습니다. `#editor.pasteAs.enabled#를 활성화해야 합니다.
	//  - always: 항상 Markdown 링크를 삽입합니다.
	//  - smart: 코드 블록 또는 다른 특수 요소에 붙여넣지 않을 때 기본적으로 Markdown 링크를 스마트하게 만듭니다. 붙여넣기 위젯을 사용하여 일반 텍스트로 붙여넣기 또는 Markdown 링크로 붙여넣기 간에 전환합니다.
	//  - never: Markdown 링크를 만들지 않습니다.
	"markdown.editor.filePaste.enabled": "smart",

	// Markdown에 비디오를 추가할 때 사용되는 코드 조각입니다. 이 코드 조각은 다음 변수를 사용할 수 있습니다.
	// - `${src}` - 비디오 파일의 확인된 경로입니다.
	// - `${title}` - 비디오에 사용되는 제목입니다. 이 변수에 대한 코드 조각 자리 표시자가 자동으로 만들어집니다.
	"markdown.editor.filePaste.videoSnippet": "<video controls src=\"${src}\" title=\"${title}\"></video>",

	// URL을 Markdown 편집기에 붙여넣을 때 Markdown 링크가 만들어지는지 여부를 제어합니다. '#editor.pasteAs.enabled#'을 사용하도록 설정해야 합니다.
	//  - always: 항상 Markdown 링크를 삽입합니다.
	//  - smart: 코드 블록 또는 다른 특수 요소에 붙여넣지 않을 때 기본적으로 Markdown 링크를 스마트하게 만듭니다. 붙여넣기 위젯을 사용하여 일반 텍스트로 붙여넣기 또는 Markdown 링크로 붙여넣기 간에 전환합니다.
	//  - smartWithSelection: 텍스트를 선택했고 코드 블록이나 기타 특수 요소에 붙여넣지 않는 경우 기본적으로 스마트 Markdown 링크를 생성합니다. 붙여넣기 위젯을 사용하여 일반 텍스트로 붙여넣기 또는 Markdown 링크로 붙여넣기 간에 전환합니다.
	//  - never: Markdown 링크를 만들지 않습니다.
	"markdown.editor.pasteUrlAsFormattedLink.enabled": "smartWithSelection",

	// Markdown 편집기 간에 복사하여 붙여넣은 텍스트의 링크 및 참조를 업데이트하는 붙여넣기 옵션을 사용/사용 안 함으로 설정합니다.
	// 
	// 이 기능을 사용하려면 업데이트 가능한 링크가 포함된 텍스트를 붙여넣은 후 붙여넣기 위젯을 클릭하고 '붙여넣은 링크 붙여넣기 및 업데이트'를 선택하기만 하면 됩니다.
	"markdown.editor.updateLinksOnPaste.enabled": true,

	// Markdown 파일의 링크를 열어야 하는 위치를 제어합니다.
	//  - currentGroup: 활성 편집기 그룹에서 링크를 엽니다.
	//  - beside: 활성 편집기 옆에 있는 링크를 엽니다.
	"markdown.links.openLocation": "currentGroup",

	// 현재 문서에서 링크 항목 강조 표시를 사용하도록 설정합니다.
	"markdown.occurrencesHighlight.enabled": false,

	// markdown 파일 링크에 파일 확장명(예: `.md`)이 추가되는지 여부를 제어합니다. 이 설정은 경로 완성 또는 파일 이름 바꾸기와 같은 도구를 사용하여 파일 경로를 추가할 때 사용됩니다.
	//  - auto: 기존 경로인 경우 파일 확장명 형식을 유지하려고 합니다. 새 경로인 경우 파일 확장명을 추가합니다.
	//  - includeExtension: 파일 확장명 포함을 선호합니다. 예를 들어 이름이 `file.md`인 파일에 대한 경로 완성은 `file.md`를 삽입합니다.
	//  - removeExtension: 파일 확장명 제거를 선호합니다. 예를 들어 이름이 `file.md`인 파일에 대한 경로 완성은 `.md` 없이 `file`을 삽입합니다.
	"markdown.preferredMdPathExtensionStyle": "auto",

	// Markdown 미리 보기에서 줄 바꿈을 렌더링하는 방식을 설정합니다. 'true'로 설정하면 단락 안의 줄 바꿈에 대해 '<br>'이(가) 생성됩니다.
	"markdown.preview.breaks": false,

	// Markdown 미리 보기에서 두 번 클릭하여 편집기로 전환합니다.
	"markdown.preview.doubleClickToSwitchToEditor": true,

	// Markdown 미리 보기에서 사용되는 글꼴 패밀리를 제어합니다.
	"markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",

	// Markdown 미리 보기에서 사용되는 글꼴 크기(픽셀)를 제어합니다.
	"markdown.preview.fontSize": 14,

	// Markdown 미리 보기에 사용되는 줄 높이를 제어합니다. 이 숫자는 글꼴 크기에 상대적입니다.
	"markdown.preview.lineHeight": 1.6,

	// Markdown 미리 보기에서 URL과 유사한 텍스트를 링크로 변환합니다.
	"markdown.preview.linkify": true,

	// Markdown 미리 보기에 현재 편집기 선택을 표시합니다.
	"markdown.preview.markEditorSelection": true,

	// Markdown 미리 보기에서 다른 Markdown 파일의 링크를 여는 방법을 제어합니다.
	//  - inPreview: Markdown 미리 보기에서 링크를 열어 보세요.
	//  - inEditor: 편집기에서 링크를 열어 보세요.
	"markdown.preview.openMarkdownLinks": "inPreview",

	// Markdown 미리 보기를 스크롤할 때 편집기의 보기를 업데이트합니다.
	"markdown.preview.scrollEditorWithPreview": true,

	// Markdown 편집기를 스크롤할 때 미리 보기의 보기를 업데이트합니다.
	"markdown.preview.scrollPreviewWithEditor": true,

	// Markdown 미리 보기에서 언어 중립적인 대체 및 인용 부호를 사용하도록 설정합니다.
	"markdown.preview.typographer": false,

	// Markdown 언어 서버의 로깅 수준을 제어합니다.
	"markdown.server.log": "off",

	// Markdown 미리 보기에서 사용할 CSS 스타일시트의 URL 또는 로컬 경로 목록입니다. 상대 경로는 Explorer에서 열린 폴더를 기준으로 해석됩니다. 열린 폴더가 없으면 Markdown 파일의 위치를 기준으로 해석됩니다. 모든 '\'는 '\\'로 써야 합니다.
	"markdown.styles": [],

	// Markdown 파일에서 링크를 작성하는 동안 경로 제안을 사용하도록 설정합니다.
	"markdown.suggest.paths.enabled": true,

	// 현재 작업 영역의 다른 Markdown 파일에서 헤더에 대한 제안을 사용하도록 설정합니다. 이러한 제안 중 하나를 수락하면 헤더 전체 경로(예: '[link text](/path/to/file.md#header)')가 해당 파일에 삽입됩니다.
	//  - never: 작업 영역 헤더 제안을 사용하지 않습니다.
	//  - onDoubleHash: 경로에 '##'을 입력한 후 작업 영역 헤더 제안을 사용합니다. 예: '[link text](##'.
	//  - onSingleOrDoubleHash: 경로에 '##' 또는 '#'을 입력한 후 작업 영역 헤더 제안을 사용합니다. 예: '[link text](#' 또는 '[link text](##'.
	"markdown.suggest.paths.includeWorkspaceHeaderCompletions": "onDoubleHash",

	// VS Code와 Markdown 언어 서버 간 통신을 추적합니다.
	"markdown.trace.server": "off",

	// 작업 영역에서 파일 이름 변경/이동 시 Markdown 파일의 링크를 업데이트해 보세요. 링크 업데이트를 트리거하는 파일을 구성하려면 `markdown.updateLinksOnFileMove.include`를 사용하세요.
	//  - prompt: 각 파일 이동에 대한 프롬프트입니다.
	//  - always: 링크를 항상 자동으로 업데이트합니다.
	//  - never: 링크를 업데이트하지 않고 메시지를 표시하지 마세요.
	"markdown.updateLinksOnFileMove.enabled": "never",

	// 작업 영역에서 디렉터리를 이동하거나 이름을 바꿀 때 링크를 업데이트할 수 있도록 설정합니다.
	"markdown.updateLinksOnFileMove.enableForDirectories": true,

	// 자동 링크 업데이트를 트리거하는 파일을 지정하는 GLOB 패턴입니다. 이 기능에 대한 자세한 내용은 '#markdown.updateLinksOnFileMove.enabled#'를 참조하세요.
	"markdown.updateLinksOnFileMove.include": [
		"**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
		"**/*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif,tiff,svg,mp4}"
	],

	// 현재 파일에서 중복된 정의의 유효성을 검사합니다.
	"markdown.validate.duplicateLinkDefinitions.enabled": "warning",

	// Markdown 파일에서 모든 오류 보고를 사용하도록 설정합니다.
	"markdown.validate.enabled": false,

	// Markdown 파일에서 다른 파일로 연결되는 링크의 유효성을 검사합니다(예: `[link](/path/to/file.md)`). 이를 통해 대상 파일이 존재하는지 확인할 수 있습니다. `markdown.experimental.validate.enabled`를 사용하도록 설정해야 합니다.
	"markdown.validate.fileLinks.enabled": "warning",

	// Markdown 파일에서 다른 파일의 헤더로 연결되는 링크의 조각 부분 유효성을 확인합니다(예: `[link](/path/to/file.md#header)`). 기본적으로 `markdown.validate.fragmentLinks.enabled`에서 설정 값을 상속합니다.
	"markdown.validate.fileLinks.markdownFragmentLinks": "inherit",

	// 현재 Markdown 파일의 헤더로 연결되는 조각 링크의 유효성을 검사합니다(예: `[link](#header)`). `markdown.validate.enabled`를 사용하도록 설정해야 합니다.
	"markdown.validate.fragmentLinks.enabled": "warning",

	// 유효성을 검사하지 않아야 하는 링크를 구성합니다. 예를 들어 `/about` 추가는 `[about](/about)` 링크의 유효성을 검사하지 않으며, glob `/assets/**/*.svg`를 사용하면 `assets` 디렉터리 아래의 `.svg` 파일로 연결되는 모든 링크에 대한 유효성 검사를 건너뛸 수 있습니다.
	"markdown.validate.ignoredLinks": [],

	// Markdown 파일에서 참조 링크(예: `[link][ref]`)의 유효성을 검사합니다. `markdown.validate.enabled`를 사용하도록 설정해야 합니다.
	"markdown.validate.referenceLinks.enabled": "warning",

	// 현재 파일에서 사용되지 않는 링크 정의의 유효성을 검사합니다.
	"markdown.validate.unusedLinkDefinitions.enabled": "hint",

	// 기본 제공 PHP 언어 제안을 사용하는지 여부를 구성합니다. 지원에서는 PHP 전역 및 변수를 제안합니다.
	"php.suggest.basic": true,

	// 기본 제공 PHP 유효성 검사를 사용하거나 사용하지 않습니다.
	"php.validate.enable": true,

	// PHP 실행 파일을 가리킵니다.
	"php.validate.executablePath": null,

	// 저장 시 또는 입력 시 Linter의 실행 여부입니다.
	"php.validate.run": "onSave",

	// Please use 'java.import.generatesMetadataFilesAtProjectRoot' to control whether to generate the project metadata files at the project root. And use 'files.exclude' to control whether to hide the project metadata files from the file explorer.
	// Controls whether to exclude extension-generated project settings files (.project, .classpath, .factorypath, .settings/) from the file explorer.
	"java.configuration.checkProjectSettingsExclusions": false,

	// Specifies how modifications on build files update the Java classpath/configuration
	"java.configuration.updateBuildConfiguration": "interactive",

	// Configure glob patterns for excluding folders. Use `!` to negate patterns to allow subfolders imports. You have to include a parent directory. The order is important.
	"java.import.exclusions": [
		"**/node_modules/**",
		"**/.metadata/**",
		"**/archetype-resources/**",
		"**/META-INF/maven/**"
	],

	// Specify whether the project metadata files(.project, .classpath, .factorypath, .settings/) will be generated at the project root. Click [HERE](command:_java.metadataFilesGeneration) to learn how to change the setting to make it take effect.
	"java.import.generatesMetadataFilesAtProjectRoot": false,

	// [Experimental] Specifies how to select build configuration files to import. 
	// Note: Currently, `Gradle` projects cannot be partially imported.
	//  - manual: Manually select the build configuration files.
	//  - automatic: Let extension automatically scan and select the build configuration files.
	"java.import.projectSelection": "automatic",

	// Project encoding settings
	//  - ignore: Ignore project encoding settings
	//  - warning: Show warning if a project has no explicit encoding set
	//  - setDefault: Set the default workspace encoding settings
	"java.project.encoding": "ignore",

	// Enable/disable the server-mode switch information, when Java projects import is skipped on startup.
	"java.project.importHint": true,

	// Specifies whether to import the Java projects, when opening the folder in Hybrid mode for the first time.
	"java.project.importOnFirstTimeStartup": "automatic",

	// Excludes files and folders from being refreshed by the Java Language Server, which can improve the overall performance. For example, ["node_modules","\.git"] will exclude all files and folders named `node_modules` or `.git`. Pattern expressions must be compatible with `java.util.regex.Pattern`. Defaults to ["node_modules","\.git"].
	"java.project.resourceFilters": [
		"node_modules",
		"\\.git"
	],

	// Automatically show build status on startup.
	"java.showBuildStatusOnStart.enabled": "notification",

	// JSX 태그의 자동 닫기를 사용하거나 사용하지 않도록 설정합니다.
	"javascript.autoClosingTags": true,

	// 대신 ‘원본 정의로 이동’을 트리거하여 가능한 경우 ‘정의로 이동’ 작업이 유형 선언 파일을 사용하지 않도록 합니다. 이렇게 하면 ‘원본 정의로 이동’이 마우스 제스처로 트리거될 수 있습니다.
	"javascript.preferGoToSourceDefinition": false,

	// JavaScript 파일에서 CodeLense 참조를 사용/사용 안 함으로 설정합니다.
	"javascript.referencesCodeLens.enabled": false,

	// JavaScript 파일의 모든 기능에 대한 참조 CodeLens를 사용/사용하지 않도록 설정합니다.
	"javascript.referencesCodeLens.showOnAllFunctions": false,

	// 편집기에서 JavaScript 파일에 대한 제안 진단을 사용하거나 사용하지 않도록 설정합니다.
	"javascript.suggestionActions.enabled": true,

	// VS Code에서 파일을 이동하거나 이름을 바꿀 때 가져오기 경로의 자동 업데이트를 사용하거나 사용하지 않도록 설정합니다.
	//  - prompt: 이름을 바꿀 때마다 프롬프트를 표시합니다.
	//  - always: 항상 경로를 자동으로 업데이트합니다.
	//  - never: 경로 이름을 바꾸지 않고 메시지를 표시하지 않습니다.
	"javascript.updateImportsOnFileMove.enabled": "prompt",

	// 코드를 붙여넣을 때 가져오기를 자동으로 업데이트합니다. TypeScript 5.6+가 필요합니다.
	"javascript.updateImportsOnPaste.enabled": true,

	// JavaScript 유효성 검사를 사용하거나 사용하지 않습니다.
	"javascript.validate.enable": true,

	// 가리키기에서 최대 문자 수입니다. 가리키기 시간이 이보다 길면 잘립니다. TypeScript 5.9 이상이 필요합니다.
	"js/ts.hover.maximumLength": 500,

	// JavaScript 파일의 의미 체계 검사를 사용하거나 사용하지 않도록 설정합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 설정을 재정의합니다.
	"js/ts.implicitProjectConfig.checkJs": false,

	// 프로젝트의 일부가 아닌 JavaScript 파일에서 'experimentalDecorators'를 사용하거나 사용하지 않도록 설정합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 설정을 재정의합니다.
	"js/ts.implicitProjectConfig.experimentalDecorators": false,

	// 프로그램의 모듈 시스템을 설정합니다. 자세한 내용은 https://www.typescriptlang.org/tsconfig#module을 참조하세요.
	"js/ts.implicitProjectConfig.module": "ESNext",

	// 프로젝트에 포함되지 않은 JavaScript 및 TypeScript 파일에서 [엄격 모드](https://www.typescriptlang.org/tsconfig#strict)를 사용하거나 사용하지 않도록 설정합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 설정을 재정의합니다.
	"js/ts.implicitProjectConfig.strict": true,

	// 프로젝트의 일부가 아닌 JavaScript 및 TypeScript 파일에서 [strict 함수 형식](https://www.typescriptlang.org/tsconfig#strictFunctionTypes)을 사용하거나 사용하지 않도록 설정합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 설정을 재정의합니다.
	"js/ts.implicitProjectConfig.strictFunctionTypes": true,

	// 프로젝트의 일부가 아닌 JavaScript 및 TypeScript 파일에서 [strict null 검사](https://www.typescriptlang.org/tsconfig#strictNullChecks)를 사용하거나 사용하지 않도록 설정합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 설정을 재정의합니다.
	"js/ts.implicitProjectConfig.strictNullChecks": true,

	// 내보낸 JavaScript에 대한 대상 JavaScript 언어 버전을 설정하고 라이브러리 선언을 포함합니다. 자세한 내용은 https://www.typescriptlang.org/tsconfig#target을 참조하세요.
	"js/ts.implicitProjectConfig.target": "ES2024",

	// JSX 태그의 자동 닫기를 사용하거나 사용하지 않도록 설정합니다.
	"typescript.autoClosingTags": true,

	// [자동 형식 인식](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition)을 사용하지 않도록 설정합니다. 자동 형식 인식은 npm에서 '@types' 패키지를 가져와 외부 라이브러리에 대한 IntelliSense를 개선합니다.
	"typescript.disableAutomaticTypeAcquisition": false,

	// Intellisense 작업 영역에서 구성된 TypeScript 버전을 사용하라는 메시지를 사용자에게 표시할 수 있습니다.
	"typescript.enablePromptUseWorkspaceTsdk": false,

	// TypeScript Go 실험적 확장을 사용할 수 있도록 TypeScript 및 JavaScript 언어 기능을 비활성화합니다. TypeScript Go를 설치하고 구성해야 합니다. 이 설정을 변경한 후 확장을 다시 로드해야 합니다.
	"typescript.experimental.useTsgo": false,

	// CodeLens 구현을 사용하거나 사용하지 않습니다. 이 CodeLens는 인터페이스의 구현자를 표시합니다.
	"typescript.implementationsCodeLens.enabled": false,

	// 구현 인터페이스의 CodeLens 메서드를 활성화/비활성화합니다.
	"typescript.implementationsCodeLens.showOnInterfaceMethods": false,

	// JavaScript 및 TypeScript 오류를 보고하는 데 사용되는 로케일을 설정합니다. 기본값은 VS Code의 로케일을 사용하는 것입니다.
	//  - auto: VS Code의 구성된 표시 언어 사용
	//  - de: Deutsch
	//  - es: español
	//  - en: English
	//  - fr: français
	//  - it: italiano
	//  - ja: 日本語
	//  - ko: 한국어
	//  - ru: русский
	//  - zh-CN: 中文(简体)
	//  - zh-TW: 中文(繁體)
	"typescript.locale": "auto",

	// 대신 ‘원본 정의로 이동’을 트리거하여 가능한 경우 ‘정의로 이동’ 작업이 유형 선언 파일을 사용하지 않도록 합니다. 이렇게 하면 ‘원본 정의로 이동’이 마우스 제스처로 트리거될 수 있습니다.
	"typescript.preferGoToSourceDefinition": false,

	// TypeScript 파일에서 참조 CodeLens를 사용하거나 사용하지 않도록 설정합니다.
	"typescript.referencesCodeLens.enabled": false,

	// TypeScript 파일의 모든 기능에 대한 참조 CodeLens를 사용/사용하지 않도록 설정합니다.
	"typescript.referencesCodeLens.showOnAllFunctions": false,

	// 스타일 검사를 경고로 보고합니다.
	"typescript.reportStyleChecksAsWarnings": true,

	// 편집기에서 TypeScript 파일에 대한 제안 진단을 사용하거나 사용하지 않도록 설정합니다.
	"typescript.suggestionActions.enabled": true,

	// tsc 작업의 자동 검색을 제어합니다.
	//  - on: 빌드 및 조사식 작업을 모두 만듭니다.
	//  - off: 이 기능을 사용하지 않도록 설정합니다.
	//  - build: 단일 실행 컴파일 작업만 만듭니다.
	//  - watch: 컴파일 및 조사식 작업만 만듭니다.
	"typescript.tsc.autoDetect": "on",

	// IntelliSense에 사용할 TypeScript 설치에서 tsserver 및 `lib*.d.ts` 파일의 폴더 경로를 지정합니다. 예: `./node_modules/typescript/lib`.
	// 
	// - 사용자 설정으로 지정한 경우 'typescript.tsdk'의 TypeScript 버전이 자동으로 기본 제공 TypeScript 버전을 바꿉니다.
	// - 작업 영역 설정으로 지정한 경우 'typescript.tsdk'를 사용하여 'TypeScript: TypeScript 버전 선택' 명령으로 IntelliSense용 TypeScript의 해당 작업 영역 버전을 사용하도록 전환할 수 있습니다.
	// 
	// TypeScript 버전 관리에 대한 자세한 내용은 [TypeScript 설명서](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions)를 참조하세요.
	"typescript.tsdk": "",

	// TypeScript에서 지역 기반 진단을 사용하도록 설정합니다. 작업 영역에서 TypeScript 5.6 이상을 사용해야 합니다.
	"typescript.tsserver.enableRegionDiagnostics": true,

	// VS Code에서 파일을 이동하거나 이름을 바꿀 때 가져오기 경로의 자동 업데이트를 사용하거나 사용하지 않도록 설정합니다.
	//  - prompt: 이름을 바꿀 때마다 프롬프트를 표시합니다.
	//  - always: 항상 경로를 자동으로 업데이트합니다.
	//  - never: 경로 이름을 바꾸지 않고 메시지를 표시하지 않습니다.
	"typescript.updateImportsOnFileMove.enabled": "prompt",

	// 코드를 붙여넣을 때 가져오기를 자동으로 업데이트합니다. TypeScript 5.6+가 필요합니다.
	"typescript.updateImportsOnPaste.enabled": true,

	// TypeScript 유효성 검사를 사용하거나 사용하지 않습니다.
	"typescript.validate.enable": true,

	// ‘Go to Symbol in Workspace(작업 영역에서 기호로 이동)’ 결과의 라이브러리 파일에서 가져온 기호를 제외합니다. 작업 영역에서 TypeScript 5.3+를 사용해야 합니다.
	"typescript.workspaceSymbols.excludeLibrarySymbols": true,

	// [작업 영역에서 기호로 이동](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name)하여 검색할 파일을 제어합니다.
	//  - allOpenProjects: 열려 있는 모든 JavaScript 또는 TypeScript 프로젝트에서 기호를 검색합니다.
	//  - currentProject: 현재 JavaScript 또는 TypeScript 프로젝트에서만 기호를 검색합니다.
	"typescript.workspaceSymbols.scope": "allOpenProjects",

	// 자동 가져오기에서 제외할 파일의 GLOB 패턴을 지정합니다. 상대 경로는 작업 영역 루트를 기준으로 확인됩니다. 패턴은 tsconfig.json ['exclude'](https://www.typescriptlang.org/tsconfig#exclude) 의미 체계를 사용하여 평가됩니다.
	"javascript.preferences.autoImportFileExcludePatterns": [],

	// 일치하는 가져오기 지정자를 사용하여 자동 가져오기를 제외할 정규식을 지정합니다. 예:
	// 
	// - `^node:`
	// - 'lib/internal'(슬래시는 이스케이프할 필요가 없습니다.)
	// - '/lib\/internal/i'(... 'i' 또는 'u' 플래그에 주변 슬래시를 포함하지 않는 한)
	// - '^lodash$'(lodash에서 하위 경로 가져오기만 허용)
	"javascript.preferences.autoImportSpecifierExcludeRegexes": [],

	// 자동 가져오기의 기본 경로 스타일입니다.
	//  - shortest: 상대적 가져오기보다 적은 경로 세그먼트가 포함된 가져오기가 사용 가능한 경우에만 상대적이지 않은 가져오기를 사용합니다.
	//  - relative: 가져온 파일 위치의 상대 경로를 사용합니다.
	//  - non-relative: `jsconfig.json` / `tsconfig.json`에 구성된 `baseUrl` 또는 `paths`를 기반으로 상대적이지 않은 가져오기를 사용합니다.
	//  - project-relative: 상대 가져오기 경로가 패키지 또는 프로젝트 디렉터리를 벗어나는 경우에만 비 상대 가져오기를 선호합니다.
	"javascript.preferences.importModuleSpecifier": "shortest",

	// 자동 가져오기를 위한 기본 경로 끝자리.
	//  - auto: 프로젝트 설정을 사용하여 기본값을 선택합니다.
	//  - minimal: `./component/index.js`를 `./component`로 줄입니다.
	//  - index: `./component/index.js`를 `./component/index`로 줄입니다.
	//  - js: 경로 끝부분을 줄이지 마세요. `.js` 또는 `.ts` 확장명을 포함하세요.
	"javascript.preferences.importModuleSpecifierEnding": "auto",

	// JSX 특성 완성에 선호되는 스타일입니다.
	//  - auto: prop 유형을 기준으로 특성 이름 뒤에 `={}` 또는 `=""`를 삽입합니다. 문자열 특성에 사용되는 따옴표 형식을 제어하려면 '#javascript.preferences.quoteStyle#'을 참조하세요.
	//  - braces: 속성 이름 뒤에 `={}`를 삽입하세요.
	//  - none: 특성 이름만 삽입하세요.
	"javascript.preferences.jsxAttributeCompletionStyle": "auto",

	// 가져오기 순서 지정 방법을 제어하는 고급 기본 설정입니다.
	"javascript.preferences.organizeImports": {},

	// 빠른 수정에 사용할 기본 견적 스타일입니다.
	//  - auto: 기존 코드에서 따옴표 형식 유추
	//  - single: 항상 작은따옴표(`'`) 사용
	//  - double: 항상 큰따옴표(`"`) 사용
	"javascript.preferences.quoteStyle": "auto",

	// JSX 태그에서 기호 이름을 바꾸는 대신 일치하는 태그의 이름을 바꾸세요. 작업 영역에서 TypeScript 5.1 이상을 사용해야 합니다.
	"javascript.preferences.renameMatchingJsxTags": true,

	// 이름을 바꾸는 동안 개체 줄임 속성의 별칭 소개를 사용하거나 사용하지 않도록 설정합니다.
	"javascript.preferences.useAliasesForRenames": true,

	// 자동 가져오기에서 제외할 파일의 GLOB 패턴을 지정합니다. 상대 경로는 작업 영역 루트를 기준으로 확인됩니다. 패턴은 tsconfig.json ['exclude'](https://www.typescriptlang.org/tsconfig#exclude) 의미 체계를 사용하여 평가됩니다.
	"typescript.preferences.autoImportFileExcludePatterns": [],

	// 일치하는 가져오기 지정자를 사용하여 자동 가져오기를 제외할 정규식을 지정합니다. 예:
	// 
	// - `^node:`
	// - 'lib/internal'(슬래시는 이스케이프할 필요가 없습니다.)
	// - '/lib\/internal/i'(... 'i' 또는 'u' 플래그에 주변 슬래시를 포함하지 않는 한)
	// - '^lodash$'(lodash에서 하위 경로 가져오기만 허용)
	"typescript.preferences.autoImportSpecifierExcludeRegexes": [],

	// 자동 가져오기의 기본 경로 스타일입니다.
	//  - shortest: 상대적 가져오기보다 적은 경로 세그먼트가 포함된 가져오기가 사용 가능한 경우에만 상대적이지 않은 가져오기를 사용합니다.
	//  - relative: 가져온 파일 위치의 상대 경로를 사용합니다.
	//  - non-relative: `jsconfig.json` / `tsconfig.json`에 구성된 `baseUrl` 또는 `paths`를 기반으로 상대적이지 않은 가져오기를 사용합니다.
	//  - project-relative: 상대 가져오기 경로가 패키지 또는 프로젝트 디렉터리를 벗어나는 경우에만 비 상대 가져오기를 선호합니다.
	"typescript.preferences.importModuleSpecifier": "shortest",

	// 자동 가져오기를 위한 기본 경로 끝자리.
	//  - auto: 프로젝트 설정을 사용하여 기본값을 선택합니다.
	//  - minimal: `./component/index.js`를 `./component`로 줄입니다.
	//  - index: `./component/index.js`를 `./component/index`로 줄입니다.
	//  - js: 경로 끝부분을 줄이지 마세요. `.js` 또는 `.ts` 확장명을 포함하세요.
	"typescript.preferences.importModuleSpecifierEnding": "auto",

	// 사용할 수 있는 자동 가져오기 기능의 'package.json' 종속성을 검색하도록/하지 않도록 설정합니다.
	//  - auto: 예상 성능 영향에 따라 종속성을 검색합니다.
	//  - on: 종속성을 항상 검색합니다.
	//  - off: 종속성을 검색하지 않습니다.
	"typescript.preferences.includePackageJsonAutoImports": "auto",

	// JSX 특성 완성에 선호되는 스타일입니다.
	//  - auto: prop 유형을 기준으로 특성 이름 뒤에 `={}` 또는 `=""`를 삽입합니다. 문자열 특성에 사용되는 따옴표 형식을 제어하려면 '#typescript.preferences.quoteStyle#'을 참조하세요.
	//  - braces: 속성 이름 뒤에 `={}`를 삽입하세요.
	//  - none: 특성 이름만 삽입하세요.
	"typescript.preferences.jsxAttributeCompletionStyle": "auto",

	// 가져오기 순서 지정 방법을 제어하는 고급 기본 설정입니다.
	"typescript.preferences.organizeImports": {},

	// 가능한 경우 항상 자동 가져오기에 `type` 키워드를 포함합니다. 작업 영역에서 TypeScript 5.3 이상을 사용해야 합니다.
	"typescript.preferences.preferTypeOnlyAutoImports": false,

	// 빠른 수정에 사용할 기본 견적 스타일입니다.
	//  - auto: 기존 코드에서 따옴표 형식 유추
	//  - single: 항상 작은따옴표(`'`) 사용
	//  - double: 항상 큰따옴표(`"`) 사용
	"typescript.preferences.quoteStyle": "auto",

	// JSX 태그에서 기호 이름을 바꾸는 대신 일치하는 태그의 이름을 바꾸세요. 작업 영역에서 TypeScript 5.1 이상을 사용해야 합니다.
	"typescript.preferences.renameMatchingJsxTags": true,

	// 이름을 바꾸는 동안 개체 줄임 속성의 별칭 소개를 사용하거나 사용하지 않도록 설정합니다.
	"typescript.preferences.useAliasesForRenames": true,

	// 자동 가져오기 제안을 사용하거나 사용하지 않도록 설정합니다.
	"javascript.suggest.autoImports": true,

	// 클래스 멤버에 대한 코드 조각 완성을 활성화/비활성화합니다.
	"javascript.suggest.classMemberSnippets.enabled": true,

	// 매개 변수 서명으로 함수를 완료하세요.
	"javascript.suggest.completeFunctionCalls": false,

	// 제안을 사용하거나 사용하지 않도록 설정하여 JSDoc 주석을 완료합니다.
	"javascript.suggest.completeJSDocs": true,

	// 자동 완성 제안을 사용하거나 사용하지 않도록 설정합니다.
	"javascript.suggest.enabled": true,

	// 선택적 체인 호출을 삽입하는 잠재적으로 정의되지 않은 값에 대한 완료 표시를 활성/비활성화합니다. 사용하려면 엄격한 null 검사가 필요합니다.
	"javascript.suggest.includeAutomaticOptionalChainCompletions": true,

	// 부분적으로 입력된 가져오기 문에서 가져오기 스타일 자동 완성을 활성/비활성화합니다.
	"javascript.suggest.includeCompletionsForImportStatements": true,

	// JSDoc 템플릿에 대한 '@returns' 주석 생성을 활성/비활성화합니다.
	"javascript.suggest.jsdoc.generateReturns": true,

	// JavaScript 제안에서 파일의 고유한 이름 포함을 사용하거나 사용하지 않도록 설정합니다. 이름 제안은 `@ts-check` 또는 `checkJs`를 사용하여 의미 체계적으로 확인되는 JavaScript 코드에서 항상 사용하지 않도록 설정됩니다.
	"javascript.suggest.names": true,

	// import 문 및 요청 호출의 경로에 대한 제안을 사용하거나 사용하지 않도록 설정합니다.
	"javascript.suggest.paths": true,

	// 자동 가져오기 제안을 사용하거나 사용하지 않도록 설정합니다.
	"typescript.suggest.autoImports": true,

	// 클래스 멤버에 대한 코드 조각 완성을 활성화/비활성화합니다.
	"typescript.suggest.classMemberSnippets.enabled": true,

	// 매개 변수 서명으로 함수를 완료하세요.
	"typescript.suggest.completeFunctionCalls": false,

	// 제안을 사용하거나 사용하지 않도록 설정하여 JSDoc 주석을 완료합니다.
	"typescript.suggest.completeJSDocs": true,

	// 자동 완성 제안을 사용하거나 사용하지 않도록 설정합니다.
	"typescript.suggest.enabled": true,

	// 선택적 체인 호출을 삽입하는 잠재적으로 정의되지 않은 값에 대한 완료 표시를 활성/비활성화합니다. 사용하려면 엄격한 null 검사가 필요합니다.
	"typescript.suggest.includeAutomaticOptionalChainCompletions": true,

	// 부분적으로 입력된 가져오기 문에서 가져오기 스타일 자동 완성을 활성/비활성화합니다.
	"typescript.suggest.includeCompletionsForImportStatements": true,

	// JSDoc 템플릿에 대한 '@returns' 주석 생성을 활성/비활성화합니다.
	"typescript.suggest.jsdoc.generateReturns": true,

	// 개체 리터럴의 메서드에 대한 코드 조각 완성을 활성화/비활성화합니다.
	"typescript.suggest.objectLiteralMethodSnippets.enabled": true,

	// import 문 및 요청 호출의 경로에 대한 제안을 사용하거나 사용하지 않도록 설정합니다.
	"typescript.suggest.paths": true,

	// `testing.followRunningTest`이(가) 켜져 있을 때 실행된 테스트를 항상 표시합니다. 이 설정을 끄면 실패한 테스트만 표시됩니다.
	"testing.alwaysRevealTestOnStateChange": false,

	// 오류 Peek 보기가 자동으로 열리는 경우를 구성합니다.
	//  - failureAnywhere: 오류 위치와 관계없이 자동으로 엽니다.
	//  - failureInVisibleDocument: 표시되는 문서에서 테스트가 실패할 경우 자동으로 엽니다.
	//  - never: 자동으로 열리지 않습니다.
	"testing.automaticallyOpenPeekView": "never",

	// 연속 실행 모드의 Peek 보기 자동 열기 여부를 제어합니다.
	"testing.automaticallyOpenPeekViewDuringAutoRun": false,

	// 테스트 뷰를 열어야 하는 시기를 제어합니다.
	//  - neverOpen: 테스트 보기를 자동으로 열지 않음
	//  - openOnTestStart: 테스트가 시작될 때 테스트 결과 보기 열기
	//  - openOnTestFailure: 테스트 실패 시 테스트 결과 보기 열기
	//  - openExplorerOnTestStart: 테스트가 시작될 때 테스트 탐색기 열기
	"testing.automaticallyOpenTestResults": "openOnTestStart",

	// 작업 막대에서 테스팅 아이콘의 개수 배지를 제어합니다.
	//  - failed: 실패한 테스트 수 표시
	//  - off: 테스트 수 배지 사용 안 함
	//  - passed: 통과한 테스트 수 표시
	//  - skipped: 건너뛴 테스트 수 표시
	"testing.countBadge": "failed",

	// 테스트 적용 범위 막대의 백분율에 사용되는 색을 구성합니다.
	"testing.coverageBarThresholds": {
		"red": 0,
		"yellow": 60,
		"green": 90
	},

	// 편집기에서 적용 범위 도구 모음을 표시할지를 제어합니다.
	"testing.coverageToolbarEnabled": false,

	// 제본용 여백에서 테스트 장식을 마우스 왼쪽 단추로 클릭할 때 수행할 동작을 제어합니다.
	//  - run: 테스트를 실행합니다.
	//  - debug: 테스트를 디버그합니다.
	//  - runWithCoverage: 적용 범위로 테스트 실행
	//  - contextMenu: 추가 옵션을 보려면 상황에 맞는 메뉴를 엽니다.
	"testing.defaultGutterClickAction": "run",

	// 테스트 적용 범위에 대해 기본적으로 표시되는 백분율을 구성합니다.
	//  - totalCoverage: 결합된 문, 함수 및 분기 적용 범위의 계산입니다.
	//  - statement: 문 적용 범위입니다.
	//  - minimum: 문, 함수 및 분기 적용 범위의 최소값입니다.
	"testing.displayedCoveragePercent": "totalCoverage",

	// 테스트 탐색기 보기에서 실행 중인 테스트를 따라야 할지를 제어합니다.
	"testing.followRunningTest": false,

	// 테스트 장식이 편집기 여백에 표시되는지 여부를 제어합니다.
	"testing.gutterEnabled": true,

	// 테스트를 실행하기 전에 모든 더티 편집기를 저장할지 여부를 제어합니다.
	"testing.saveBeforeTest": true,

	// 모든 테스트 실행의 메시지를 표시할지 여부를 제어합니다.
	"testing.showAllMessages": false,

	// 파일 탐색기 보기에서 테스트 검사를 종료할지 여부입니다.
	"testing.showCoverageInExplorer": true,

	// CSS 속성을 완료할 때 줄의 끝에 세미콜론을 삽입합니다.
	"css.completion.completePropertyWithSemicolon": true,

	// 기본적으로 VS Code는 CSS 속성을 선택한 후 속성 값 완료를 트리거합니다. 이 동작을 비활성화하려면 이 설정을 사용합니다.
	"css.completion.triggerPropertyValueCompletion": true,

	// [사용자 지정 데이터 형식](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md)에 따라 JSON 파일을 가리키는 상대 파일 경로의 목록입니다.
	// 
	// VS Code는 시작 시 사용자 지정 데이터를 로드하여 JSON 파일에서 지정한 CSS 사용자 지정 속성(변수), at-rules, 의사 클래스 및 의사 요소에 대한 CSS 지원을 향상시킵니다.
	// 
	// 파일 경로는 작업 영역에 상대적이며 작업 영역 폴더 설정만 고려됩니다.
	"css.customData": [],

	// 규칙(`collapse`)과 동일한 줄에 중괄호를 배치하거나 자체 줄(`expand`)에 중괄호를 배치합니다.
	"css.format.braceStyle": "collapse",

	// 기본 CSS 포맷터를 활성화/비활성화합니다.
	"css.format.enable": true,

	// `css.format.preserveNewLines`을(를) 사용하는 경우 한 청크에서 보존할 최대 줄 바꿈 수입니다.
	"css.format.maxPreserveNewLines": null,

	// 규칙 집합을 빈 줄로 구분합니다.
	"css.format.newlineBetweenRules": true,

	// 선택기를 새 줄로 구분합니다.
	"css.format.newlineBetweenSelectors": true,

	// 규칙 및 선언 전에 기존 줄 바꿈을 유지해야 하는지 여부입니다.
	"css.format.preserveNewLines": true,

	// 선택기 구분 기호 '>', '+', '~' 주위에 공백 문자가 있는지 확인합니다(예: 'a > b').
	"css.format.spaceAroundSelectorSeparator": false,

	// CSS 가리키기에서 속성 및 값 설명서를 표시합니다.
	"css.hover.documentation": true,

	// CSS 호버에 MDN에 대한 참조를 표시합니다.
	"css.hover.references": true,

	// 매개 변수 개수가 잘못되었습니다.
	"css.lint.argumentsInColorFunction": "error",

	// 'padding' 또는 'border'를 사용하는 경우 'width' 또는 'height'를 사용하지 마세요.
	"css.lint.boxModel": "ignore",

	// 공급업체 관련 접두사를 사용할 경우 다른 모든 공급업체 관련 속성도 포함합니다.
	"css.lint.compatibleVendorPrefixes": "ignore",

	// 중복된 스타일 정의를 사용하지 마세요.
	"css.lint.duplicateProperties": "ignore",

	// 빈 규칙 집합을 사용하지 마세요.
	"css.lint.emptyRules": "warning",

	// 'float'를 사용하지 않도록 합니다. Float를 사용하면 레이아웃의 한쪽이 바뀔 경우 CSS가 쉽게 깨질 수 있습니다.
	"css.lint.float": "ignore",

	// `@font-face` 규칙에서 'src' 및 'font-family' 속성을 정의해야 합니다.
	"css.lint.fontFaceProperties": "warning",

	// 16진수 색상은 3, 4, 6 또는 8진수로 구성되어야 합니다.
	"css.lint.hexColorLength": "error",

	// 이러한 규칙은 HTML과 긴밀하게 결합되므로 선택기에 ID를 포함하면 안 됩니다.
	"css.lint.idSelector": "ignore",

	// IE 핵(Hack)은 IE7 이상을 지원할 때만 필요합니다.
	"css.lint.ieHack": "ignore",

	// '!important'는 사용하지 않도록 합니다. 이것은 전체 CSS의 특정성에 문제가 있어서 리팩터링해야 함을 나타냅니다.
	"css.lint.important": "ignore",

	// Import 문은 병렬로 로드되지 않습니다.
	"css.lint.importStatement": "ignore",

	// display 때문에 속성이 무시됩니다. 예를 들어 'display: inline'을 사용할 경우 'width', 'height', 'margin-top', 'margin-bottom' 및 'float' 속성은 적용되지 않습니다.
	"css.lint.propertyIgnoredDueToDisplay": "warning",

	// 범용 선택기(*)는 느린 것으로 알려져 있습니다.
	"css.lint.universalSelector": "ignore",

	// 알 수 없는 @ 규칙 입니다.
	"css.lint.unknownAtRules": "warning",

	// 알 수 없는 속성입니다.
	"css.lint.unknownProperties": "warning",

	// 알 수 없는 공급업체 관련 속성입니다.
	"css.lint.unknownVendorSpecificProperties": "ignore",

	// `unknownProperties` 규칙에 따라 유효성이 검사되지 않은 속성 목록입니다.
	"css.lint.validProperties": [],

	// 공급업체 관련 접두사를 사용할 경우 표준 속성도 포함합니다.
	"css.lint.vendorPrefix": "warning",

	// 0에는 단위가 필요하지 않습니다.
	"css.lint.zeroUnits": "ignore",

	// VS Code와 CSS 언어 서버 간 통신을 추적합니다.
	"css.trace.server": "off",

	// 모든 유효성 검사를 사용하거나 사용하지 않습니다.
	"css.validate": true,

	// 기본 JavaScript 포맷터를 사용하거나 사용하지 않습니다.
	"javascript.format.enable": true,

	// switch 문의 case 절을 들여쓰기합니다. 작업 영역에서 TypeScript 5.1+를 사용해야 합니다.
	"javascript.format.indentSwitchCase": true,

	// 쉼표 구분 기호 뒤에 오는 공백 처리를 정의합니다.
	"javascript.format.insertSpaceAfterCommaDelimiter": true,

	// 생성자 키워드 뒤에 오는 공백 처리를 정의합니다.
	"javascript.format.insertSpaceAfterConstructor": false,

	// 익명 함수의 function 키워드 뒤에 오는 공백 처리를 정의합니다.
	"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// 제어 흐름 문의 키워드 뒤에 오는 공백 처리를 정의합니다.
	"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// 비어 있는 여는 중괄호 뒤와 닫는 중괄호 앞의 공백 처리를 정의합니다.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// JSX 식의 여는 중괄호 뒤와 닫는 중괄호 앞의 공백 처리를 정의합니다.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// 비어 있지 않은 여는 중괄호 뒤와 닫는 중괄호 앞의 공백 처리를 정의합니다.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// 비어 있지 않은 여는 대괄호 뒤와 닫는 대괄호 앞에 오는 공백 처리를 정의합니다.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// 비어 있지 않은 여는 괄호 뒤와 닫는 괄호 앞에 오는 공백 처리를 정의합니다.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// 템플릿 문자열의 여는 중괄호 뒤와 닫는 중괄호 앞의 공백 처리를 정의합니다.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// for 문에서 세미콜론 뒤에 오는 공백 처리를 정의합니다.
	"javascript.format.insertSpaceAfterSemicolonInForStatements": true,

	// 이항 연산자 뒤에 오는 공백 처리를 정의합니다.
	"javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// 함수 인수 괄호 앞에 오는 공백 처리를 정의합니다.
	"javascript.format.insertSpaceBeforeFunctionParenthesis": false,

	// 제어 블록의 새 줄에 여는 중괄호를 넣을지 정의합니다.
	"javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// 함수의 새 줄에 여는 중괄호를 넣을지 정의합니다.
	"javascript.format.placeOpenBraceOnNewLineForFunctions": false,

	// 선택적 세미콜론 처리를 정의합니다.
	//  - ignore: 세미콜론을 삽입하거나 제거하지 마세요.
	//  - insert: 문 끝에 세미콜론을 삽입합니다.
	//  - remove: 불필요한 세미콜론을 제거합니다.
	"javascript.format.semicolons": "ignore",

	// 기본 TypeScript 포맷터를 사용하거나 사용하지 않습니다.
	"typescript.format.enable": true,

	// switch 문의 case 절을 들여쓰기합니다. 작업 영역에서 TypeScript 5.1+를 사용해야 합니다.
	"typescript.format.indentSwitchCase": true,

	// 쉼표 구분 기호 뒤에 오는 공백 처리를 정의합니다.
	"typescript.format.insertSpaceAfterCommaDelimiter": true,

	// 생성자 키워드 뒤에 오는 공백 처리를 정의합니다.
	"typescript.format.insertSpaceAfterConstructor": false,

	// 익명 함수의 function 키워드 뒤에 오는 공백 처리를 정의합니다.
	"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// 제어 흐름 문의 키워드 뒤에 오는 공백 처리를 정의합니다.
	"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// 비어 있는 여는 중괄호 뒤와 닫는 중괄호 앞의 공백 처리를 정의합니다.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// JSX 식의 여는 중괄호 뒤와 닫는 중괄호 앞의 공백 처리를 정의합니다.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// 비어 있지 않은 여는 중괄호 뒤와 닫는 중괄호 앞의 공백 처리를 정의합니다.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// 비어 있지 않은 여는 대괄호 뒤와 닫는 대괄호 앞에 오는 공백 처리를 정의합니다.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// 비어 있지 않은 여는 괄호 뒤와 닫는 괄호 앞에 오는 공백 처리를 정의합니다.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// 템플릿 문자열의 여는 중괄호 뒤와 닫는 중괄호 앞의 공백 처리를 정의합니다.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// for 문에서 세미콜론 뒤에 오는 공백 처리를 정의합니다.
	"typescript.format.insertSpaceAfterSemicolonInForStatements": true,

	// TypeScript에서 형식 어설션 뒤에 오는 공백 처리를 정의합니다.
	"typescript.format.insertSpaceAfterTypeAssertion": false,

	// 이항 연산자 뒤에 오는 공백 처리를 정의합니다.
	"typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// 함수 인수 괄호 앞에 오는 공백 처리를 정의합니다.
	"typescript.format.insertSpaceBeforeFunctionParenthesis": false,

	// 제어 블록의 새 줄에 여는 중괄호를 넣을지 정의합니다.
	"typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// 함수의 새 줄에 여는 중괄호를 넣을지 정의합니다.
	"typescript.format.placeOpenBraceOnNewLineForFunctions": false,

	// 선택적 세미콜론 처리를 정의합니다.
	//  - ignore: 세미콜론을 삽입하거나 제거하지 마세요.
	//  - insert: 문 끝에 세미콜론을 삽입합니다.
	//  - remove: 불필요한 세미콜론을 제거합니다.
	"typescript.format.semicolons": "ignore",

	// CSS 속성을 완료할 때 줄의 끝에 세미콜론을 삽입합니다.
	"less.completion.completePropertyWithSemicolon": true,

	// 기본적으로 VS Code는 CSS 속성을 선택한 후 속성 값 완료를 트리거합니다. 이 동작을 비활성화하려면 이 설정을 사용합니다.
	"less.completion.triggerPropertyValueCompletion": true,

	// 규칙(`collapse`)과 동일한 줄에 중괄호를 배치하거나 자체 줄(`expand`)에 중괄호를 배치합니다.
	"less.format.braceStyle": "collapse",

	// 기본 LESS 포맷터를 활성화/비활성화합니다.
	"less.format.enable": true,

	// `less.format.preserveNewLines`을(를) 사용하는 경우 한 청크에서 보존할 최대 줄 바꿈 수입니다.
	"less.format.maxPreserveNewLines": null,

	// 규칙 집합을 빈 줄로 구분합니다.
	"less.format.newlineBetweenRules": true,

	// 선택기를 새 줄로 구분합니다.
	"less.format.newlineBetweenSelectors": true,

	// 규칙 및 선언 전에 기존 줄 바꿈을 유지해야 하는지 여부입니다.
	"less.format.preserveNewLines": true,

	// 선택기 구분 기호 '>', '+', '~' 주위에 공백 문자가 있는지 확인합니다(예: 'a > b').
	"less.format.spaceAroundSelectorSeparator": false,

	// LESS 가리키기에서 속성 및 값 설명서를 표시합니다.
	"less.hover.documentation": true,

	// LESS 호버에 MDN에 대한 참조를 표시합니다.
	"less.hover.references": true,

	// 매개 변수 개수가 잘못되었습니다.
	"less.lint.argumentsInColorFunction": "error",

	// 'padding' 또는 'border'를 사용하는 경우 'width' 또는 'height'를 사용하지 마세요.
	"less.lint.boxModel": "ignore",

	// 공급업체 관련 접두사를 사용할 경우 다른 모든 공급업체 관련 속성도 포함합니다.
	"less.lint.compatibleVendorPrefixes": "ignore",

	// 중복된 스타일 정의를 사용하지 마세요.
	"less.lint.duplicateProperties": "ignore",

	// 빈 규칙 집합을 사용하지 마세요.
	"less.lint.emptyRules": "warning",

	// 'float'를 사용하지 않도록 합니다. Float를 사용하면 레이아웃의 한쪽이 바뀔 경우 CSS가 쉽게 깨질 수 있습니다.
	"less.lint.float": "ignore",

	// `@font-face` 규칙에서 'src' 및 'font-family' 속성을 정의해야 합니다.
	"less.lint.fontFaceProperties": "warning",

	// 16진수 색상은 3, 4, 6 또는 8진수로 구성되어야 합니다.
	"less.lint.hexColorLength": "error",

	// 이러한 규칙은 HTML과 긴밀하게 결합되므로 선택기에 ID를 포함하면 안 됩니다.
	"less.lint.idSelector": "ignore",

	// IE 핵(Hack)은 IE7 이상을 지원할 때만 필요합니다.
	"less.lint.ieHack": "ignore",

	// '!important'는 사용하지 않도록 합니다. 이것은 전체 CSS의 특정성에 문제가 있어서 리팩터링해야 함을 나타냅니다.
	"less.lint.important": "ignore",

	// Import 문은 병렬로 로드되지 않습니다.
	"less.lint.importStatement": "ignore",

	// display 때문에 속성이 무시됩니다. 예를 들어 'display: inline'을 사용할 경우 'width', 'height', 'margin-top', 'margin-bottom' 및 'float' 속성은 적용되지 않습니다.
	"less.lint.propertyIgnoredDueToDisplay": "warning",

	// 범용 선택기(*)는 느린 것으로 알려져 있습니다.
	"less.lint.universalSelector": "ignore",

	// 알 수 없는 @ 규칙 입니다.
	"less.lint.unknownAtRules": "warning",

	// 알 수 없는 속성입니다.
	"less.lint.unknownProperties": "warning",

	// 알 수 없는 공급업체 관련 속성입니다.
	"less.lint.unknownVendorSpecificProperties": "ignore",

	// `unknownProperties` 규칙에 따라 유효성이 검사되지 않은 속성 목록입니다.
	"less.lint.validProperties": [],

	// 공급업체 관련 접두사를 사용할 경우 표준 속성도 포함합니다.
	"less.lint.vendorPrefix": "warning",

	// 0에는 단위가 필요하지 않습니다.
	"less.lint.zeroUnits": "ignore",

	// 모든 유효성 검사를 사용하거나 사용하지 않습니다.
	"less.validate": true,

	// 함수 시그니처의 암시적 반환 형식에 대한 인레이 힌트 활성화/비활성화:
	// ```typescript
	// 
	// function foo() /* :number */ {
	//  return Date.now();
	//  } 
	//  
	// ```
	"javascript.inlayHints.functionLikeReturnTypes.enabled": false,

	// 매개 변수 이름에 대한 인레이 힌트 활성화/비활성화:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	//  - none: 매개변수 이름 힌트를 비활성화합니다.
	//  - literals: 리터럴 인수에 대해서만 매개변수 이름 힌트를 활성화합니다.
	//  - all: 리터럴 및 비리터럴 인수에 대한 매개변수 이름 힌트를 활성화합니다.
	"javascript.inlayHints.parameterNames.enabled": "none",

	// 텍스트가 매개변수 이름과 동일한 인수에 대해 매개변수 이름 힌트를 표시하지 않습니다.
	"javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// 암시적 매개 변수 유형에 대한 인레이 힌트 활성화/비활성화:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	//  ```
	"javascript.inlayHints.parameterTypes.enabled": false,

	// 속성 선언의 암시적 유형에 대한 인레이 힌트 활성화/비활성화:
	// ```typescript
	// 
	// class Foo {
	//  prop /* :number */ = Date.now();
	// }
	//  
	// ```
	"javascript.inlayHints.propertyDeclarationTypes.enabled": false,

	// 암시적 변수 유형에 대한 인레이 힌트 활성화/비활성화:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	"javascript.inlayHints.variableTypes.enabled": false,

	// 이름이 형식 이름과 동일한 변수에 대한 형식 힌트를 표시하지 않습니다.
	"javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

	// 열거형 선언의 멤버 값에 대한 인레이 힌트 활성화/비활성화:
	// ```typescript
	// 
	// enum MyValue {
	//  A /* = 0 */;
	//  B /* = 1 */; 
	// }
	//  
	// ```
	"typescript.inlayHints.enumMemberValues.enabled": false,

	// 함수 시그니처의 암시적 반환 형식에 대한 인레이 힌트 활성화/비활성화:
	// ```typescript
	// 
	// function foo() /* :number */ {
	//  return Date.now();
	//  } 
	//  
	// ```
	"typescript.inlayHints.functionLikeReturnTypes.enabled": false,

	// 매개 변수 이름에 대한 인레이 힌트 활성화/비활성화:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	//  - none: 매개변수 이름 힌트를 비활성화합니다.
	//  - literals: 리터럴 인수에 대해서만 매개변수 이름 힌트를 활성화합니다.
	//  - all: 리터럴 및 비리터럴 인수에 대한 매개변수 이름 힌트를 활성화합니다.
	"typescript.inlayHints.parameterNames.enabled": "none",

	// 텍스트가 매개변수 이름과 동일한 인수에 대해 매개변수 이름 힌트를 표시하지 않습니다.
	"typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// 암시적 매개 변수 유형에 대한 인레이 힌트 활성화/비활성화:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	//  ```
	"typescript.inlayHints.parameterTypes.enabled": false,

	// 속성 선언의 암시적 유형에 대한 인레이 힌트 활성화/비활성화:
	// ```typescript
	// 
	// class Foo {
	//  prop /* :number */ = Date.now();
	// }
	//  
	// ```
	"typescript.inlayHints.propertyDeclarationTypes.enabled": false,

	// 암시적 변수 유형에 대한 인레이 힌트 활성화/비활성화:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	"typescript.inlayHints.variableTypes.enabled": false,

	// 이름이 형식 이름과 동일한 변수에 대한 형식 힌트를 표시하지 않습니다.
	"typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

	// CSS 속성을 완료할 때 줄의 끝에 세미콜론을 삽입합니다.
	"scss.completion.completePropertyWithSemicolon": true,

	// 기본적으로 VS Code는 CSS 속성을 선택한 후 속성 값 완료를 트리거합니다. 이 동작을 비활성화하려면 이 설정을 사용합니다.
	"scss.completion.triggerPropertyValueCompletion": true,

	// 규칙(`collapse`)과 동일한 줄에 중괄호를 배치하거나 자체 줄(`expand`)에 중괄호를 배치합니다.
	"scss.format.braceStyle": "collapse",

	// 기본 SCSS 포맷터를 활성화/비활성화합니다.
	"scss.format.enable": true,

	// `scss.format.preserveNewLines`을(를) 사용하도록 설정한 경우 한 청크에서 보존할 최대 줄 바꿈 수입니다.
	"scss.format.maxPreserveNewLines": null,

	// 규칙 집합을 빈 줄로 구분합니다.
	"scss.format.newlineBetweenRules": true,

	// 선택기를 새 줄로 구분합니다.
	"scss.format.newlineBetweenSelectors": true,

	// 규칙 및 선언 전에 기존 줄 바꿈을 유지해야 하는지 여부입니다.
	"scss.format.preserveNewLines": true,

	// 선택기 구분 기호 '>', '+', '~' 주위에 공백 문자가 있는지 확인합니다(예: 'a > b').
	"scss.format.spaceAroundSelectorSeparator": false,

	// SCSS 가리키기에서 속성 및 값 설명서를 표시합니다.
	"scss.hover.documentation": true,

	// SCSS 호버에 MDN에 대한 참조를 표시합니다.
	"scss.hover.references": true,

	// 매개 변수 개수가 잘못되었습니다.
	"scss.lint.argumentsInColorFunction": "error",

	// 'padding' 또는 'border'를 사용하는 경우 'width' 또는 'height'를 사용하지 마세요.
	"scss.lint.boxModel": "ignore",

	// 공급업체 관련 접두사를 사용할 경우 다른 모든 공급업체 관련 속성도 포함합니다.
	"scss.lint.compatibleVendorPrefixes": "ignore",

	// 중복된 스타일 정의를 사용하지 마세요.
	"scss.lint.duplicateProperties": "ignore",

	// 빈 규칙 집합을 사용하지 마세요.
	"scss.lint.emptyRules": "warning",

	// 'float'를 사용하지 않도록 합니다. Float를 사용하면 레이아웃의 한쪽이 바뀔 경우 CSS가 쉽게 깨질 수 있습니다.
	"scss.lint.float": "ignore",

	// `@font-face` 규칙에서 'src' 및 'font-family' 속성을 정의해야 합니다.
	"scss.lint.fontFaceProperties": "warning",

	// 16진수 색상은 3, 4, 6 또는 8진수로 구성되어야 합니다.
	"scss.lint.hexColorLength": "error",

	// 이러한 규칙은 HTML과 긴밀하게 결합되므로 선택기에 ID를 포함하면 안 됩니다.
	"scss.lint.idSelector": "ignore",

	// IE 핵(Hack)은 IE7 이상을 지원할 때만 필요합니다.
	"scss.lint.ieHack": "ignore",

	// '!important'는 사용하지 않도록 합니다. 이것은 전체 CSS의 특정성에 문제가 있어서 리팩터링해야 함을 나타냅니다.
	"scss.lint.important": "ignore",

	// Import 문은 병렬로 로드되지 않습니다.
	"scss.lint.importStatement": "ignore",

	// display 때문에 속성이 무시됩니다. 예를 들어 'display: inline'을 사용할 경우 'width', 'height', 'margin-top', 'margin-bottom' 및 'float' 속성은 적용되지 않습니다.
	"scss.lint.propertyIgnoredDueToDisplay": "warning",

	// 범용 선택기(*)는 느린 것으로 알려져 있습니다.
	"scss.lint.universalSelector": "ignore",

	// 알 수 없는 @ 규칙 입니다.
	"scss.lint.unknownAtRules": "warning",

	// 알 수 없는 속성입니다.
	"scss.lint.unknownProperties": "warning",

	// 알 수 없는 공급업체 관련 속성입니다.
	"scss.lint.unknownVendorSpecificProperties": "ignore",

	// `unknownProperties` 규칙에 따라 유효성이 검사되지 않은 속성 목록입니다.
	"scss.lint.validProperties": [],

	// 공급업체 관련 접두사를 사용할 경우 표준 속성도 포함합니다.
	"scss.lint.vendorPrefix": "warning",

	// 0에는 단위가 필요하지 않습니다.
	"scss.lint.zeroUnits": "ignore",

	// 모든 유효성 검사를 사용하거나 사용하지 않습니다.
	"scss.validate": true,

	// [자동 형식 인식](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition)을 위해 npm이 설치되어 있는지 확인하세요.
	"typescript.check.npmIsInstalled": true,

	// [자동 형식 인식](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition)에 사용되는 npm 실행 파일의 경로를 지정합니다.
	"typescript.npm": "",

	// 디렉터리에 대해 TS 서버 성능 추적을 사용하도록 설정합니다. 이 추적 파일은 TS 서버 성능 문제를 진단하는 데 사용될 수 있습니다. 로그에는 파일 경로, 소스 코드 및 프로젝트에서 잠재적으로 중요한 기타 정보가 포함될 수 있습니다.
	"typescript.tsserver.enableTracing": false,

	// 프로젝트 전체 오류 보고를 활성화합니다.
	"typescript.tsserver.experimental.enableProjectDiagnostics": false,

	// 파일에 대해 TS 서버 로깅을 사용하도록 설정합니다. 이 로그는 TS 서버 문제를 진단하는 데 사용될 수 있습니다. 로그에는 파일 경로, 소스 코드 및 프로젝트에서 잠재적으로 중요한 기타 정보가 포함될 수 있습니다.
	"typescript.tsserver.log": "off",

	// TypeScript 서버 프로세스에 할당할 최대 메모리 양(MB)입니다. 4GB보다 큰 메모리 제한을 사용하려면 '#typescript.tsserver.nodePath#'을 사용하여 사용자 지정 노드 설치로 TS Server를 실행합니다.
	"typescript.tsserver.maxTsServerMemory": 3072,

	// 사용자 지정 노드 설치에서 TS 서버를 실행합니다. 이 값은 노드 실행 파일의 경로이거나 VS 코드가 노드 설치를 감지하도록 하려는 경우 'node'일 수 있습니다.
	"typescript.tsserver.nodePath": "",

	// TypeScript 언어 서비스 플러그 인을 검색할 추가 경로입니다.
	"typescript.tsserver.pluginPaths": [],

	// TypeScript가 컴퓨팅 코드 접기와 같은 구문 관련 작업을 보다 빠르게 처리하기 위해 전용 서버를 시작하는지 여부를 제어합니다.
	//  - always: 경량 구문 서버를 사용하여 모든 IntelliSense 작업을 처리하세요. 이 구문 서버는 열린 파일에 대해서만 IntelliSense를 제공할 수 있습니다.
	//  - never: 전용 구문 서버를 사용하지 마세요. 단일 서버를 사용하여 모든 IntelliSense 작업을 처리하세요.
	//  - auto: 전체 서버와 구문 작업 전용의 경량 서버를 모두 생성하세요. 구문 서버는 프로젝트를 로드하는 동안 구문 작업을 가속화하고 IntelliSense를 제공하는 데 사용됩니다.
	"typescript.tsserver.useSyntaxServer": "auto",

	// 파일 및 디렉터리 추적에 사용할 감시 전략을 구성합니다.
	"typescript.tsserver.watchOptions": "vscode",

	// 웹에서 프로젝트 전체 IntelliSense를 사용/사용 안 함으로 설정합니다. VS Code는 신뢰할 수 있는 컨텍스트에서 실행되어야 합니다.
	"typescript.tsserver.web.projectWideIntellisense.enabled": true,

	// 프로젝트 전체 IntelliSense를 사용하도록 설정한 경우에도 웹에서 의미 체계 오류를 표시하지 않습니다. 프로젝트 전체 IntelliSense를 사용하도록 설정하지 않았거나 사용할 수 없는 경우 항상 켜져 있습니다. `typescript.tsserver.web.projectWideIntellisense.enabled`를 참조하세요.
	"typescript.tsserver.web.projectWideIntellisense.suppressSemanticErrors": false,

	// 웹에서 패키지 취득을 사용하거나 사용하지 않도록 설정합니다. 이렇게 하면 가져온 패키지에 대해 IntelliSense가 활성화됩니다. '#typescript.tsserver.web.projectWideIntellisense.enabled#'이 필요합니다. 현재 Safari에서 지원되지 않습니다.
	"typescript.tsserver.web.typeAcquisition.enabled": true,

	// 동기화하는 동안 무시할 확장 목록입니다. 확장의 식별자는 항상 `${publisher}.${name}`입니다(예: `vscode.csharp`).
	"settingsSync.ignoredExtensions": [],

	// 동기화하는 동안 무시할 설정을 구성합니다.
	"settingsSync.ignoredSettings": [],

	// 각 플랫폼에 대해 키 바인딩을 동기화합니다.
	"settingsSync.keybindingsPerPlatform": true,

	// 출력 보기에서 스마트 스크롤 기능을 사용하거나 사용하지 않도록 설정합니다. 스마트 스크롤 기능을 사용하면 출력 보기를 클릭하면 스크롤이 자동으로 잠기고 마지막 줄을 클릭하면 잠금이 해제됩니다.
	"output.smartScroll.enabled": true,

	// 사용할 수 있는 확장 목록을 지정합니다. 이는 권한 없는 확장의 사용을 제한하여 안전하고 일관된 개발 환경을 유지하는 데 도움이 됩니다. 이 설정을 구성하는 방법에 대한 자세한 내용은 [허용된 확장 구성](https://code.visualstudio.com/docs/setup/enterprise#_configure-allowed-extensions) 섹션을 방문하세요.
	"extensions.allowed": "*",

	// 사용하도록 설정하면 확장의 업데이트가 있는지를 자동으로 확인합니다. 확장의 업데이트가 있으면 확장 보기에서 오래된 것으로 표시됩니다. 업데이트는 Microsoft 온라인 서비스에서 가져옵니다.
	"extensions.autoCheckUpdates": true,

	// 확장의 자동 업데이트 동작을 제어합니다. 업데이트는 Microsoft 온라인 서비스에서 페치됩니다.
	//  - true: 모든 확장의 업데이트를 자동으로 다운로드하고 설치합니다.
	//  - onlyEnabledExtensions: 활성화된 확장에 대해서만 업데이트를 자동으로 다운로드하고 설치합니다.
	//  - false: 확장이 자동으로 업데이트되지 않습니다.
	"extensions.autoUpdate": true,

	// 사용하도록 설정하는 경우 확장 뷰에서 나가면 확장 정보가 포함된 편집기가 자동으로 닫힙니다.
	"extensions.closeExtensionDetailsOnViewChange": false,

	// 확장이 여기에 나열되어 있으면 해당 확장에서 URI를 처리할 때 확인 프롬프트가 표시되지 않습니다.
	"extensions.confirmedUriHandlerExtensionIds": [],

	// 다른 확장 호스트 프로세스에서 실행되도록 확장을 구성합니다.
	"extensions.experimental.affinity": {},

	// 사용하도록 설정하면 제한 시간 후에 'onStartupFinished' 활성화 이벤트를 선언하는 확장이 활성화됩니다.
	"extensions.experimental.deferredStartupFinishedActivation": false,

	// 사용하도록 설정하면 빠른 액세스를 통해 확장을 검색하고 해당 위치에서 문제를 보고할 수 있습니다.
	"extensions.experimental.issueQuickAccess": true,

	// 사용하도록 설정하면 확장 권장 사항에 대한 알림이 표시되지 않습니다.
	"extensions.ignoreRecommendations": false,

	// 이 설정은 사용되지 않습니다. extensions.ignoreRecommendations 설정을 사용하여 권장 사항 알림을 제어합니다. 확장 보기의 표시 작업을 사용하여 권장 보기를 기본적으로 숨깁니다.
	// 
	"extensions.showRecommendationsOnlyOnDemand": false,

	// 사용하도록 설정하면 Node.js 탐색기 개체가 전역 범위에 노출됩니다.
	"extensions.supportNodeGlobalNavigator": false,

	// 확장의 신뢰할 수 없는 작업 영역 지원을 재정의합니다. 'true'를 사용하는 확장은 항상 사용할 수 있습니다. '제한됨'을 사용하는 확장은 항상 사용할 수 있으며, 확장은 신뢰를 필요로 하는 기능을 숨깁니다. 'false'를 사용한 확장은 작업 영역을 신뢰할 수 있는 경우에만 사용할 수 있습니다.
	"extensions.supportUntrustedWorkspaces": {},

	// 확장의 가상 작업 영역 지원을 재정의합니다.
	"extensions.supportVirtualWorkspaces": {},

	// 사용하도록 설정하면 확장을 설치하기 전에 서명된 것으로 확인됩니다.
	"extensions.verifySignature": true,

	// 웹 작업자 확장 호스트를 사용합니다.
	//  - true: 웹 작업자 확장 호스트는 항상 시작됩니다.
	//  - false: 웹 작업자 확장 호스트는 시작되지 않습니다.
	//  - auto: 웹 작업자 확장 호스트는 웹 확장에 필요한 경우 시작됩니다.
	"extensions.webWorker": "auto",

	// A relative path to the workspace where stores the compiled output. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
	"java.project.outputPath": "",

	// Configure glob patterns for referencing local libraries to a Java project.
	"java.project.referencedLibraries": [
		"lib/**/*.jar"
	],

	// Relative paths to the workspace where stores the source files. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
	"java.project.sourcePaths": [],

	// Specifies default mojo execution action when no associated metadata can be detected.
	"java.configuration.maven.defaultMojoExecutionAction": "ignore",

	// Path to Maven's global settings.xml
	"java.configuration.maven.globalSettings": null,

	// Path to Maven's lifecycle mappings xml
	"java.configuration.maven.lifecycleMappings": null,

	// Specifies severity if the plugin execution is not covered by Maven build lifecycle.
	"java.configuration.maven.notCoveredPluginExecutionSeverity": "warning",

	// Path to Maven's user settings.xml
	"java.configuration.maven.userSettings": null,

	// Enable/disable test classpath segregation. When enabled, this permits the usage of test resources within a Maven project as dependencies within the compile scope of other projects.
	"java.import.maven.disableTestClasspathFlag": false,

	// Enable/disable the Maven importer.
	"java.import.maven.enabled": true,

	// Enable/disable the Maven offline mode.
	"java.import.maven.offline.enabled": false,

	// Enable/disable download of Maven source artifacts as part of importing Maven projects.
	"java.maven.downloadSources": false,

	// Force update of Snapshots/Releases.
	"java.maven.updateSnapshots": false,

	// Specifies whether to allow opening multiple instances of the _Commit Graph_ in the editor area
	"gitlens.graph.allowMultiple": true,

	// Specifies whether to show avatar images instead of author initials and remote icons in the _Commit Graph_
	"gitlens.graph.avatars": true,

	// Specifies the visibility of branches on the _Commit Graph_
	//  - all: Shows all branches
	//  - smart: Shows only relevant branches
	//  - current: Shows only the current branch
	//  - favorited: Shows only favorited branches
	"gitlens.graph.branchesVisibility": "all",

	// Specifies the order by which commits will be shown on the _Commit Graph_
	//  - date: Shows commits in reverse chronological order of the commit timestamp
	//  - author-date: Shows commits in reverse chronological order of the author timestamp
	//  - topo: Shows commits in reverse chronological order of the commit timestamp, but avoids intermixing multiple lines of history
	"gitlens.graph.commitOrdering": "date",

	// Specifies how absolute dates will be formatted in the _Commit Graph_, when not specified `gitlens.defaultDateFormat#` is used. Use `full`, `long`, `medium`, `short`, or a custom format, e.g. `MMMM Do, YYYY h:mma`, similar to [Moment.js formats](https://momentjs.com/docs/#/displaying/format/). Only applies when `#gitlens.graph.dateFormat` is set to `absolute`
	"gitlens.graph.dateFormat": null,

	// Specifies how dates will be displayed in the _Commit Graph_, when not specified `gitlens.defaultDateStyle` is used
	//  - null: defaults to `gitlens.defaultDateStyle`
	//  - relative: e.g. 1 day ago
	//  - absolute: e.g. July 25th, 2018 7:18pm
	"gitlens.graph.dateStyle": null,

	// Specifies the default number of items to show in the _Commit Graph_. Use 0 to specify no limit
	"gitlens.graph.defaultItemLimit": 500,

	// Specifies whether to dim (deemphasize) merge commit rows in the _Commit Graph_
	"gitlens.graph.dimMergeCommits": false,

	// Specifies whether to highlight rows associated with the branch / tag when hovering over it in the _Commit Graph_
	"gitlens.graph.highlightRowsOnRefHover": true,

	// Specifies whether to show associated issues on branches in the _Commit Graph_. Requires a connection to a supported issue service (e.g. GitHub)
	"gitlens.graph.issues.enabled": true,

	// Specifies the preferred layout of the _Commit Graph_
	//  - editor: Prefer showing the Commit Graph in the editor area
	//  - panel: Prefer showing the Commit Graph in the bottom panel
	"gitlens.graph.layout": "panel",

	// Specifies additional markers to show on the minimap in the _Commit Graph_
	//  - localBranches: Marks the location of local branches
	//  - remoteBranches: Marks the location of remote branches
	//  - pullRequests: Marks the location of pull requests
	//  - stashes: Marks the location of stashes
	//  - tags: Marks the location of tags
	"gitlens.graph.minimap.additionalTypes": [
		"localBranches",
		"stashes"
	],

	// Specifies the data to show on the minimap in the _Commit Graph_
	//  - commits: Shows the number of commits per day in the minimap
	//  - lines: Shows the number of lines changed per day in the minimap
	"gitlens.graph.minimap.dataType": "commits",

	// Specifies whether to show a minimap of commit activity above the _Commit Graph_
	"gitlens.graph.minimap.enabled": true,

	// Specifies whether to allow selecting multiple commits and whether to restrict the selection topologically in the _Commit Graph_
	//  - false: Disallows selecting multiple commits
	//  - true: Allows selecting multiple commits without restriction
	//  - topological: Allows selecting multiple commits topologically
	"gitlens.graph.multiselect": "topological",

	// Specifies whether to only follow the first parent when showing commits on the _Commit Graph_
	"gitlens.graph.onlyFollowFirstParent": false,

	// Specifies the number of additional items to fetch when paginating in the _Commit Graph_. Use 0 to specify no limit
	"gitlens.graph.pageItemLimit": 200,

	// Specifies whether to show associated pull requests on remote branches in the _Commit Graph_. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.graph.pullRequests.enabled": true,

	// Specifies additional markers to show on the scrollbar in the _Commit Graph_
	//  - localBranches: Marks the location of local branches
	//  - remoteBranches: Marks the location of remote branches
	//  - pullRequests: Marks the location of pull requests
	//  - stashes: Marks the location of stashes
	//  - tags: Marks the location of tags
	"gitlens.graph.scrollMarkers.additionalTypes": [
		"localBranches",
		"stashes"
	],

	// Specifies whether to show markers on the scrollbar in the _Commit Graph_
	"gitlens.graph.scrollMarkers.enabled": true,

	// Specifies the number of rows from the edge at which the graph will scroll when using keyboard or search to change the selected row
	"gitlens.graph.scrollRowPadding": 0,

	// Specifies the number of results to gather when searching in the _Commit Graph_. Use 0 to specify no limit
	"gitlens.graph.searchItemLimit": 100,

	// Specifies when to show the _Commit Details_ view for the selected row in the _Commit Graph_
	//  - false: Never shows the _Commit Details_ view automatically
	//  - open: Shows the _Commit Details_ view automatically only when opening the _Commit Graph_
	//  - selection: Shows the _Commit Details_ view automatically when selection changes in the _Commit Graph_
	"gitlens.graph.showDetailsView": "selection",

	// Specifies whether to show a ghost branch / tag when hovering over or selecting a row in the _Commit Graph_
	"gitlens.graph.showGhostRefsOnRowHover": true,

	// Specifies whether to show remote names on remote branches in the _Commit Graph_
	"gitlens.graph.showRemoteNames": false,

	// Specifies whether to show a local branch's upstream status in the _Commit Graph_
	"gitlens.graph.showUpstreamStatus": true,

	// Specifies whether to show a sidebar on the _Commit Graph_
	"gitlens.graph.sidebar.enabled": true,

	// Specifies whether to show the _Commit Graph_ in the status bar
	"gitlens.graph.statusBar.enabled": true,

	// Enable/disable the annotation processing on Gradle projects and delegate Annotation Processing to JDT APT. Only works for Gradle 5.2 or higher.
	"java.import.gradle.annotationProcessing.enabled": true,

	// Arguments to pass to Gradle.
	"java.import.gradle.arguments": null,

	// Enable/disable the Gradle importer.
	"java.import.gradle.enabled": true,

	// Use Gradle from the specified local installation directory or GRADLE_HOME if the Gradle wrapper is missing or disabled and no 'java.import.gradle.version' is specified.
	"java.import.gradle.home": null,

	// The location to the JVM used to run the Gradle daemon.
	"java.import.gradle.java.home": null,

	// JVM arguments to pass to Gradle.
	"java.import.gradle.jvmArguments": null,

	// Enable/disable the Gradle offline mode.
	"java.import.gradle.offline.enabled": false,

	// Setting for GRADLE_USER_HOME.
	"java.import.gradle.user.home": null,

	// Use Gradle from the specific version if the Gradle wrapper is missing or disabled.
	"java.import.gradle.version": null,

	// Use Gradle from the 'gradle-wrapper.properties' file.
	"java.import.gradle.wrapper.enabled": true,

	// Defines allowed/disallowed SHA-256 checksums of Gradle Wrappers
	"java.imports.gradle.wrapper.checksums": [],

	// Specifies whether to enable the new home preview
	"gitlens.home.preview.enabled": true,

	// Enable/disable the 'auto build'
	"java.autobuild.enabled": true,

	// Specify how to enable the annotation-based null analysis.
	"java.compile.nullAnalysis.mode": "interactive",

	// Specify the Nonnull annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`
	"java.compile.nullAnalysis.nonnull": [
		"javax.annotation.Nonnull",
		"org.eclipse.jdt.annotation.NonNull",
		"org.springframework.lang.NonNull"
	],

	// Specify the NonNullByDefault annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`
	"java.compile.nullAnalysis.nonnullbydefault": [
		"javax.annotation.ParametersAreNonnullByDefault",
		"org.eclipse.jdt.annotation.NonNullByDefault",
		"org.springframework.lang.NonNullApi"
	],

	// Specify the Nullable annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`
	"java.compile.nullAnalysis.nullable": [
		"javax.annotation.Nullable",
		"org.eclipse.jdt.annotation.Nullable",
		"org.springframework.lang.Nullable"
	],

	// Specifies the severity of the message when the classpath is incomplete for a Java file
	"java.errors.incompleteClasspath.severity": "warning",

	// Max simultaneous project builds
	"java.maxConcurrentBuilds": 1,

	// Specifies the url or file path to the workspace Java settings. See [Setting Global Preferences](https://github.com/redhat-developer/vscode-java/wiki/Settings-Global-Preferences)
	"java.settings.url": null,

	// Specifies whether to allow opening multiple instances of the _Launchpad_ as an editor tab
	"gitlens.launchpad.allowMultiple": true,

	// (Experimental) Specifies a limit on the number of pull requests to be queried in the _Launchpad_
	"gitlens.launchpad.experimental.queryLimit": 100,

	// Specifies the organizations to ignore in the _Launchpad_
	"gitlens.launchpad.ignoredOrganizations": [],

	// Specifies the repositories to ignore in the _Launchpad_
	"gitlens.launchpad.ignoredRepositories": [],

	// Specifies the organizations to include in the _Launchpad_. If empty, all organizations are included
	"gitlens.launchpad.includedOrganizations": [],

	// Specifies whether to enable status bar indicator for _Launchpad_
	"gitlens.launchpad.indicator.enabled": true,

	// Specifies the groups of pull requests to show on the _Launchpad_ status bar indicator
	//  - mergeable: Shows mergeable pull requests
	//  - blocked: Shows blocked pull requests
	//  - needs-review: Shows pull requests needing your review
	//  - follow-up: Shows pull requests needing follow-up
	"gitlens.launchpad.indicator.groups": [
		"mergeable",
		"blocked",
		"needs-review",
		"follow-up"
	],

	// Specifies the style of the  _Launchpad_ status bar indicator icon
	//  - default: Shows the Launchpad icon
	//  - group: Shows the icon of the highest priority group
	"gitlens.launchpad.indicator.icon": "default",

	// Specifies the display of the  _Launchpad_ status bar indicator label
	//  - false: Hides the label
	//  - item: Shows the highest priority item which needs your attention
	//  - counts: Shows the status counts of items which need your attention
	"gitlens.launchpad.indicator.label": "item",

	// Specifies whether the status bar indicator will fetch and display pull request data for _Launchpad_
	"gitlens.launchpad.indicator.polling.enabled": true,

	// Specifies the rate (in minutes) at which the status bar indicator will fetch pull request data for _Launchpad_. Use 0 to disable automatic polling
	"gitlens.launchpad.indicator.polling.interval": 30,

	// Specifies whether to use colors on the _Launchpad_ status bar indicator
	"gitlens.launchpad.indicator.useColors": false,

	// Specifies the number of days after which a pull request is considered stale and moved to Other in the _Launchpad_
	"gitlens.launchpad.staleThreshold": null,

	// Specifies whether to enable the preview of _Cloud Patches_, which allow you to privately and securely share code with specific teammates and other developers
	"gitlens.cloudPatches.enabled": true,

	// (Experimental) Specifies the preferred layout of for _Cloud Patches_
	//  - editor: Prefer showing Cloud Patches in the editor area
	//  - view: Prefer showing Cloud Patches in a view
	"gitlens.cloudPatches.experimental.layout": "view",

	// Automatically detect JDKs installed on local machine at startup. If you have specified the same JDK version in `java.configuration.runtimes`, the extension will use that version first.
	"java.configuration.detectJdksAtStart": true,

	// Map Java Execution Environments to local JDKs.
	"java.configuration.runtimes": [],

	// Includes the comments during code formatting.
	"java.format.comments.enabled": true,

	// Enable/disable default Java formatter
	"java.format.enabled": true,

	// Enable/disable automatic block formatting when typing `;`, `<enter>` or `}`
	"java.format.onType.enabled": true,

	// Optional formatter profile name from the Eclipse formatter settings.
	"java.format.settings.profile": null,

	// Specifies the url or file path to the [Eclipse formatter xml settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings).
	"java.format.settings.url": null,

	// Enable/disable chain completion support. Chain completions are only available when completions are invoked by the completions shortcut
	"java.completion.chain.enabled": false,

	// Enable/disable the collapse of overloaded methods in completion items. Overrides `java.completion.guessMethodArguments`.
	"java.completion.collapseCompletionItems": false,

	// Enable/disable code completion support
	"java.completion.enabled": true,

	// [Experimental] Select code completion engine
	//  - ecj: Use ECJ-based code completion engine (default)
	//  - dom: Use (highly experimental) JDT DOM-based code completion engine (requires `java.jdt.ls.javac.enabled` to be `on`)
	"java.completion.engine": "ecj",

	// Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.
	"java.completion.favoriteStaticMembers": [
		"org.junit.Assert.*",
		"org.junit.Assume.*",
		"org.junit.jupiter.api.Assertions.*",
		"org.junit.jupiter.api.Assumptions.*",
		"org.junit.jupiter.api.DynamicContainer.*",
		"org.junit.jupiter.api.DynamicTest.*",
		"org.mockito.Mockito.*",
		"org.mockito.ArgumentMatchers.*",
		"org.mockito.Answers.*"
	],

	// Defines the type filters. All types whose fully qualified name matches the selected filter strings will be ignored in content assist or quick fix proposals and when organizing imports. For example 'java.awt.*' will hide all types from the awt packages.
	"java.completion.filteredTypes": [
		"java.awt.*",
		"com.sun.*",
		"sun.*",
		"jdk.*",
		"org.graalvm.*",
		"io.micrometer.shaded.*"
	],

	// Specify how the arguments will be filled during completion.
	//  - auto: Use 'off' only when using Visual Studio Code - Insiders, other platform will defaults to 'insertBestGuessedArguments'.
	//  - off: Method arguments will not be inserted during completion.
	//  - insertParameterNames: The parameter names will be inserted during completion.
	//  - insertBestGuessedArguments: The best guessed arguments will be inserted during completion according to the code context.
	"java.completion.guessMethodArguments": "auto",

	// Defines the sorting order of import statements. A package or type name prefix (e.g. 'org.eclipse') is a valid entry. An import is always added to the most specific group. As a result, the empty string (e.g. '') can be used to group all other imports. Static imports are prefixed with a '#'
	"java.completion.importOrder": [
		"#",
		"java",
		"javax",
		"org",
		"com",
		""
	],

	// [Experimental] Enable/disable lazily resolving text edits for code completion.
	"java.completion.lazyResolveTextEdit.enabled": true,

	// Specify whether to match case for code completion.
	//  - firstLetter: Match case for the first letter when doing completion.
	//  - off: Do not match case when doing completion.
	"java.completion.matchCase": "firstLetter",

	// Maximum number of completion results (not including snippets).
	// `0` (the default value) disables the limit, all results are returned. In case of performance problems, consider setting a sensible limit.
	"java.completion.maxResults": 0,

	// Enable/disable postfix completion support. `editor.snippetSuggestions` can be used to customize how postfix snippets are sorted.
	"java.completion.postfix.enabled": true,

	// Enable/disable to show the description in signature help.
	"java.signatureHelp.description.enabled": false,

	// Enable/disable the signature help.
	"java.signatureHelp.enabled": true,

	// 대화형 창의 코드 셀이 기본적으로 축소되는지 여부를 제어합니다.
	"interactiveWindow.collapseCellInputCode": "fromEditor",

	// 핫 다시 로드를 위해 Notebook 파일이 더 이상 백업되지 않는 Notebook 출력 크기 제한(KB)입니다. 무제한으로 0을 사용합니다.
	"notebook.backup.sizeLimit": 10000,

	// 사용하도록 설정하면 Notebook 이동 경로에 코드 셀이 포함됩니다.
	"notebook.breadcrumbs.showCodeCells": true,

	// 셀 상태 표시줄에서 셀 실행 시간의 세부 정보 표시를 제어합니다.
	//  - default: 가리킨 항목의 도구 설명에 고급 정보와 함께 셀 실행 기간이 표시됩니다.
	//  - verbose: 가리킨 항목의 도구 설명에 고급 정보와 함께 셀의 마지막 실행 타임스탬프와 기간이 표시됩니다.
	"notebook.cellExecutionTimeVerbosity": "default",

	// 셀 오류에 대해 사용 가능한 진단을 표시합니다.
	"notebook.cellFailureDiagnostics": true,

	// 셀 테두리를 따라 또는 왼쪽 여백에서 포커스 표시기가 렌더링되는 위치를 제어합니다.
	"notebook.cellFocusIndicator": "gutter",

	// 셀 도구 모음을 표시해야 하거나 숨겨야 하는지 여부입니다.
	"notebook.cellToolbarLocation": {
		"default": "right"
	},

	// 셀 도구 모음을 마우스로 가리키거나 클릭할 때 표시할지 여부입니다.
	"notebook.cellToolbarVisibility": "click",

	// 전자 필기장 편집기를 압축된 형식으로 렌더링할지 여부를 제어합니다. 예를 들어 이 기능을 켜면 왼쪽 여백 너비가 줄어듭니다.
	"notebook.compactView": true,

	// 실행 중인 셀을 삭제하기 위해 확인 프롬프트가 필요한지를 제어합니다.
	"notebook.confirmDeleteRunningCell": true,

	// 출력 도구 모음에서 출력 동작을 렌더링할지 여부를 제어합니다.
	"notebook.consolidatedOutputButton": true,

	// 실행 단추 옆의 드롭다운에 추가 작업이 표시되는지 여부를 제어합니다.
	"notebook.consolidatedRunButton": false,

	// 다른 모든 포맷터 설정보다 우선하는 기본 Notebook 포맷터를 정의합니다. 포맷터를 제공하는 확장의 식별자여야 합니다.
	//  - null: None
	//  - formulahendry.auto-rename-tag: Auto rename paired HTML/XML tag
	//  - Bito.Bito: Agentic, codebase-aware AI Code Reviews in your IDE. Bito reviews code instantly without creating a pull request. Catch bugs early, improve quality, and ship faster. Try for free.
	//  - ms-python.black-formatter: Black 포맷터를 사용하여 Python 파일에 대한 서식 지정 지원
	//  - Codeium.codeium: The modern coding superpower: free AI code acceleration plugin for your favorite languages. Type less. Code more. Ship faster.
	//  - GitHub.copilot: Your AI pair programmer
	//  - GitHub.copilot-chat: AI chat features powered by Copilot
	//  - vscode.css-language-features: CSS, LESS 및 SCSS 파일에 대한 다양한 언어 지원을 제공합니다.
	//  - Dart-Code.dart-code: Dart language support and debugger for Visual Studio Code.
	//  - docker.docker: Edit smarter, ship faster with an enhanced Docker-development experience
	//  - Dart-Code.flutter: Flutter support and debugger for Visual Studio Code.
	//  - Zignd.html-css-class-completion: CSS class name completion for the HTML class attribute based on the definitions found in your workspace.
	//  - vscode.html-language-features: HTML 및 Handlebar 파일에 대해 다양한 언어 지원을 제공합니다.
	//  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
	//  - vscode.json-language-features: JSON 파일에 대한 다양한 언어 지원을 제공합니다.
	//  - yzhang.markdown-all-in-one: All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)
	//  - vscode.markdown-language-features: Markdown에 대한 다양한 언어 지원을 제공합니다.
	//  - vscode.markdown-math: 전자 필기장의 Markdown에 수학 지원을 추가합니다.
	//  - adamerose.markdown-wysiwyg: A powerful markdown WYSIWYG editor
	//  - vscode.php-language-features: PHP 파일에 대한 다양한 언어 지원을 제공합니다.
	//  - inferrinizzard.prettier-sql-vscode: VSCode Extension to format SQL files
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - Prisma.prisma: Adds syntax highlighting, formatting, auto-completion, jump-to-definition and linting for .prisma files.
	//  - ms-python.python: Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.
	//  - ms-vscode-remote.remote-ssh-edit: SSH 구성 파일 편집
	//  - humao.rest-client: REST Client for Visual Studio Code
	//  - foxundermoon.shell-format: A formatter for shell scripts, Dockerfile, gitignore, dotenv, /etc/hosts, jvmoptions, and other file types
	//  - jock.svg: SVG Coding, Minify, Pretty, Preview All-In-One
	//  - vscode.typescript-language-features: JavaScript 및 TypeScript에 대한 다양한 언어 지원을 제공합니다.
	//  - Vue.volar: Language Support for Vue
	//  - KevinRose.vsc-python-indent: Correct Python indentation
	//  - ms-azuretools.vscode-containers: Makes it easy to create, manage, and debug containerized applications.
	//  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
	//  - vscjava.vscode-gradle: Manage Gradle Projects, run Gradle tasks and provide better Gradle file authoring experience in VS Code
	//  - ecmel.vscode-html-css: CSS Intellisense for HTML
	//  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
	//  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
	//  - vscjava.vscode-maven: Manage Maven projects, execute goals, generate project from archetype, improve user experience for Java developers.
	//  - fuhidev.vscode-nesttypeorm: Quickly scaffold nest typeorm templates
	//  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
	//  - njqdev.vscode-python-typehint: Type hint completion for Python.
	//  - rangav.vscode-thunder-client: Lightweight Rest API Client for VS Code
	//  - redhat.vscode-xml: XML Language Support by Red Hat
	//  - 343max.android-emulator-launcher: Launch Android Emulators directly from VS Code.
	//  - ms-vscode.azure-repos: 모든 Azure Repos를 원격으로 탐색 및 편집
	//  - vscode.configuration-editing: 설정, 시작 및 확장 추천 파일과 같은 구성 파일에서 기능(고급 IntelliSense, 자동 수정)을 제공합니다.
	//  - Wscats.cors-browser: 🚀Preview file in your default browser
	//  - vscode.debug-auto-launch: 노드 디버그 확장이 비활성화될 때 자동 연결 기능을 위한 도우미입니다.
	//  - vscode.debug-server-ready: 디버깅 중인 서버가 준비되면 브라우저에서 URI를 엽니다.
	//  - ms-python.debugpy: Python Debugger extension using debugpy.
	//  - vscode.emmet: VS Code에 대한 Emmet 지원
	//  - DiemasMichiels.emulate: Run Android emulator and iOS simulator easily from VScode!
	//  - dsznajder.es7-react-js-snippets: Extensions for React, React-Native and Redux in JS/TS with ES7+ syntax. Customizable. Built-in integration with prettier.
	//  - vscode.extension-editing: 확장 제작을 위한 Lint 기능을 제공합니다.
	//  - vscode.git: Git SCM 통합
	//  - vscode.git-base: GIT 고정적 기여 및 선택기입니다.
	//  - mhutchie.git-graph: View a Git Graph of your repository, and perform Git actions from the graph.
	//  - donjayamanne.githistory: View git log, file history, compare branches or commits
	//  - vscode.github: VS Code용 GitHub 기능
	//  - vscode.github-authentication: GitHub 인증 공급자
	//  - eamodio.gitlens: Supercharge Git within VS Code — Visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: VSCode에 Gulp 기능을 추가할 확장입니다.
	//  - VisualStudioExptTeam.intellicode-api-usage-examples: 편집기에서 바로 100,000개가 넘는 다양한 API에 대한 GitHub의 관련 코드 예제를 확인하세요.
	//  - vscode.ipynb: Jupyter의 .ipynb 노트북 파일 열기 및 읽기에 대한 기본 지원을 제공합니다
	//  - vscode.jake: VS Code에 Jake 기능을 추가할 확장입니다.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
	//  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
	//  - ms-vscode.live-server: Hosts a local server in your workspace for you to preview your webpages on.
	//  - n-for-all.live-tailwind-alpine-preview: Edit and preview HTML documents in VS Code with tailwind and alpinejs support
	//  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
	//  - shd101wyy.markdown-preview-enhanced: Markdown Preview Enhanced ported to vscode
	//  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
	//  - vscode.media-preview: 이미지, 오디오 및 비디오에 대한 VS Code 기본 제공 미리 보기를 제공합니다.
	//  - vscode.merge-conflict: 인라인 병합 충돌에 대한 강조 표시 및 명령입니다.
	//  - vscode.microsoft-authentication: Microsoft 인증 공급자
	//  - vscjava.migrate-java-to-azure: Upgrade and migrate your Java applications to Azure
	//  - Cardinal90.multi-cursor-case-preserve: Preserves case when editing with multiple cursors
	//  - loczek.next-js-ts-snippets: A collection of Javascript and Typescript snippets for a awesome React framework called NEXT
	//  - WillLuke.nextjs: Automagicly add types to **nextjs** page functions i.e `getStaticSideProps`, `getServerSideProps` the returned types can not be automatically inferred and passed to the page. This extension also enables type safety in js code by leveraging JSDOCs
	//  - vscode.npm: npm 스크립트에 대한 작업 지원을 추가할 확장입니다.
	//  - christian-kohler.npm-intellisense: Visual Studio Code plugin that autocompletes npm modules in import statements
	//  - christian-kohler.path-intellisense: Visual Studio Code plugin that autocompletes filenames
	//  - vscode.references-view: 사이드바에서 검색 결과를 별도의 안정적인 보기로 참조
	//  - ms-vscode-remote.remote-containers: Docker 컨테이너 내에서 폴더 또는 리포지토리를 열고 Visual Studio Code 전체 기능 집합을 활용합니다.
	//  - ms-vscode.remote-explorer: SSH 및 터널용 원격 컴퓨터를 봅니다.
	//  - ms-vscode.remote-repositories: 원격으로 git 리포지토리 탐색 및 편집
	//  - ms-vscode.remote-server: 터널을 통해 원격 컴퓨터에 연결
	//  - ms-vscode-remote.remote-ssh: SSH를 사용하여 원격 컴퓨터에서 폴더를 열고 VS Code의 전체 기능 집합을 활용합니다.
	//  - ms-vscode-remote.remote-wsl: Linux용 Windows 하위 시스템(WSL)에서 폴더를 열고 Visual Studio Code의 전체 기능 집합을 활용하세요.
	//  - GitHub.remotehub: 모든 GitHub 리포지토리를 원격으로 탐색하고 편집합니다.
	//  - vscode.search-result: 탭된 검색 결과에 대한 구문 강조 표시 및 언어 기능을 제공합니다.
	//  - bbenoist.shell: Execute shell commands from VS Code
	//  - vscode.simple-browser: 웹 콘텐츠를 표시하기 위한 매우 기본적인 기본 제공 웹 보기입니다.
	//  - burkeholland.simple-react-snippets: Dead simple React snippets you will actually use
	//  - qwtel.sqlite-viewer: SQLite Viewer for VS Code
	//  - austenc.tailwind-docs: Easily access the Tailwind CSS documentation from within Code
	//  - bourhaouta.tailwindshades: Tailwind CSS color palette generator
	//  - vscode.terminal-suggest: zsh, bash 및 fish 터미널에 대한 터미널 완성을 추가하는 확장입니다.
	//  - vscode.tunnel-forwarding: 전달 로컬 포트를 인터넷을 통해 액세스할 수 있도록 허용합니다.
	//  - ms-toolsai.vscode-ai-remote: This extension is used by the Azure Machine Learning Extension
	//  - ms-edgedevtools.vscode-edge-devtools: Use the Microsoft Edge Tools from within VS Code to see your site's runtime HTML structure, alter its layout, fix styling issues as well as see your site's network requests.
	//  - github.vscode-github-actions: GitHub Actions workflows and runs for github.com hosted repositories in VS Code
	//  - mkloubert.vscode-http-client: Simple way to do HTTP requests.
	//  - vscjava.vscode-java-dependency: Manage Java projects in Visual Studio Code
	//  - vscjava.vscode-java-test: Run and debug JUnit or TestNG test cases.
	//  - vscjava.vscode-java-upgrade: Upgrade Java project with GitHub Copilot
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - ms-toolsai.vscode-jupyter-cell-tags: Jupyter Cell Tags support for VS Code
	//  - ms-toolsai.vscode-jupyter-powertoys: Experimental features for Jupyter notebook support in VS Code.
	//  - ms-toolsai.vscode-jupyter-slideshow: Jupyter Slide Show support for VS Code
	//  - Lakshmisankar.vscode-lucide-icons: Add Lucide icons to your project
	//  - ms-python.vscode-python-envs: Provides a unified python environment experience
	//  - alexcvzz.vscode-sqlite: Explore and query SQLite databases.
	//  - bradlc.vscode-tailwindcss: Intelligent Tailwind CSS tooling for VS Code
	//  - andrewbranch.vscode-tsserver-debug: Adds a command to restart the TypeScript language server process with a debug port open
	//  - VisualStudioExptTeam.vscodeintellicode: AI 지원 개발
	"notebook.defaultFormatter": null,

	// Notebook에 향상된 텍스트 Diff 편집기를 사용할지 여부입니다.
	"notebook.diff.enablePreview": true,

	// 실험적 Notebook 인라인 diff 편집기를 토글하는 명령을 사용하도록 설정합니다.
	"notebook.diff.experimental.toggleInline": false,

	// 메타데이터 차이 숨기기
	"notebook.diff.ignoreMetadata": false,

	// 출력 차이 숨기기
	"notebook.diff.ignoreOutputs": false,

	// Notebook의 diff 편집기에서 개요 눈금자를 렌더링할지 여부를 지정합니다.
	"notebook.diff.overviewRuler": false,

	// 출력 MIME 형식의 우선순위 목록
	"notebook.displayOrder": [],

	// Notebook 편집기에서 끌어서 놓기를 통해 셀을 이동할 수 있는지 여부를 제어합니다.
	"notebook.dragAndDropEnabled": true,

	// Notebook에서 사용되는 코드 편집기에 대한 설정입니다. 이 항목은 대부분의 editor.* 설정을 사용자 지정하는 데 사용할 수 있습니다.
	"notebook.editorOptionsCustomizations": {},

	// 실험적 생성 작업을 활성화하여 인라인 채팅이 활성화된 코드 셀을 생성합니다.
	"notebook.experimental.generate": true,

	// 프로세스 간 및 원격 연결 간에 Notebook의 바뀐 부분만 저장하도록 설정합니다. 사용하도록 설정할 경우 Notebook의 변경 내용만 확장 호스트로 전송되므로 대용량 Notebook의 성능과 네트워크 속도가 향상됩니다.
	"notebook.experimental.remoteSave": false,

	// 전자 필기장 셀 내에서 검색하기 위한 위젯 찾기 동작을 사용자 지정합니다. 마크업 소스와 마크업 미리 보기가 모두 활성화되면 위젯 찾기는 셀의 현재 상태를 기반으로 소스 코드 또는 미리 보기를 검색합니다.
	"notebook.find.filters": {
		"markupSource": true,
		"markupPreview": true,
		"codeSource": true,
		"codeOutput": true
	},

	// 실행 시 Notebook 셀의 서식을 지정합니다. 포맷터를 사용할 수 있어야 합니다.
	"notebook.formatOnCellExecution": false,

	// 저장 시 Notebook의 형식을 지정합니다. 포맷터를 사용할 수 있어야 하며 편집기를 종료하면 안 됩니다. `files.autoSave`이(가) 'afterDelay'로 설정된 경우 파일은 명시적으로 저장될 때만 형식이 지정됩니다.
	"notebook.formatOnSave.enabled": false,

	// Notebook 편집기 내에서 전역 도구 모음을 렌더링할지 여부를 제어합니다.
	"notebook.globalToolbar": true,

	// Notebook 도구 모음의 작업이 레이블을 렌더링할지 여부를 제어합니다.
	"notebook.globalToolbarShowLabel": "always",

	// 이 옵션을 사용하도록 설정하면 기호로 이동 빠른 선택에서 Notebook의 전체 코드 기호와 Markdown 헤더가 표시됩니다.
	"notebook.gotoSymbols.showAllSymbols": true,

	// 셀 실행 후 Notebook 코드 셀 내에 인라인 값을 표시할지 여부를 제어합니다. [모든 출력 지우기] 도구 모음 단추 또는 'Notebook: 인라인 값 지우기' 명령을 통해 셀을 편집하거나, 다시 실행하거나, 명시적으로 지울 때까지 값이 유지됩니다.
	//  - on: 인라인 값 공급자가 등록되지 않은 경우 regex 대체와 함께 인라인 값을 항상 표시합니다. 참고: 대체를 사용하는 경우 더 큰 셀에서 성능에 영향을 미칠 수 있습니다.
	//  - auto: 인라인 값 공급자가 등록된 경우에만 인라인 값을 표시합니다.
	//  - off: 인라인 값을 표시하지 않습니다.
	"notebook.inlineValues": "off",

	// 사용하도록 설정하면 Notebook을 저장할 때 코드 셀 끝에 마지막 새 줄을 삽입합니다.
	"notebook.insertFinalNewline": false,

	// 셀 삽입 동작이 나타날 위치를 제어합니다.
	//  - betweenCells: 셀 사이에 마우스를 가져가면 표시되는 도구 모음입니다.
	//  - notebookToolbar: 전자 필기장 편집기의 맨 위에 있는 도구 모음입니다.
	//  - both: 두 도구 모음입니다.
	//  - hidden: 삽입 작업은 아무 곳에도 표시되지 않습니다.
	"notebook.insertToolbarLocation": "both",

	// 셀 편집기에서 줄 번호 표시를 제어합니다.
	"notebook.lineNumbers": "off",

	// Notebook에서 Markdown 셀의 선 높이를 픽셀 단위로 제어합니다. `0`(으)로 설정하면 `normal`이(가) 사용됩니다.
	"notebook.markdown.lineHeight": 0,

	// Notebook에서 렌더링된 태그의 글꼴 패밀리를 제어합니다. 비워 두면 기본 워크벤치 글꼴 패밀리로 대체됩니다.
	"notebook.markup.fontFamily": "",

	// 전자 필기장에서 렌더링된 태그의 글꼴 크기(픽셀)를 제어합니다. `0`(으)로 설정하면 `editor.fontSize`의 120%가 사용됩니다.
	"notebook.markup.fontSize": 0,

	// 실험적. Notebook 편집기의 여러 셀에서 제한된 다중 커서 컨트롤 집합을 사용하도록 설정합니다. 현재 지원되는 핵심 편집기 작업(입력/잘라내기/복사/붙여넣기/작성) 및 제한된 편집기 명령의 하위 집합입니다.
	"notebook.multiCursor.enabled": false,

	// 사용하도록 설정한 경우 커서는 셀 편집기의 현재 커서가 첫 번째/마지막 줄에 있을 때 다음/이전 셀로 이동할 수 있습니다.
	"notebook.navigation.allowNavigateToSurroundingCells": true,

	// 사용하도록 설정하면 Notebook 개요에 코드 셀이 표시됩니다.
	"notebook.outline.showCodeCells": false,

	// 사용하도록 설정하면 Notebook 개요에 코드 셀 기호가 표시됩니다. 사용 중인 '#notebook.outline.showCodeCells#'를 사용합니다.
	"notebook.outline.showCodeCellSymbols": true,

	// 사용하도록 설정하면 전자 필기장 개요에 머리글이 포함된 markdown 셀만 표시됩니다.
	"notebook.outline.showMarkdownHeadersOnly": true,

	// 전자 필기장 셀 내의 출력 텍스트의 글꼴 패밀리입니다. 비워 두면 `editor.fontFamily`이(가) 사용됩니다.
	"notebook.output.fontFamily": "",

	// 전자 필기장 셀 내의 출력 텍스트 글꼴 크기입니다. 0으로 설정하면 `editor.fontSize`이(가) 사용됩니다.
	"notebook.output.fontSize": 0,

	// 전자 필기장 셀 내의 출력 텍스트의 줄 높이입니다.
	//  - 0으로 설정하면 편집기 줄 높이가 사용됩니다.
	//  - 0에서 8 사이의 값은 글꼴 크기의 승수로 사용됩니다.
	//  - 8보다 크거나 같은 값이 유효 값으로 사용됩니다.
	"notebook.output.lineHeight": 0,

	// Notebook 셀의 출력에서 파일 경로 링크를 사용하지 않도록 설정할지 여부를 제어합니다.
	"notebook.output.linkifyFilePaths": true,

	// 최소 스타일로 오류 출력을 렌더링할지 여부를 제어합니다.
	"notebook.output.minimalErrorRendering": false,

	// 제한보다 긴 경우 스크롤 가능한 영역에서 Notebook 출력을 처음 렌더링합니다.
	"notebook.output.scrolling": false,

	// 텍스트 출력에 표시되는 텍스트 줄 수를 제어합니다. `notebook.output.scrolling`이(가) 활성화된 경우 이 설정을 사용하여 출력의 스크롤 높이를 결정합니다.
	"notebook.output.textLineLimit": 30,

	// 출력의 줄 바꿈 여부를 제어합니다.
	"notebook.output.wordWrap": false,

	// notebook.cell.executeAndSelectBelow 실행 시 다음 셀을 표시할 때 스크롤할 거리입니다.
	//  - fullCell: 스크롤하여 다음 셀을 완전히 표시합니다.
	//  - firstLine: 스크롤하여 다음 셀의 첫 번째 줄을 표시합니다.
	//  - none: 스크롤하지 마세요.
	"notebook.scrolling.revealNextCellOnExecute": "fullCell",

	// 셀 상태 표시줄 표시 여부가 표시됩니다.
	//  - hidden: 셀 상태 표시줄은 항상 숨겨져 있습니다.
	//  - visible: 셀 상태 표시줄은 항상 표시됩니다.
	//  - visibleAfterExecute: 셀 상태 표시줄은 셀이 실행될 때까지 숨겨집니다. 그런 다음 표시되어 실행 상태를 나타냅니다.
	"notebook.showCellStatusBar": "visible",

	// Markdown 헤더 접기 화살표가 표시되는 시기를 제어합니다.
	//  - always: 접기 컨트롤은 항상 표시됩니다.
	//  - never: 접기 컨트롤을 표시하지 않고 여백 크기를 줄이세요.
	//  - mouseover: 접기 컨트롤은 마우스를 올릴 시에만 표시됩니다.
	"notebook.showFoldingControls": "mouseover",

	// 실험. Notebook 편집기에서 Notebook 고정 스크롤 헤더를 렌더링할지 여부를 제어합니다.
	"notebook.stickyScroll.enabled": false,

	// 중첩된 고정선이 평평한 스택에 표시되는지 또는 들여쓰기된 상태로 표시되는지 제어합니다.
	//  - flat: 중첩된 고정선은 평평한 모양입니다.
	//  - indented: 중첩된 고정선이 들여쓰기된 것으로 나타납니다.
	"notebook.stickyScroll.mode": "indented",

	// 각 셀에 대해 별도의 실행 취소/다시 실행 스택을 사용할지 여부입니다.
	"notebook.undoRedoPerCell": true,

	// 디버그 패널 내에서 실험적 Notebook 변수 보기를 사용하도록 설정합니다.
	"notebook.variablesView": false,

	// 대화형 창을 자동으로 스크롤하여 실행된 마지막 문의 출력을 표시합니다. 이 값이 false이면 마지막 셀이 이미 스크롤된 셀인 경우에만 창이 스크롤됩니다.
	"interactiveWindow.alwaysScrollOnNewCell": true,

	// Shift+Enter를 사용하여 대화형 창(REPL) 입력 상자를 실행하면 Enter를 사용하여 줄 바꿈을 할 수 있습니다.
	"interactiveWindow.executeWithShiftEnter": false,

	// 대화형 창이 닫혀 있을 때 저장하라는 메시지가 표시됩니다. 새 대화형 창만 이 설정 변경의 영향을 받습니다.
	"interactiveWindow.promptToSaveOnClose": false,

	// 코드를 실행하는 방법을 나타내는 힌트를 REPL(대화형 창) 입력 상자에 표시합니다.
	"interactiveWindow.showExecutionHint": true,

	// 활성화된 경우 느린 렌더러가 자동으로 프로파일링됩니다.
	"application.experimental.rendererProfiling": false,

	// 터미널의 탐색기에서 파일을 열 때 어떤 종류의 터미널을 실행할지를 결정합니다.
	//  - integrated: 통합 터미널 작업을 표시합니다.
	//  - external: 외부 터미널 작업을 표시합니다.
	//  - both: 통합 및 외부 터미널 작업을 모두 표시합니다.
	"terminal.explorerKind": "integrated",

	// Linux에서 실행할 터미널을 사용자 지정합니다.
	"terminal.external.linuxExec": "xterm",

	// macOS에서 실행할 터미널 애플리케이션을 사용자 지정합니다.
	"terminal.external.osxExec": "Terminal.app",

	// Windows에서 실행할 터미널을 사용자 지정합니다.
	"terminal.external.windowsExec": "C:\\WINDOWS\\System32\\cmd.exe",

	// 터미널의 소스 제어 리포지토리 보기에서 리포지토리를 열 때 시작할 터미널 종류를 결정합니다.
	//  - integrated: 통합 터미널 작업을 표시합니다.
	//  - external: 외부 터미널 작업을 표시합니다.
	//  - both: 통합 및 외부 터미널 작업을 모두 표시합니다.
	"terminal.sourceControlRepositoriesKind": "integrated",

	// 편집기에서 AI 통계를 사용할지 여부를 제어합니다. 계기는 24시간 동안 AI가 삽입한 코드 양과 수동 입력의 평균을 나타냅니다.
	"editor.aiStats.enabled": false,

	// 자세한 편집 통계에 대한 원격 분석을 활성화할지 여부를 제어합니다(일반 원격 분석이 활성화된 경우에만 통계 전송).
	"telemetry.editStats.details.enabled": false,

	// 편집 통계에 대한 원격 분석을 활성화할지 여부를 제어합니다(일반 원격 분석이 활성화된 경우에만 통계 전송).
	"telemetry.editStats.enabled": true,

	// 원격 분석 편집을 위한 장식을 표시할지 여부를 제어합니다.
	"telemetry.editStats.showDecorations": false,

	// 원격 분석 편집을 위한 상태 표시줄을 표시할지 여부를 제어합니다.
	"telemetry.editStats.showStatusBar": false,

	// 자동 작업 활성화 - 작업은 신뢰할 수 없는 작업 영역에서 실행되지 않습니다.
	//  - on: 항상
	//  - off: 사용 안 함
	"task.allowAutomaticTasks": "on",

	// 모든 작업 공급자 확장에 `provideTasks`의 사용 여부를 제어합니다. Tasks: Run Task 명령이 느린 경우 작업 공급자에 대한 자동 검색을 사용하지 않도록 설정하면 도움이 될 수 있습니다. 또한 개별 확장은 자동 검색을 사용하지 않도록 하는 설정을 제공합니다.
	"task.autoDetect": "on",

	// 작업을 실행할 때 문제 선택기 프롬프트를 표시할지 여부를 구성합니다. 'true'로 설정하여 프롬프트하지 않거나 작업 유형 사전을 사용하여 특정 작업 유형에 대해서만 프롬프트를 해제합니다.
	"task.problemMatchers.neverPrompt": false,

	// 작업 빠른 선택에 세부 정보가 있는 작업의 작업 세부 정보를 표시할지를 제어합니다(예: 작업 실행).
	"task.quickOpen.detail": true,

	// 작업 Quick Open 대화 상자에서 추적된 최근 항목의 수를 제어합니다.
	"task.quickOpen.history": 30,

	// 작업: 작업 실행 명령에서 공급자별로 작업을 그룹화하는 빠른 두 수준 선택기 대신 느린 "모두 표시" 동작을 사용하게 합니다.
	"task.quickOpen.showAll": false,

	// 선택할 작업이 하나만 있는 경우 작업 빠른 선택을 건너뛰는지 여부를 제어합니다.
	"task.quickOpen.skip": false,

	// 창을 다시 로드할 때 문제 선택기가 있는 작업에 다시 연결합니다.
	"task.reconnection": true,

	// 작업을 실행하기 전에 모든 더티 편집기를 저장합니다.
	//  - always: 실행하기 전에 항상 모든 편집기를 저장합니다.
	//  - never: 실행하기 전에 편집기를 저장하지 않습니다.
	//  - prompt: 실행하기 전에 편집기를 저장할지 여부를 묻는 메시지를 표시합니다.
	"task.saveBeforeRun": "always",

	// 공급자 속도가 느린 경우 경고를 표시할지 여부를 구성합니다.
	"task.slowProviderWarning": true,

	// 작업에 대한 자세한 정보 로깅을 활성화합니다.
	"task.verboseLogging": false,

	// 공급자는 기본적으로 사용하도록 설정되어 있습니다. 공급자의 ID를 'false'로 설정하여 생략합니다.
	"terminal.integrated.suggest.providers": {
		"lsp": false,
		"terminal-suggest": true
	},

	// 대신 `chat.tools.terminal.autoApprove`을(를) 사용하세요.
	// 
	"chat.agent.terminal.allowList": null,

	// 대신 `chat.tools.terminal.autoApprove`을(를) 사용하세요.
	// 
	"chat.agent.terminal.autoApprove": null,

	// 대신 `chat.tools.terminal.autoApprove`을(를) 사용하세요.
	// 
	"chat.agent.terminal.denyList": null,

	// 터미널 도구 명령에서 실행하려면 명시적 승인이 필요한지 여부를 제어하는 명령 또는 정규식 목록입니다. 이 목록은 명령의 시작 부분과 일치합니다. 문자열을 `/` 문자로 래핑하고 `i`와(과) 같은 선택적 플래그를 사용하여(대소문자 구분 없음) 정규식을 제공할 수 있습니다.
	// 
	// 명령을 자동으로 승인하려면 `true`(으)로 설정하고, 항상 명시적 승인을 요구하려면 `false`(으)로 설정하거나, 값을 해제하려면 `null`(으)로 설정합니다.
	// 
	// 이러한 명령과 정규식은 전체 _command line_ 내의 모든 _sub-command_에 대해 평가되므로, 예를 들어 `foo && bar`은(는) `true` 항목과 일치하려면 `foo` 및 `bar`이(가) 모두 필요하며, 자동 승인되려면 `false` 항목과는 일치하지 않아야 합니다. `$(foo)`(명령 대체) 또는 `<(foo)`(프로세스 대체)와 같은 인라인 명령은 현재 이러한 패턴을 감지하는 광범위한 규칙을 통해 기본적으로 차단됩니다.
	// 
	// 개체를 사용하여 하위 명령과 인라인 명령을 일치시키는 대신 전체 명령줄과 일치시킬 수 있습니다. 예: `{ approve: false, matchCommandLine: true }`. 자동으로 승인되려면 하위 명령과 명령줄 _둘 다_명시적으로 거부되지 않아야 하며, 그 후에 모든 하위 명령 _또는_ 명령줄이 승인되어야 합니다.
	// 
	// 예:
	// |값|설명|
	// |---|---|
	// | `"mkdir": true` | `mkdir`(으)로 시작하는 모든 명령 허용
	// | `"npm run build": true` | `npm run build`(으)로 시작하는 모든 명령 허용
	// | `"bin/test.sh": true` | 경로 `bin/test.sh`(`bin\test.sh`, `./bin/test.sh`등)과(와) 일치하는 모든 명령 허용
	// | `"/^git (status\|show\\b.*)$/": true` | `git status` 허용 및 `git show`(으)로 시작하는 모든 명령 허용
	// | `"/^Get-ChildItem\\b/i": true` | 대/소문자 구분에 관계없이 `Get-ChildItem` 명령 허용
	// | `"/.*/": true` | 모든 명령 허용(거부된 명령은 여전히 승인 필요)
	// | `"rm": false` | `rm`(으)로 시작하는 모든 명령에 대해 명시적 승인 요구
	// | `"/\\.ps1/i": { approve: false, matchCommandLine: true }` | 대/소문자에 관계없이 `".ps1"`이(가) 포함된 모든 _command line_에 대해 명시적 승인 요구
	// | `"rm": null` | `false`에 대한 기본 `rm` 값 설정 해제
	"chat.tools.terminal.autoApprove": {
		"cd": true,
		"echo": true,
		"ls": true,
		"pwd": true,
		"cat": true,
		"head": true,
		"tail": true,
		"findstr": true,
		"wc": true,
		"tr": true,
		"cut": true,
		"cmp": true,
		"which": true,
		"basename": true,
		"dirname": true,
		"realpath": true,
		"readlink": true,
		"stat": true,
		"file": true,
		"du": true,
		"df": true,
		"sleep": true,
		"git status": true,
		"git log": true,
		"git show": true,
		"git diff": true,
		"Get-ChildItem": true,
		"Get-Content": true,
		"Get-Date": true,
		"Get-Random": true,
		"Get-Location": true,
		"Write-Host": true,
		"Write-Output": true,
		"Split-Path": true,
		"Join-Path": true,
		"Start-Sleep": true,
		"Where-Object": true,
		"/^Select-[a-z0-9]/i": true,
		"/^Measure-[a-z0-9]/i": true,
		"/^Compare-[a-z0-9]/i": true,
		"/^Format-[a-z0-9]/i": true,
		"/^Sort-[a-z0-9]/i": true,
		"column": true,
		"/^column\\b.*-c\\s+[0-9]{4,}/": false,
		"date": true,
		"/^date\\b.*(-s|--set)\\b/": false,
		"find": true,
		"/^find\\b.*-(delete|exec|execdir|fprint|fprintf|fls|ok|okdir)\\b/": false,
		"grep": true,
		"/^grep\\b.*-(f|P)\\b/": false,
		"sort": true,
		"/^sort\\b.*-(o|S)\\b/": false,
		"tree": true,
		"/^tree\\b.*-o\\b/": false,
		"/\\(.+\\)/": {
			"approve": false,
			"matchCommandLine": true
		},
		"/\\{.+\\}/": {
			"approve": false,
			"matchCommandLine": true
		},
		"/`.+`/": {
			"approve": false,
			"matchCommandLine": true
		},
		"rm": false,
		"rmdir": false,
		"del": false,
		"Remove-Item": false,
		"ri": false,
		"rd": false,
		"erase": false,
		"dd": false,
		"kill": false,
		"ps": false,
		"top": false,
		"Stop-Process": false,
		"spps": false,
		"taskkill": false,
		"taskkill.exe": false,
		"curl": false,
		"wget": false,
		"Invoke-RestMethod": false,
		"Invoke-WebRequest": false,
		"irm": false,
		"iwr": false,
		"chmod": false,
		"chown": false,
		"Set-ItemProperty": false,
		"sp": false,
		"Set-Acl": false,
		"jq": false,
		"xargs": false,
		"eval": false,
		"Invoke-Expression": false,
		"iex": false
	},

	// 터미널 도구에서 실행 시 자동 승인을 허용할지 여부를 제어합니다.
	"chat.tools.terminal.enableAutoApprove": true,

	// 터미널 도구에서 실행이 새 터미널을 시작할 때 셸 통합이 감지될 때까지 기다리는 기간(밀리초)을 구성합니다. 최소 시간을 기다리려면 '0'으로 설정합니다. 기본값 '-1'은 대기 시간이 `terminal.integrated.shellIntegration.enabled` 값과 원격 창인지 여부에 따라 가변적임을 의미합니다. 셸이 매우 느리게 시작되는 경우 큰 값이 유용할 수 있고 의도적으로 셸 통합을 사용하지 않는 경우 낮은 값이 유용할 수 있습니다.
	"chat.tools.terminal.shellIntegrationTimeout": -1,

	// 대신 `chat.tools.terminal.autoApprove`을(를) 사용하세요.
	// 
	"github.copilot.chat.agent.terminal.allowList": null,

	// 대신 `chat.tools.terminal.autoApprove`을(를) 사용하세요.
	// 
	"github.copilot.chat.agent.terminal.denyList": null,

	// 명령이 실행될 때 터미널 접근성 보기에 포커스를 둡니다.
	"terminal.integrated.accessibleViewFocusOnCommandExecution": false,

	// 버퍼의 맨 아래로 설정하는 대신 터미널의 액세스 가능 보기를 다시 열 때 커서 위치를 유지합니다.
	"terminal.integrated.accessibleViewPreserveCursorPosition": false,

	// 터미널에서 동시 키 바인딩을 허용할지 여부입니다. 이 설정이 true이고 키 입력이 동시에 발생하는 경우 `terminal.integrated.commandsToSkipShell`이(가) 무시되고, 이 설정을 false로 설정하면 <Ctrl+K>를 눌러 셸(VS Code 아님)로 이동하려는 경우에 특히 유용합니다.
	"terminal.integrated.allowChords": true,

	// 터미널에서 링크를 열 수 있는 URI 체계를 포함하는 문자열 배열입니다. 기본적으로 보안상의 이유로 가능한 구성표의 작은 하위 집합만 허용됩니다.
	"terminal.integrated.allowedLinkSchemes": [
		"file",
		"http",
		"https",
		"mailto",
		"vscode",
		"vscode-insiders"
	],

	// 메뉴 모음 니모닉(예: Alt+F)이 메뉴 모음의 열기를 트리거하도록 허용할지입니다. 이렇게 하면 true일 때 모든 대체 키 입력이 셸을 건너뜁니다. macOS에서는 아무 작업도 수행하지 않습니다.
	"terminal.integrated.allowMnemonics": false,

	// 사용하도록 설정한 경우, `editor.multiCursorModifier`이(가) `'alt'`(기본값)(으)로 설정되어 있으면 Alt/option+클릭할 때 프롬프트 커서가 마우스 아래로 위치가 변경됩니다. 이 옵션은 셸에 따라 안정적으로 작동하지 않을 수 있습니다.
	"terminal.integrated.altClickMovesCursor": true,

	// 작업 및 디버그와 같은 자동화 관련 터미널 사용을 위해 Linux에서 사용할 터미널 프로필입니다.
	"terminal.integrated.automationProfile.linux": null,

	// macOS에서 작업 및 디버그와 같은 자동화 관련 터미널 사용에 사용할 터미널 프로필입니다.
	"terminal.integrated.automationProfile.osx": null,

	// 작업 및 디버그와 같은 자동화 관련 터미널 사용을 위해 사용할 터미널 프로필입니다. 이 설정은 현재 `terminal.integrated.automationShell.windows`(현재 사용되지 않음)이(가) 설정된 경우 무시됩니다.
	"terminal.integrated.automationProfile.windows": null,

	// 터미널에서 발견되면 자동으로 응답되는 메시지 집합입니다. 메시지가 충분히 구체적인 경우 일반적인 응답을 자동화하는 데 도움이 될 수 있습니다. 
	// 
	// 비고:
	// 
	// - `"Terminate batch job (Y/N)": "Y\r"`을(를) 사용하여 Windows에서 일괄 작업 종료 프롬프트에 자동으로 응답합니다.
	// - 메시지에는 이스케이프 시퀀스가 포함되어 있어 스타일이 지정된 텍스트에서는 응답이 발생하지 않을 수 있습니다.
	// - 각 회신은 1초에 한 번만 발생할 수 있습니다.
	// - Enter 키를 의미하려면 회신에 `"\r"`을(를) 사용하세요.
	// - 기본 키를 설정 해제하려면 값을 null로 설정하세요.
	// - 새 항목이 적용되지 않으면 VS Code를 다시 시작합니다.
	"terminal.integrated.autoReplies": {},

	// 트리거될 때 터미널 탭 내에 벨을 표시할 시간(밀리초)입니다.
	"terminal.integrated.bellDuration": 1000,

	// 키 바인딩이 셸에 전송되지 않고 항상 VS Code에서 처리되는 명령 ID 세트입니다. 따라서 보통은 셸에서 사용되어 터미널에 포커스가 없을 때와 동일하게 작동하는 키 바인딩을 사용할 수 있습니다(예: 'Ctrl+P'를 사용하여 Quick Open 시작).
	// 
	// &nbsp;
	// 
	// 기본적으로 많은 명령을 건너뜁니다. 기본값을 재정의하고 명령의 키 바인딩을 셸로 대신 전달하려면 '-' 문자로 시작하는 명령을 추가합니다. 예를 들어 'Ctrl+P'를 사용하여 셸에 도달하려면 '-workbench.action.quickOpen'을 추가합니다.
	// 
	// &nbsp;
	// 
	// 설정 편집기에서 볼 때 다음의 기본 건너뛴 명령 목록이 잘립니다. 전체 목록을 보려면 [기본 설정 JSON 열기](command:workbench.action.openRawDefaultSettings '기본 설정 열기(JSON)')하고 아래 목록에서 첫 번째 명령을 검색합니다.
	// 
	// &nbsp
	// 
	// 기본 건너뛴 명령:
	// 
	// - editor.action.accessibilityHelp
	// - editor.action.toggleTabFocusMode
	// - notification.acceptPrimaryAction
	// - notifications.hideList
	// - notifications.hideToasts
	// - runCommands
	// - workbench.action.closeQuickOpen
	// - workbench.action.debug.continue
	// - workbench.action.debug.disconnect
	// - workbench.action.debug.pause
	// - workbench.action.debug.restart
	// - workbench.action.debug.run
	// - workbench.action.debug.start
	// - workbench.action.debug.stepInto
	// - workbench.action.debug.stepOut
	// - workbench.action.debug.stepOver
	// - workbench.action.debug.stop
	// - workbench.action.firstEditorInGroup
	// - workbench.action.focusActiveEditorGroup
	// - workbench.action.focusEighthEditorGroup
	// - workbench.action.focusFifthEditorGroup
	// - workbench.action.focusFirstEditorGroup
	// - workbench.action.focusFourthEditorGroup
	// - workbench.action.focusLastEditorGroup
	// - workbench.action.focusNextPart
	// - workbench.action.focusPreviousPart
	// - workbench.action.focusSecondEditorGroup
	// - workbench.action.focusSeventhEditorGroup
	// - workbench.action.focusSixthEditorGroup
	// - workbench.action.focusThirdEditorGroup
	// - workbench.action.lastEditorInGroup
	// - workbench.action.navigateDown
	// - workbench.action.navigateLeft
	// - workbench.action.navigateRight
	// - workbench.action.navigateUp
	// - workbench.action.nextEditor
	// - workbench.action.nextEditorInGroup
	// - workbench.action.nextPanelView
	// - workbench.action.nextSideBarView
	// - workbench.action.openNextRecentlyUsedEditor
	// - workbench.action.openNextRecentlyUsedEditorInGroup
	// - workbench.action.openPreviousRecentlyUsedEditor
	// - workbench.action.openPreviousRecentlyUsedEditorInGroup
	// - workbench.action.previousEditor
	// - workbench.action.previousEditorInGroup
	// - workbench.action.previousPanelView
	// - workbench.action.previousSideBarView
	// - workbench.action.quickOpen
	// - workbench.action.quickOpenLeastRecentlyUsedEditor
	// - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenPreviousEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenView
	// - workbench.action.showCommands
	// - workbench.action.tasks.build
	// - workbench.action.tasks.reRunTask
	// - workbench.action.tasks.rerunForActiveTerminal
	// - workbench.action.tasks.restartTask
	// - workbench.action.tasks.runTask
	// - workbench.action.tasks.showLog
	// - workbench.action.tasks.showTasks
	// - workbench.action.tasks.terminate
	// - workbench.action.tasks.test
	// - workbench.action.terminal.acceptSelectedSuggestion
	// - workbench.action.terminal.acceptSelectedSuggestionEnter
	// - workbench.action.terminal.chat.cancel
	// - workbench.action.terminal.chat.close
	// - workbench.action.terminal.chat.discard
	// - workbench.action.terminal.chat.feedbackHelpful
	// - workbench.action.terminal.chat.feedbackReportIssue
	// - workbench.action.terminal.chat.feedbackUnhelpful
	// - workbench.action.terminal.chat.insertCommand
	// - workbench.action.terminal.chat.makeRequest
	// - workbench.action.terminal.chat.runCommand
	// - workbench.action.terminal.chat.start
	// - workbench.action.terminal.chat.viewInChat
	// - workbench.action.terminal.clear
	// - workbench.action.terminal.clearSelection
	// - workbench.action.terminal.copyAndClearSelection
	// - workbench.action.terminal.copyLastCommand
	// - workbench.action.terminal.copyLastCommandAndLastCommandOutput
	// - workbench.action.terminal.copyLastCommandOutput
	// - workbench.action.terminal.copySelection
	// - workbench.action.terminal.copySelectionAsHtml
	// - workbench.action.terminal.deleteToLineStart
	// - workbench.action.terminal.deleteWordLeft
	// - workbench.action.terminal.deleteWordRight
	// - workbench.action.terminal.findNext
	// - workbench.action.terminal.findPrevious
	// - workbench.action.terminal.focus
	// - workbench.action.terminal.focusAccessibleBuffer
	// - workbench.action.terminal.focusAtIndex1
	// - workbench.action.terminal.focusAtIndex2
	// - workbench.action.terminal.focusAtIndex3
	// - workbench.action.terminal.focusAtIndex4
	// - workbench.action.terminal.focusAtIndex5
	// - workbench.action.terminal.focusAtIndex6
	// - workbench.action.terminal.focusAtIndex7
	// - workbench.action.terminal.focusAtIndex8
	// - workbench.action.terminal.focusAtIndex9
	// - workbench.action.terminal.focusFind
	// - workbench.action.terminal.focusHover
	// - workbench.action.terminal.focusNext
	// - workbench.action.terminal.focusNextPane
	// - workbench.action.terminal.focusPrevious
	// - workbench.action.terminal.focusPreviousPane
	// - workbench.action.terminal.goToRecentDirectory
	// - workbench.action.terminal.hideFind
	// - workbench.action.terminal.hideSuggestWidget
	// - workbench.action.terminal.kill
	// - workbench.action.terminal.killEditor
	// - workbench.action.terminal.moveToEditor
	// - workbench.action.terminal.moveToLineEnd
	// - workbench.action.terminal.moveToLineStart
	// - workbench.action.terminal.moveToTerminalPanel
	// - workbench.action.terminal.new
	// - workbench.action.terminal.newInActiveWorkspace
	// - workbench.action.terminal.newInNewWindow
	// - workbench.action.terminal.paste
	// - workbench.action.terminal.pasteSelection
	// - workbench.action.terminal.requestCompletions
	// - workbench.action.terminal.resizePaneDown
	// - workbench.action.terminal.resizePaneLeft
	// - workbench.action.terminal.resizePaneRight
	// - workbench.action.terminal.resizePaneUp
	// - workbench.action.terminal.runActiveFile
	// - workbench.action.terminal.runRecentCommand
	// - workbench.action.terminal.runSelectedText
	// - workbench.action.terminal.scrollDown
	// - workbench.action.terminal.scrollDownPage
	// - workbench.action.terminal.scrollToBottom
	// - workbench.action.terminal.scrollToNextCommand
	// - workbench.action.terminal.scrollToPreviousCommand
	// - workbench.action.terminal.scrollToTop
	// - workbench.action.terminal.scrollUp
	// - workbench.action.terminal.scrollUpPage
	// - workbench.action.terminal.searchWorkspace
	// - workbench.action.terminal.selectAll
	// - workbench.action.terminal.selectNextPageSuggestion
	// - workbench.action.terminal.selectNextSuggestion
	// - workbench.action.terminal.selectPrevPageSuggestion
	// - workbench.action.terminal.selectPrevSuggestion
	// - workbench.action.terminal.selectToNextCommand
	// - workbench.action.terminal.selectToNextLine
	// - workbench.action.terminal.selectToPreviousCommand
	// - workbench.action.terminal.selectToPreviousLine
	// - workbench.action.terminal.sendSequence
	// - workbench.action.terminal.sizeToContentWidth
	// - workbench.action.terminal.split
	// - workbench.action.terminal.splitInActiveWorkspace
	// - workbench.action.terminal.suggestToggleDetails
	// - workbench.action.terminal.suggestToggleDetailsFocus
	// - workbench.action.terminal.toggleFindCaseSensitive
	// - workbench.action.terminal.toggleFindRegex
	// - workbench.action.terminal.toggleFindWholeWord
	// - workbench.action.terminal.toggleTerminal
	// - workbench.action.toggleFullScreen
	// - workbench.action.toggleMaximizedPanel
	// - workbench.action.togglePanel
	"terminal.integrated.commandsToSkipShell": [],

	// 활성 터미널 세션이 있는 경우 창을 닫을 때 확인할지 여부를 제어합니다. 일부 확장에서 시작한 것과 같은 백그라운드 터미널은 확인을 트리거하지 않습니다.
	//  - never: 확인하지 마세요.
	//  - always: 터미널이 있는지 항상 확인합니다.
	//  - hasChildProcesses: 자식 프로세스가 있는 터미널이 있는지 확인합니다.
	"terminal.integrated.confirmOnExit": "never",

	// 자식 프로세스가 있을 때 종료 터미널을 확인할지 여부를 제어합니다. 편집기로 설정하면 편집기 영역의 터미널에 자식 프로세스가 있을 때 변경된 상태로 표시됩니다. 자식 프로세스 감지는 셸의 자식 프로세스로 프로세스를 실행하지 않는 Git Bash와 같은 셸에서는 제대로 작동하지 않을 수 있습니다. 일부 확장 프로그램에서 실행된 것과 같은 백그라운드 터미널은 확인을 트리거하지 않습니다.
	//  - never: 확인하지 마세요.
	//  - editor: 터미널이 편집기에 있는지 확인합니다.
	//  - panel: 터미널이 패널에 있는지 확인합니다.
	//  - always: 터미널이 편집기 또는 패널에 있는지 확인합니다.
	"terminal.integrated.confirmOnKill": "editor",

	// 터미널에서 선택한 텍스트를 클립보드에 복사할지 여부를 제어합니다.
	"terminal.integrated.copyOnSelection": false,

	// 터미널 커서가 깜박이는지 여부를 제어합니다.
	"terminal.integrated.cursorBlinking": false,

	// 터미널에 포커스가 있을 때 터미널 커서의 스타일을 제어합니다.
	"terminal.integrated.cursorStyle": "block",

	// 터미널에 포커스가 없을 때 터미널 커서의 스타일을 제어합니다.
	"terminal.integrated.cursorStyleInactive": "outline",

	// `terminal.integrated.cursorStyle` 설정이 `line`(으)로 설정되어 있을 때 커서의 넓이를 제어합니다.
	"terminal.integrated.cursorWidth": 1,

	// 일반적으로 연속선으로 더 나은 렌더링을 생성하는 글꼴을 사용하는 대신 블록 요소 및 상자 그리기 문자에 사용자 지정 문자 모양을 사용할지를 결정합니다. `terminal.integrated.gpuAcceleration`이(가) 비활성화되어 있는 경우 작동하지 않습니다.
	"terminal.integrated.customGlyphs": true,

	// 터미널이 시작되는 명시적 시작 경로이며, 셸 프로세스의 cwd(현재 작업 디렉터리)로 사용됩니다. 루트 디렉터리가 편리한 cwd가 아닌 경우, 작업 영역 설정에서 특히 유용할 수 있습니다.
	"terminal.integrated.cwd": "",

	// 새로 만든 터미널이 표시되는 위치를 제어합니다.
	//  - editor: 편집기에서 터미널 만들기
	//  - view: 터미널 보기에서 터미널 만들기
	"terminal.integrated.defaultLocation": "view",

	// Linux의 기본 터미널 프로필입니다.
	"terminal.integrated.defaultProfile.linux": null,

	// macOS의 기본 터미널 프로필입니다.
	"terminal.integrated.defaultProfile.osx": null,

	// Windows의 기본 터미널 프로필입니다.
	//  - null: 자동으로 기본값 검색
	//  - PowerShell: $(terminal-powershell) PowerShell
	// - path: C:\Program Files\PowerShell\7\pwsh.exe
	//  - Windows PowerShell: $(terminal-powershell) Windows PowerShell
	// - path: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
	//  - Git Bash: $(terminal) Git Bash
	// - path: C:\Program Files\Git\bin\bash.exe
	// - args: ['--login','-i']
	//  - Command Prompt: $(terminal-cmd) Command Prompt
	// - path: C:\WINDOWS\System32\cmd.exe
	// - args: []
	//  - PowerShell 7: $(terminal) PowerShell 7
	// - path: C:\Program Files\PowerShell\7\pwsh.exe
	//  - Ubuntu (WSL): $(terminal) Ubuntu (WSL)
	// - path: C:\WINDOWS\System32\wsl.exe
	// - args: ['-d','Ubuntu']
	//  - JavaScript 디버그 터미널: $($(debug)) JavaScript 디버그 터미널
	// - extensionIdentifier: ms-vscode.js-debug
	"terminal.integrated.defaultProfile.windows": null,

	// VS Code 터미널은 셸에서 들어오는, UTF-8로 인코딩된 데이터만 지원하므로 '$LANG' 환경 변수를 검색하고 UTF-8 규격 옵션으로 설정할지 여부를 제어합니다.
	//  - auto: 기존 변수가 없거나 `'.UTF-8'`로 끝나지 않는 경우 '$LANG' 환경 변수를 설정합니다.
	//  - off: '$LANG' 환경 변수를 설정하지 않습니다.
	//  - on: 항상 '$LANG' 환경 변수를 설정합니다.
	"terminal.integrated.detectLocale": "auto",

	// 터미널의 굵은 텍스트에 항상 "밝은" ANSI 색 변형을 사용할지 여부를 제어합니다.
	"terminal.integrated.drawBoldTextInBrightColors": true,

	// 이제 더 이상 사용되지 않습니다. 대신 'terminal.integrated.enableVisualBel' 및 'accessibility.signals.terminalBel' 설정을 사용합니다.
	// 
	"terminal.integrated.enableBell": false,

	// 터미널에서 파일 링크를 사용할지 여부입니다. 파일 시스템에서 각 파일 링크를 확인하기 때문에 특히 네트워크 드라이브에서 작업하는 경우 링크가 느릴 수 있습니다. 이 설정을 변경하면 새 터미널에서만 적용됩니다.
	//  - off: 항상 꺼져 있습니다.
	//  - on: 항상 켜져 있습니다.
	//  - notRemote: 원격 작업 영역에 없는 경우에만 사용합니다.
	"terminal.integrated.enableFileLinks": "on",

	// 터미널에서 이미지 지원을 사용하도록 설정합니다. 이 기능은 `terminal.integrated.gpuAcceleration#` 사용하도록 설정된 경우에만 작동합니다. Linux 및 macOS에서는 sixel 및 iTerm의 인라인 이미지 프로토콜이 모두 지원됩니다. 이 작업은 Windows 자체와 함께 제공되는 ConPTY >= v2 버전에서만 작동합니다. `#terminal.integrated.windowsUseConptyDll` 참조하세요. 현재 창 다시 로드/다시 연결 간에 이미지가 복원되지 않습니다.
	"terminal.integrated.enableImages": false,

	// 터미널에 여러 줄을 붙여넣을 때 경고 대화 상자를 표시할지 여부를 제어합니다.
	//  - auto: 경고를 사용하도록 설정하지만 다음과 같은 경우 표시하지 않습니다.
	// 
	// - 대괄호 붙여넣기 모드가 사용되는 경우(셸은 기본적으로 여러 줄 붙여넣기를 지원함)
	// - 붙여넣기는 셸의 readline에서 처리됩니다(pwsh의 경우).
	//  - always: 텍스트에 새 줄이 포함된 경우 항상 경고를 표시합니다.
	//  - never: 경고를 표시하지 않습니다.
	"terminal.integrated.enableMultiLinePasteWarning": "auto",

	// 창 다시 로드에서 작업 영역에 대한 터미널 세션/기록을 유지합니다.
	"terminal.integrated.enablePersistentSessions": true,

	// 시각적 터미널 벨을 사용할 수 있는지 여부를 제어합니다. 터미널 이름 옆에 표시됩니다.
	"terminal.integrated.enableVisualBell": false,

	// Linux 터미널에서 사용할 VS Code 프로세스에 추가되는 환경 변수를 포함하는 개체입니다. 환경 변수를 삭제하려면 'null'로 설정합니다.
	"terminal.integrated.env.linux": {},

	// macOS 터미널에서 사용할 VS Code 프로세스에 추가되는 환경 변수를 포함하는 개체입니다. 환경 변수를 삭제하려면 'null'로 설정합니다.
	"terminal.integrated.env.osx": {},

	// Windows 터미널에서 사용할 VS Code 프로세스에 추가되는 환경 변수를 포함하는 개체입니다. 환경 변수를 삭제하려면 'null'로 설정합니다.
	"terminal.integrated.env.windows": {},

	// 확장이 터미널 환경을 변경했거나 변경하려고 하는지 여부를 설명하는 환경 변경 표시기를 각 터미널에 표시할지 여부입니다.
	//  - off: 표시기를 사용하지 않도록 설정합니다.
	//  - on: 표시기를 사용하도록 설정합니다.
	//  - warnonly: 터미널 환경이 '부실'한 경우 경고 표시기만 표시하고, 터미널 환경이 확장을 통해 수정되었음을 나타내는 정보 표시기는 표시하지 않습니다.
	"terminal.integrated.environmentChangesIndicator": "warnonly",

	// 확장이 환경에 기여하기를 원하지만, 아직 상호 작용하지 않은 경우 터미널을 자동으로 다시 시작할지 여부입니다.
	"terminal.integrated.environmentChangesRelaunch": true,

	// 'Alt' 키를 누를 때의 스크롤 속도 승수입니다.
	"terminal.integrated.fastScrollSensitivity": 5,

	// '터미널: 활성 터미널에서 선택한 텍스트 실행'이 실행된 후 터미널, 액세스 가능한 버퍼 또는 둘 다 포커스를 지정할지 여부를 제어합니다.
	//  - terminal: 항상 터미널에 포커스를 지정합니다.
	//  - accessible-buffer: 항상 액세스 가능한 버퍼에 집중합니다.
	//  - none: 아무 작업도 하지 않습니다.
	"terminal.integrated.focusAfterRun": "none",

	// 터미널의 글꼴 패밀리를 제어합니다. 기본값은 `editor.fontFamily` 값입니다.
	"terminal.integrated.fontFamily": "",

	// 터미널에서 글꼴 합자를 사용할지 여부를 제어합니다. 합자는 구성된 `terminal.integrated.fontFamily` 구성에서 지원하는 경우에만 작동합니다.
	"terminal.integrated.fontLigatures.enabled": false,

	// `terminal.integrated.gpuAcceleration#` 사용하도록 설정되어 있고 특정 `#terminal.integrated.fontFamily` 구문 분석할 수 없는 경우 항상 함께 그려지는 문자 시퀀스 집합입니다. 글꼴이 지원되지 않는 경우에도 고정된 합자 집합을 사용할 수 있습니다.
	"terminal.integrated.fontLigatures.fallbackLigatures": [
		"<--",
		"<---",
		"<<-",
		"<-",
		"->",
		"->>",
		"-->",
		"--->",
		"<==",
		"<===",
		"<<=",
		"<=",
		"=>",
		"=>>",
		"==>",
		"===>",
		">=",
		">>=",
		"<->",
		"<-->",
		"<--->",
		"<---->",
		"<=>",
		"<==>",
		"<===>",
		"<====>",
		"::",
		":::",
		"<~~",
		"</",
		"</>",
		"/>",
		"~~>",
		"==",
		"!=",
		"/=",
		"~=",
		"<>",
		"===",
		"!==",
		"!===",
		"<:",
		":=",
		"*=",
		"*+",
		"<*",
		"<*>",
		"*>",
		"<|",
		"<|>",
		"|>",
		"+*",
		"=*",
		"=:",
		":>",
		"/*",
		"*/",
		"+++",
		"<!--",
		"<!---"
	],

	// 합자가 활성화될 때 사용되는 글꼴 기능 설정을 'font-feature-settings' CSS 속성 형식으로 제어합니다. 글꼴에 따라 유효한 몇 가지 예는 다음과 같습니다.
	// 
	// - `"calt" off, "ss03"`
	// - `"liga" on`
	// - `"calt" off, "dlig" on`
	"terminal.integrated.fontLigatures.featureSettings": "\"calt\" on",

	// 터미널의 글꼴 크기(픽셀)를 제어합니다.
	"terminal.integrated.fontSize": 14,

	// 터미널 내에서 보통 텍스트에 사용할 글꼴 두께입니다. "일반" 및 "굵게" 키워드 또는 1에서 1,000 사이의 숫자를 허용합니다.
	"terminal.integrated.fontWeight": "normal",

	// 터미널 내에서 굵은 텍스트에 사용할 글꼴 두께입니다. "일반" 및 "굵게" 키워드 또는 1에서 1,000 사이의 숫자를 허용합니다.
	"terminal.integrated.fontWeightBold": "bold",

	// 터미널이 렌더링을 수행하기 위해 GPU를 활용하는지를 제어합니다.
	//  - auto: VS Code가 최상의 환경을 제공하는 렌더러를 검색하도록 합니다.
	//  - on: 터미널 내에서 GPU 가속을 사용하도록 설정합니다.
	//  - off: 터미널 내에서 GPU 가속을 비활성화합니다. GPU 가속이 꺼져 있으면 터미널이 훨씬 느리게 렌더링되지만 모든 시스템에서 안정적으로 작동해야 합니다.
	"terminal.integrated.gpuAcceleration": "auto",

	// 마지막 터미널이 닫혀 있을 때 터미널 보기를 숨길지 여부를 지정합니다. 이 문제는 터미널이 보기 컨테이너에 표시되는 유일한 보기인 경우에만 발생합니다.
	"terminal.integrated.hideOnLastClosed": true,

	// 시작 시 터미널 보기를 숨길지 여부를 지정하고 영구 세션이 없을 때 터미널을 만들지 않도록 합니다.
	//  - never: 시작 시 터미널 보기를 숨기지 마세요.
	//  - whenEmpty: 복원된 영구 세션이 없는 경우에만 터미널을 숨깁니다.
	//  - always: 영구 세션이 복원된 경우에도 터미널을 항상 숨깁니다.
	"terminal.integrated.hideOnStartup": "never",

	// 터미널이 모드로 전환된 경우에도 터미널이 대괄호로 묶인 붙여넣기 모드를 무시할지 여부를 제어하고 붙여넣을 때 `\x1b[200~` 및 `\x1b[201~` 시퀀스를 생략합니다. 이는 쉘이 예를 들어 하위 쉘에서 발생할 수 있는 모드를 준수하지 않을 때 유용합니다.
	"terminal.integrated.ignoreBracketedPasteMode": false,

	// `terminal.integrated.confirmOnKill` 설정을 사용할 때 무시할 프로세스 이름 집합입니다.
	"terminal.integrated.ignoreProcessNames": [
		"starship",
		"oh-my-posh",
		"bash",
		"zsh"
	],

	// 새 셸에서 $PATH 및 기타 개발 변수가 초기화되도록 로그인 셸을 제공할 수 있는 VS Code에서 환경을 상속해야 하는지 여부입니다. 이는 Windows에는 영향을 주지 않습니다.
	"terminal.integrated.inheritEnv": true,

	// 입력이 없는 첫 번째 터미널에 포커스가 있을 때 사용 가능한 작업에 대한 힌트를 표시할지 여부를 제어합니다.
	"terminal.integrated.initialHint": true,

	// 터미널의 문자 간격을 제어합니다. 문자 사이에 추가할 추가 픽셀 수를 나타내는 정수 값입니다.
	"terminal.integrated.letterSpacing": 0,

	// 터미널의 줄 높이를 제어합니다. 이 숫자와 터미널 글꼴 크기를 곱하여 실제 줄 높이(픽셀)를 구합니다.
	"terminal.integrated.lineHeight": 1,

	// 로컬 에코를 사용하도록 설정해야 하는 경우입니다. 그러면 `terminal.integrated.localEchoLatencyThreshold`이(가) 재정의됩니다.
	//  - on: 항상 사용
	//  - off: 항상 사용 안 함
	//  - auto: 원격 작업 영역에 대해서만 사용
	"terminal.integrated.localEchoEnabled": "off",

	// 터미널 제목에 이러한 프로그램 이름이 있으면 로컬 에코를 사용할 수 없습니다.
	"terminal.integrated.localEchoExcludePrograms": [
		"vim",
		"vi",
		"nano",
		"tmux"
	],

	// 서버 확인을 기다리지 않고 터미널에서 로컬 편집 내용이 에코되는 네트워크 지연 시간(밀리초)입니다. '0'이면 로컬 에코가 항상 켜지고, '-1'이면 로컬 에코가 사용하지 않도록 설정됩니다.
	"terminal.integrated.localEchoLatencyThreshold": 30,

	// 로컬로 에코되는 텍스트의 터미널 스타일(글꼴 스타일 또는 RGB 색)입니다.
	"terminal.integrated.localEchoStyle": "dim",

	// macOS에서 <Option+클릭>을 사용할 때 특정 항목을 강제로 선택할지 여부를 제어합니다. 사용하도록 설정하면 일반(줄) 항목이 강제로 선택되며 열 선택 모드를 사용할 수 없습니다. 예를 들어 tmux에서 마우스 모드를 사용하는 경우, 일반 터미널 항목을 선택하여 복사 및 붙여넣기를 수행할 수 있습니다.
	"terminal.integrated.macOptionClickForcesSelection": false,

	// macOS의 터미널에서 옵션 키를 meta 키로 처리할지 여부를 제어합니다.
	"terminal.integrated.macOptionIsMeta": false,

	// 터미널이 가운데 클릭에 반응하는 방식을 제어합니다.
	//  - default: 플랫폼 기본값은 터미널에 집중합니다. Linux에서 선택 항목도 붙여넣습니다.
	//  - paste: 가운데 클릭에 붙여넣습니다.
	"terminal.integrated.middleClickBehavior": "default",

	// 이 옵션을 설정하면 각 셀의 전경색이 지정된 대비 비율에 맞게 변경됩니다. #146406의 `powerline` 문자에는 적용되지 않습니다. 값 예:
	// 
	// - 1: 아무 작업도 하지 않고 표준 테마 색상을 사용합니다.
	// - 4.5: [WCAG AA 준수(최소)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html)(기본값)
	// - 7: [WCAG AAA 준수(향상됨)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html)
	// - 21: 검정 바탕에 흰색 또는 흰색 바탕에 검정
	"terminal.integrated.minimumContrastRatio": 4.5,

	// 마우스 휠 스크롤 이벤트의 'deltaY'에 사용할 승수입니다.
	"terminal.integrated.mouseWheelScrollSensitivity": 1,

	// 마우스 휠을 사용하고 'Ctrl'을 길게 누를 때 터미널의 글꼴을 확대/축소합니다.
	"terminal.integrated.mouseWheelZoom": false,

	// 터미널 프로세스를 종료해야 하는 경우(예: 창 또는 애플리케이션을 닫을 때) 작업 영역이 다음에 열릴 때 이전 터미널 세션 내용/기록을 복원하고 프로세스를 다시 생성해야 하는 시기를 결정합니다.
	// 
	// 주의:
	// 
	// - 프로세스의 현재 작업 디렉터리 복원은 셸의 지원 여부에 따라 달라집니다.
	// - 종료 중에는 세션을 유지하는 시간이 제한되어 있으므로 대기 시간이 긴 원격 연결을 사용할 때 세션이 중단될 수 있습니다.
	//  - onExit: Windows/Linux에서 마지막 창이 닫힌 후 또는 `workbench.action.quit` 명령이 트리거될 때(명령 팔레트, 키 바인딩, 메뉴) 프로세스를 되살리세요.
	//  - onExitAndWindowClose: Windows/Linux에서 마지막 창이 닫힌 후 또는 `workbench.action.quit` 명령이 트리거될 때(명령 팔레트, 키 바인딩, 메뉴) 또는 창이 닫힐 때 프로세스를 되살리세요.
	//  - never: 터미널 버퍼를 복원하거나 프로세스를 다시 생성하지 마세요.
	"terminal.integrated.persistentSessionReviveProcess": "onExit",

	// 영구 터미널 세션에 다시 연결할 때 복원될 최대 라인 수를 제어합니다. 이 값을 늘리면 더 많은 메모리를 사용하여 더 많은 스크롤백 라인을 복원하고 시작 시 터미널에 연결하는 데 걸리는 시간이 늘어납니다. 이 설정을 적용하려면 다시 시작해야 하며 `terminal.integrated.scrollback`보다 작거나 같은 값으로 설정해야 합니다.
	"terminal.integrated.persistentSessionScrollback": 100,

	// 터미널 시작 방법을 추가, 제거 또는 변경할 수 있도록 하는 Linux의 터미널 프로필 사용자 지정 집합입니다. 프로필은 필수 경로, 선택적 인수 및 기타 프레젠테이션 옵션으로 구성됩니다.
	// 
	// 기존 프로필을 재정의하려면 해당 프로필 이름을 키로 사용합니다. 예를 들면 다음과 같습니다.
	// 
	// ```json
	// "terminal.integrated.profile.linux": {
	//   "bash": null
	// }
	// ```
	// 
	// [프로필 구성에 대해 자세히 알아보세요.](https://code.visualstudio.com/docs/terminal/profiles)
	"terminal.integrated.profiles.linux": {
		"bash": {
			"path": "bash",
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh"
		},
		"fish": {
			"path": "fish"
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// 터미널 시작 방법을 추가, 제거 또는 변경할 수 있도록 하는 Mac의 터미널 프로필 사용자 지정 집합입니다. 프로필은 필수 경로, 선택적 인수 및 기타 프레젠테이션 옵션으로 구성됩니다.
	// 
	// 기존 프로필을 재정의하려면 해당 프로필 이름을 키로 사용합니다. 예를 들면 다음과 같습니다.
	// 
	// ```json
	// "terminal.integrated.profile.osx": {
	//   "bash": null
	// }
	// ```
	// 
	// [프로필 구성에 대해 자세히 알아보세요.](https://code.visualstudio.com/docs/terminal/profiles)
	"terminal.integrated.profiles.osx": {
		"bash": {
			"path": "bash",
			"args": [
				"-l"
			],
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh",
			"args": [
				"-l"
			]
		},
		"fish": {
			"path": "fish",
			"args": [
				"-l"
			]
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// 터미널 시작 방법을 추가, 제거 또는 변경할 수 있도록 하는 Windows의 터미널 프로필 사용자 지정 집합입니다. 프로필은 필수 경로, 선택적 인수 및 기타 프레젠테이션 옵션으로 구성됩니다.
	// 
	// 기존 프로필을 재정의하려면 해당 프로필 이름을 키로 사용합니다. 예를 들면 다음과 같습니다.
	// 
	// ```json
	// "terminal.integrated.profile.windows": {
	//   "bash": null
	// }
	// ```
	// 
	// [프로필 구성에 대해 자세히 알아보세요.](https://code.visualstudio.com/docs/terminal/profiles)
	"terminal.integrated.profiles.windows": {
		"PowerShell": {
			"source": "PowerShell",
			"icon": "terminal-powershell"
		},
		"Command Prompt": {
			"path": [
				"${env:windir}\\Sysnative\\cmd.exe",
				"${env:windir}\\System32\\cmd.exe"
			],
			"args": [],
			"icon": "terminal-cmd"
		},
		"Git Bash": {
			"source": "Git Bash"
		}
	},

	// 단일 셀 너비이지만 다음 셀과 겹치는 문자 모양이 있는 문자 모양을 가로로 다시 조정할지 여부입니다. 이는 일반적으로 모노스페이스 글꼴에 표시되지 않는 모호한 너비 문자(예: 로마 숫자 문자 U+2160+)에 대해 발생합니다. 이모지 문자 모양은 크기가 다시 조정되지 않습니다.
	"terminal.integrated.rescaleOverlappingGlyphs": true,

	// 터미널이 오른쪽 클릭에 반응하는 방식을 제어합니다.
	//  - default: 상황에 맞는 메뉴를 표시합니다.
	//  - copyPaste: 선택 항목이 있으면 복사하고, 없으면 붙여넣습니다.
	//  - paste: 마우스 오른쪽 단추를 클릭하여 붙여넣습니다.
	//  - selectWord: 커서 아래 단어를 선택하고 상황에 맞는 메뉴를 표시합니다.
	//  - nothing: 아무 것도 하지 않고 이벤트를 터미널에 전달합니다.
	"terminal.integrated.rightClickBehavior": "copyPaste",

	// 터미널이 버퍼에 보관하는 최대 라인 수를 제어합니다. 원활한 환경을 보장하기 위해 이 값을 기반으로 메모리를 사전 할당합니다. 따라서 값이 증가하면 메모리 양도 증가합니다.
	"terminal.integrated.scrollback": 1000,

	// 대부분의 키 바인딩을 워크벤치 대신 터미널에 디스패치하여 미세 조정을 위해 대신 사용할 수 있는 `terminal.integrated.commandsToSkipShell`을(를) 재정의합니다.
	"terminal.integrated.sendKeybindingsToShell": false,

	// 쉘 통합이 사용되면 각 명령에 대한 장식을 추가합니다.
	//  - both: 여백에 장식 표시(왼쪽) 및 개요 눈금자(오른쪽)
	//  - gutter: 터미널 왼쪽에 여백 장식 표시
	//  - overviewRuler: 터미널 오른쪽에 개요 눈금자 장식 표시
	//  - never: 장식 표시 안 함
	"terminal.integrated.shellIntegration.decorationsEnabled": "both",

	// 향상된 명령 추적 및 현재 작업 디렉토리 감지와 같은 기능을 지원하기 위해 셸 통합이 자동 삽입되는지 여부를 결정합니다. 
	// 
	// 셸 통합은 시작 스크립트와 함께 셸을 삽입하여 작동합니다. 이 스크립트는 터미널 내에서 발생하는 일에 대한 VS Code 인사이트를 제공합니다.
	// 
	// 지원되는 셸:
	// 
	// - Linux/macOS: bash, fish, pwsh, zsh
	//  - Windows: pwsh, git bash
	// 
	// 이 설정은 터미널이 생성될 때만 적용되므로 적용하려면 터미널을 다시 시작해야 합니다.
	// 
	//  터미널 프로필에 정의된 사용자 지정 인수가 있거나`editor.accessibilitySupport#`을(를) 활성화했거나 [복잡한 bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash-promptcommand) 또는 기타 지원되지 않는 설정이 있는 경우 스크립트 삽입이 작동하지 않을 수 있습니다. 장식을 비활성화하려면 `#terminal.integrated.shellIntegration.decorationsEnabled`을(를) 참조하세요.
	"terminal.integrated.shellIntegration.enabled": true,

	// 셸 환경을 보고할지 여부를 제어하여 `terminal.integrated.suggest.enabled` 같은 기능에서 사용할 수 있도록 합니다. 셸 프롬프트를 인쇄할 때 속도가 느려질 수 있습니다.
	"terminal.integrated.shellIntegration.environmentReporting": false,

	// 터미널 명령 기록에 보관할 최근에 사용한 명령의 수를 제어합니다. 터미널 명령 기록을 사용하지 않도록 설정하려면 0으로 설정합니다.
	"terminal.integrated.shellIntegration.history": 100,

	// 터미널에서 마우스로 명령을 가리킬 때 명령 가이드를 표시할지 여부를 지정합니다.
	"terminal.integrated.shellIntegration.showCommandGuide": true,

	// 종료 코드가 0이 아닌 경우 "터미널 프로세스가 다음 종료 코드로 종료되었습니다"라는 경고를 표시할지 여부를 제어합니다.
	"terminal.integrated.showExitAlert": true,

	// 터미널 출력의 링크에 대한 마우스를 표시할지 여부입니다.
	"terminal.integrated.showLinkHover": true,

	// 터미널이 애니메이션을 사용하여 스크롤할지 여부를 제어합니다.
	"terminal.integrated.smoothScrolling": false,

	// 분할된 터미널이 시작되는 작업 디렉터리를 제어합니다.
	//  - workspaceRoot: 새 분할 터미널은 작업 영역 루트를 작업 디렉터리로 사용합니다. 다중 루트 작업 영역에서는 사용할 루트 폴더의 선택 항목이 제공됩니다.
	//  - initial: 새 분할 터미널은 부모 터미널이 시작된 작업 디렉터리를 사용합니다.
	//  - inherited: macOS 및 Linux에서 새 분할 터미널은 부모 터미널의 작업 디렉터리를 사용합니다. Windows에서는 초기 설정과 동일하게 동작합니다.
	"terminal.integrated.splitCwd": "inherited",

	// 터미널 맨 위에 현재 명령을 표시합니다. 이 기능을 사용하려면 [shell integration](https://code.visualstudio.com/docs/terminal/shell-integration)을 활성화해야 합니다. `terminal.integrated.shellIntegration.enabled` 참조하세요.
	"terminal.integrated.stickyScroll.enabled": true,

	// 표시할 최대 고정 선 수를 정의합니다. 이 설정에 관계없이 고정 스크롤 선은 뷰포트의 40%를 초과하지 않습니다.
	"terminal.integrated.stickyScroll.maxLineCount": 5,

	// 현재 작업 디렉터리에 관계없이 $CDPATH 변수에 있는 폴더의 자식을 노출하는 $CDPATH 지원을 사용할지 여부를 제어합니다. $CDPATH Windows에서는 세미콜론으로 구분되고 다른 플랫폼에서는 콜론으로 구분되어야 합니다.
	//  - off: 기능을 사용하지 않도록 설정합니다.
	//  - relative: 기능을 사용하도록 설정하고 상대 경로를 사용합니다.
	//  - absolute: 기능을 사용하도록 설정하고 절대 경로를 사용합니다. 셸이 기본적으로 '$CDPATH'을 지원하지 않는 경우에 유용합니다.
	"terminal.integrated.suggest.cdPath": "absolute",

	// `terminal.integrated.shellIntegration.enabled`이(가) `true`(으)로 설정된 경우 지원되는 셸(PowerShell v7+, zsh, bash, fish)에 대한 터미널 Intellisense 제안(미리 보기)을 활성화합니다.
	"terminal.integrated.suggest.enabled": false,

	// 셸의 인라인 제안을 검색해야 하는지 여부와 점수 매기기 방법을 제어합니다.
	//  - off: 기능을 사용하지 않도록 설정합니다.
	//  - alwaysOnTopExceptExactMatch: 기능을 사용하도록 설정하고 인라인 제안을 강제로 맨 위에 표시하지 않고 정렬합니다. 즉, 정확한 일치 항목이 인라인 제안 위에 표시됩니다.
	//  - alwaysOnTop: 기능을 사용하도록 설정하고 항상 인라인 제안을 맨 위에 배치합니다.
	"terminal.integrated.suggest.inlineSuggestion": "alwaysOnTop",

	// 입력하는 동안 제안을 자동으로 표시할지 여부를 제어합니다. 또한 제안이 특수 문자에 의해 실행되는지 여부를 제어하는 `terminal.integrated.suggest.suggestOnTriggerCharacters`-설정에 유의하세요.
	"terminal.integrated.suggest.quickSuggestions": {
		"commands": "on",
		"arguments": "on",
		"unknown": "off"
	},

	// `Enter` 키(`Tab` 아님)를 사용하여 결과를 수락할 때 제안이 즉시 실행될지 여부를 제어합니다.
	//  - never: `Enter` 키를 눌러도 실행되지 않습니다.
	//  - exactMatch: 제안이 완전히 입력되면 `Enter` 키에서 실행합니다.
	//  - exactMatchIgnoreExtension: 제안을 모두 입력하거나 확장명 없이 파일을 입력할 때 `Enter` 키를 누르면 실행됩니다.
	//  - always: `Enter` 키를 누르면 항상 실행됩니다.
	"terminal.integrated.suggest.runOnEnter": "never",

	// 통합 터미널에서 제안 선택이 작동하는 방식을 제어합니다.
	//  - partial: IntelliSense를 자동으로 트리거할 때 제안을 부분적으로 선택하세요. 'Tab'은 첫 번째 제안을 수락하는 데 사용할 수 있습니다. 'Enter'는 'Down'을 통해 제안을 탐색한 후에만 활성 제안을 수락합니다.
	//  - always: IntelliSense를 자동으로 트리거할 때 항상 제안을 선택하세요. 'Enter' 또는 'Tab'을 사용하여 첫 번째 제안을 수락할 수 있습니다.
	//  - never: IntelliSense를 자동으로 트리거할 때 제안을 선택하지 마세요. 활성 제안을 수락하려면 먼저 `Down` 키로 목록에서 항목을 선택한 후에야 `Enter` 또는 `Tab` 키를 사용할 수 있습니다.
	"terminal.integrated.suggest.selectionMode": "partial",

	// 터미널 제안 상태 표시줄을 표시할지 여부를 제어합니다.
	"terminal.integrated.suggest.showStatusBar": true,

	// 트리거 문자를 입력할 때 제안을 자동으로 표시할지 여부를 제어합니다.
	"terminal.integrated.suggest.suggestOnTriggerCharacters": true,

	// 포커스가 첫 번째 제안에 있고 탐색이 아직 발생하지 않은 경우 위쪽 화살표 키가 명령 기록을 탐색하는지 여부를 결정합니다. false로 설정하면 위쪽 화살표가 포커스를 대신 마지막 제안으로 이동합니다.
	"terminal.integrated.suggest.upArrowNavigatesHistory": true,

	// 터미널에서 제안 사항으로 포함되는 Windows 명령 실행 파일 확장 집합입니다.
	// 
	// 대부분의 실행 파일은 기본적으로 아래에 나열되어 있습니다.
	// 
	// - bat
	// - cmd
	// - com
	// - exe
	// - jar
	// - js
	// - msi
	// - pl
	// - ps1
	// - py
	// - rb
	// - sh
	// - vbs.
	// 
	// 확장을 제외하려면 'false'로 설정하세요.
	// 
	// . 목록에 없는 항목을 포함하려면 추가한 후 'true'로 설정하세요.
	"terminal.integrated.suggest.windowsExecutableExtensions": {},

	// 기본적으로 터미널 아이콘과 연결할 테마 색 ID입니다.
	"terminal.integrated.tabs.defaultColor": null,

	// 기본적으로 터미널 아이콘과 연결할 코디콘 ID입니다.
	//  - add: $(add)
	//  - plus: $(plus)
	//  - gist-new: $(gist-new)
	//  - repo-create: $(repo-create)
	//  - lightbulb: $(lightbulb)
	//  - light-bulb: $(light-bulb)
	//  - repo: $(repo)
	//  - repo-delete: $(repo-delete)
	//  - gist-fork: $(gist-fork)
	//  - repo-forked: $(repo-forked)
	//  - git-pull-request: $(git-pull-request)
	//  - git-pull-request-abandoned: $(git-pull-request-abandoned)
	//  - record-keys: $(record-keys)
	//  - keyboard: $(keyboard)
	//  - tag: $(tag)
	//  - git-pull-request-label: $(git-pull-request-label)
	//  - tag-add: $(tag-add)
	//  - tag-remove: $(tag-remove)
	//  - person: $(person)
	//  - person-follow: $(person-follow)
	//  - person-outline: $(person-outline)
	//  - person-filled: $(person-filled)
	//  - git-branch: $(git-branch)
	//  - git-branch-create: $(git-branch-create)
	//  - git-branch-delete: $(git-branch-delete)
	//  - source-control: $(source-control)
	//  - mirror: $(mirror)
	//  - mirror-public: $(mirror-public)
	//  - star: $(star)
	//  - star-add: $(star-add)
	//  - star-delete: $(star-delete)
	//  - star-empty: $(star-empty)
	//  - comment: $(comment)
	//  - comment-add: $(comment-add)
	//  - alert: $(alert)
	//  - warning: $(warning)
	//  - search: $(search)
	//  - search-save: $(search-save)
	//  - log-out: $(log-out)
	//  - sign-out: $(sign-out)
	//  - log-in: $(log-in)
	//  - sign-in: $(sign-in)
	//  - eye: $(eye)
	//  - eye-unwatch: $(eye-unwatch)
	//  - eye-watch: $(eye-watch)
	//  - circle-filled: $(circle-filled)
	//  - primitive-dot: $(primitive-dot)
	//  - close-dirty: $(close-dirty)
	//  - debug-breakpoint: $(debug-breakpoint)
	//  - debug-breakpoint-disabled: $(debug-breakpoint-disabled)
	//  - debug-hint: $(debug-hint)
	//  - terminal-decoration-success: $(terminal-decoration-success)
	//  - primitive-square: $(primitive-square)
	//  - edit: $(edit)
	//  - pencil: $(pencil)
	//  - info: $(info)
	//  - issue-opened: $(issue-opened)
	//  - gist-private: $(gist-private)
	//  - git-fork-private: $(git-fork-private)
	//  - lock: $(lock)
	//  - mirror-private: $(mirror-private)
	//  - close: $(close)
	//  - remove-close: $(remove-close)
	//  - x: $(x)
	//  - repo-sync: $(repo-sync)
	//  - sync: $(sync)
	//  - clone: $(clone)
	//  - desktop-download: $(desktop-download)
	//  - beaker: $(beaker)
	//  - microscope: $(microscope)
	//  - vm: $(vm)
	//  - device-desktop: $(device-desktop)
	//  - file: $(file)
	//  - file-text: $(file-text)
	//  - more: $(more)
	//  - ellipsis: $(ellipsis)
	//  - kebab-horizontal: $(kebab-horizontal)
	//  - mail-reply: $(mail-reply)
	//  - reply: $(reply)
	//  - organization: $(organization)
	//  - organization-filled: $(organization-filled)
	//  - organization-outline: $(organization-outline)
	//  - new-file: $(new-file)
	//  - file-add: $(file-add)
	//  - new-folder: $(new-folder)
	//  - file-directory-create: $(file-directory-create)
	//  - trash: $(trash)
	//  - trashcan: $(trashcan)
	//  - history: $(history)
	//  - clock: $(clock)
	//  - folder: $(folder)
	//  - file-directory: $(file-directory)
	//  - symbol-folder: $(symbol-folder)
	//  - logo-github: $(logo-github)
	//  - mark-github: $(mark-github)
	//  - github: $(github)
	//  - terminal: $(terminal)
	//  - console: $(console)
	//  - repl: $(repl)
	//  - zap: $(zap)
	//  - symbol-event: $(symbol-event)
	//  - error: $(error)
	//  - stop: $(stop)
	//  - variable: $(variable)
	//  - symbol-variable: $(symbol-variable)
	//  - array: $(array)
	//  - symbol-array: $(symbol-array)
	//  - symbol-module: $(symbol-module)
	//  - symbol-package: $(symbol-package)
	//  - symbol-namespace: $(symbol-namespace)
	//  - symbol-object: $(symbol-object)
	//  - symbol-method: $(symbol-method)
	//  - symbol-function: $(symbol-function)
	//  - symbol-constructor: $(symbol-constructor)
	//  - symbol-boolean: $(symbol-boolean)
	//  - symbol-null: $(symbol-null)
	//  - symbol-numeric: $(symbol-numeric)
	//  - symbol-number: $(symbol-number)
	//  - symbol-structure: $(symbol-structure)
	//  - symbol-struct: $(symbol-struct)
	//  - symbol-parameter: $(symbol-parameter)
	//  - symbol-type-parameter: $(symbol-type-parameter)
	//  - symbol-key: $(symbol-key)
	//  - symbol-text: $(symbol-text)
	//  - symbol-reference: $(symbol-reference)
	//  - go-to-file: $(go-to-file)
	//  - symbol-enum: $(symbol-enum)
	//  - symbol-value: $(symbol-value)
	//  - symbol-ruler: $(symbol-ruler)
	//  - symbol-unit: $(symbol-unit)
	//  - activate-breakpoints: $(activate-breakpoints)
	//  - archive: $(archive)
	//  - arrow-both: $(arrow-both)
	//  - arrow-down: $(arrow-down)
	//  - arrow-left: $(arrow-left)
	//  - arrow-right: $(arrow-right)
	//  - arrow-small-down: $(arrow-small-down)
	//  - arrow-small-left: $(arrow-small-left)
	//  - arrow-small-right: $(arrow-small-right)
	//  - arrow-small-up: $(arrow-small-up)
	//  - arrow-up: $(arrow-up)
	//  - bell: $(bell)
	//  - bold: $(bold)
	//  - book: $(book)
	//  - bookmark: $(bookmark)
	//  - debug-breakpoint-conditional-unverified: $(debug-breakpoint-conditional-unverified)
	//  - debug-breakpoint-conditional: $(debug-breakpoint-conditional)
	//  - debug-breakpoint-conditional-disabled: $(debug-breakpoint-conditional-disabled)
	//  - debug-breakpoint-data-unverified: $(debug-breakpoint-data-unverified)
	//  - debug-breakpoint-data: $(debug-breakpoint-data)
	//  - debug-breakpoint-data-disabled: $(debug-breakpoint-data-disabled)
	//  - debug-breakpoint-log-unverified: $(debug-breakpoint-log-unverified)
	//  - debug-breakpoint-log: $(debug-breakpoint-log)
	//  - debug-breakpoint-log-disabled: $(debug-breakpoint-log-disabled)
	//  - briefcase: $(briefcase)
	//  - broadcast: $(broadcast)
	//  - browser: $(browser)
	//  - bug: $(bug)
	//  - calendar: $(calendar)
	//  - case-sensitive: $(case-sensitive)
	//  - check: $(check)
	//  - checklist: $(checklist)
	//  - chevron-down: $(chevron-down)
	//  - chevron-left: $(chevron-left)
	//  - chevron-right: $(chevron-right)
	//  - chevron-up: $(chevron-up)
	//  - chrome-close: $(chrome-close)
	//  - chrome-maximize: $(chrome-maximize)
	//  - chrome-minimize: $(chrome-minimize)
	//  - chrome-restore: $(chrome-restore)
	//  - circle-outline: $(circle-outline)
	//  - circle: $(circle)
	//  - debug-breakpoint-unverified: $(debug-breakpoint-unverified)
	//  - terminal-decoration-incomplete: $(terminal-decoration-incomplete)
	//  - circle-slash: $(circle-slash)
	//  - circuit-board: $(circuit-board)
	//  - clear-all: $(clear-all)
	//  - clippy: $(clippy)
	//  - close-all: $(close-all)
	//  - cloud-download: $(cloud-download)
	//  - cloud-upload: $(cloud-upload)
	//  - code: $(code)
	//  - collapse-all: $(collapse-all)
	//  - color-mode: $(color-mode)
	//  - comment-discussion: $(comment-discussion)
	//  - credit-card: $(credit-card)
	//  - dash: $(dash)
	//  - dashboard: $(dashboard)
	//  - database: $(database)
	//  - debug-continue: $(debug-continue)
	//  - debug-disconnect: $(debug-disconnect)
	//  - debug-pause: $(debug-pause)
	//  - debug-restart: $(debug-restart)
	//  - debug-start: $(debug-start)
	//  - debug-step-into: $(debug-step-into)
	//  - debug-step-out: $(debug-step-out)
	//  - debug-step-over: $(debug-step-over)
	//  - debug-stop: $(debug-stop)
	//  - debug: $(debug)
	//  - device-camera-video: $(device-camera-video)
	//  - device-camera: $(device-camera)
	//  - device-mobile: $(device-mobile)
	//  - diff-added: $(diff-added)
	//  - diff-ignored: $(diff-ignored)
	//  - diff-modified: $(diff-modified)
	//  - diff-removed: $(diff-removed)
	//  - diff-renamed: $(diff-renamed)
	//  - diff: $(diff)
	//  - diff-sidebyside: $(diff-sidebyside)
	//  - discard: $(discard)
	//  - editor-layout: $(editor-layout)
	//  - empty-window: $(empty-window)
	//  - exclude: $(exclude)
	//  - extensions: $(extensions)
	//  - eye-closed: $(eye-closed)
	//  - file-binary: $(file-binary)
	//  - file-code: $(file-code)
	//  - file-media: $(file-media)
	//  - file-pdf: $(file-pdf)
	//  - file-submodule: $(file-submodule)
	//  - file-symlink-directory: $(file-symlink-directory)
	//  - file-symlink-file: $(file-symlink-file)
	//  - file-zip: $(file-zip)
	//  - files: $(files)
	//  - filter: $(filter)
	//  - flame: $(flame)
	//  - fold-down: $(fold-down)
	//  - fold-up: $(fold-up)
	//  - fold: $(fold)
	//  - folder-active: $(folder-active)
	//  - folder-opened: $(folder-opened)
	//  - gear: $(gear)
	//  - gift: $(gift)
	//  - gist-secret: $(gist-secret)
	//  - gist: $(gist)
	//  - git-commit: $(git-commit)
	//  - git-compare: $(git-compare)
	//  - compare-changes: $(compare-changes)
	//  - git-merge: $(git-merge)
	//  - github-action: $(github-action)
	//  - github-alt: $(github-alt)
	//  - globe: $(globe)
	//  - grabber: $(grabber)
	//  - graph: $(graph)
	//  - gripper: $(gripper)
	//  - heart: $(heart)
	//  - home: $(home)
	//  - horizontal-rule: $(horizontal-rule)
	//  - hubot: $(hubot)
	//  - inbox: $(inbox)
	//  - issue-reopened: $(issue-reopened)
	//  - issues: $(issues)
	//  - italic: $(italic)
	//  - jersey: $(jersey)
	//  - json: $(json)
	//  - kebab-vertical: $(kebab-vertical)
	//  - key: $(key)
	//  - law: $(law)
	//  - lightbulb-autofix: $(lightbulb-autofix)
	//  - link-external: $(link-external)
	//  - link: $(link)
	//  - list-ordered: $(list-ordered)
	//  - list-unordered: $(list-unordered)
	//  - live-share: $(live-share)
	//  - loading: $(loading)
	//  - location: $(location)
	//  - mail-read: $(mail-read)
	//  - mail: $(mail)
	//  - markdown: $(markdown)
	//  - megaphone: $(megaphone)
	//  - mention: $(mention)
	//  - milestone: $(milestone)
	//  - git-pull-request-milestone: $(git-pull-request-milestone)
	//  - mortar-board: $(mortar-board)
	//  - move: $(move)
	//  - multiple-windows: $(multiple-windows)
	//  - mute: $(mute)
	//  - no-newline: $(no-newline)
	//  - note: $(note)
	//  - octoface: $(octoface)
	//  - open-preview: $(open-preview)
	//  - package: $(package)
	//  - paintcan: $(paintcan)
	//  - pin: $(pin)
	//  - play: $(play)
	//  - run: $(run)
	//  - plug: $(plug)
	//  - preserve-case: $(preserve-case)
	//  - preview: $(preview)
	//  - project: $(project)
	//  - pulse: $(pulse)
	//  - question: $(question)
	//  - quote: $(quote)
	//  - radio-tower: $(radio-tower)
	//  - reactions: $(reactions)
	//  - references: $(references)
	//  - refresh: $(refresh)
	//  - regex: $(regex)
	//  - remote-explorer: $(remote-explorer)
	//  - remote: $(remote)
	//  - remove: $(remove)
	//  - replace-all: $(replace-all)
	//  - replace: $(replace)
	//  - repo-clone: $(repo-clone)
	//  - repo-force-push: $(repo-force-push)
	//  - repo-pull: $(repo-pull)
	//  - repo-push: $(repo-push)
	//  - report: $(report)
	//  - request-changes: $(request-changes)
	//  - rocket: $(rocket)
	//  - root-folder-opened: $(root-folder-opened)
	//  - root-folder: $(root-folder)
	//  - rss: $(rss)
	//  - ruby: $(ruby)
	//  - save-all: $(save-all)
	//  - save-as: $(save-as)
	//  - save: $(save)
	//  - screen-full: $(screen-full)
	//  - screen-normal: $(screen-normal)
	//  - search-stop: $(search-stop)
	//  - server: $(server)
	//  - settings-gear: $(settings-gear)
	//  - settings: $(settings)
	//  - shield: $(shield)
	//  - smiley: $(smiley)
	//  - sort-precedence: $(sort-precedence)
	//  - split-horizontal: $(split-horizontal)
	//  - split-vertical: $(split-vertical)
	//  - squirrel: $(squirrel)
	//  - star-full: $(star-full)
	//  - star-half: $(star-half)
	//  - symbol-class: $(symbol-class)
	//  - symbol-color: $(symbol-color)
	//  - symbol-constant: $(symbol-constant)
	//  - symbol-enum-member: $(symbol-enum-member)
	//  - symbol-field: $(symbol-field)
	//  - symbol-file: $(symbol-file)
	//  - symbol-interface: $(symbol-interface)
	//  - symbol-keyword: $(symbol-keyword)
	//  - symbol-misc: $(symbol-misc)
	//  - symbol-operator: $(symbol-operator)
	//  - symbol-property: $(symbol-property)
	//  - wrench: $(wrench)
	//  - wrench-subaction: $(wrench-subaction)
	//  - symbol-snippet: $(symbol-snippet)
	//  - tasklist: $(tasklist)
	//  - telescope: $(telescope)
	//  - text-size: $(text-size)
	//  - three-bars: $(three-bars)
	//  - thumbsdown: $(thumbsdown)
	//  - thumbsup: $(thumbsup)
	//  - tools: $(tools)
	//  - triangle-down: $(triangle-down)
	//  - triangle-left: $(triangle-left)
	//  - triangle-right: $(triangle-right)
	//  - triangle-up: $(triangle-up)
	//  - twitter: $(twitter)
	//  - unfold: $(unfold)
	//  - unlock: $(unlock)
	//  - unmute: $(unmute)
	//  - unverified: $(unverified)
	//  - verified: $(verified)
	//  - versions: $(versions)
	//  - vm-active: $(vm-active)
	//  - vm-outline: $(vm-outline)
	//  - vm-running: $(vm-running)
	//  - watch: $(watch)
	//  - whitespace: $(whitespace)
	//  - whole-word: $(whole-word)
	//  - window: $(window)
	//  - word-wrap: $(word-wrap)
	//  - zoom-in: $(zoom-in)
	//  - zoom-out: $(zoom-out)
	//  - list-filter: $(list-filter)
	//  - list-flat: $(list-flat)
	//  - list-selection: $(list-selection)
	//  - selection: $(selection)
	//  - list-tree: $(list-tree)
	//  - debug-breakpoint-function-unverified: $(debug-breakpoint-function-unverified)
	//  - debug-breakpoint-function: $(debug-breakpoint-function)
	//  - debug-breakpoint-function-disabled: $(debug-breakpoint-function-disabled)
	//  - debug-stackframe-active: $(debug-stackframe-active)
	//  - circle-small-filled: $(circle-small-filled)
	//  - debug-stackframe-dot: $(debug-stackframe-dot)
	//  - terminal-decoration-mark: $(terminal-decoration-mark)
	//  - debug-stackframe: $(debug-stackframe)
	//  - debug-stackframe-focused: $(debug-stackframe-focused)
	//  - debug-breakpoint-unsupported: $(debug-breakpoint-unsupported)
	//  - symbol-string: $(symbol-string)
	//  - debug-reverse-continue: $(debug-reverse-continue)
	//  - debug-step-back: $(debug-step-back)
	//  - debug-restart-frame: $(debug-restart-frame)
	//  - debug-alt: $(debug-alt)
	//  - call-incoming: $(call-incoming)
	//  - call-outgoing: $(call-outgoing)
	//  - menu: $(menu)
	//  - expand-all: $(expand-all)
	//  - feedback: $(feedback)
	//  - git-pull-request-reviewer: $(git-pull-request-reviewer)
	//  - group-by-ref-type: $(group-by-ref-type)
	//  - ungroup-by-ref-type: $(ungroup-by-ref-type)
	//  - account: $(account)
	//  - git-pull-request-assignee: $(git-pull-request-assignee)
	//  - bell-dot: $(bell-dot)
	//  - debug-console: $(debug-console)
	//  - library: $(library)
	//  - output: $(output)
	//  - run-all: $(run-all)
	//  - sync-ignored: $(sync-ignored)
	//  - pinned: $(pinned)
	//  - github-inverted: $(github-inverted)
	//  - server-process: $(server-process)
	//  - server-environment: $(server-environment)
	//  - pass: $(pass)
	//  - issue-closed: $(issue-closed)
	//  - stop-circle: $(stop-circle)
	//  - play-circle: $(play-circle)
	//  - record: $(record)
	//  - debug-alt-small: $(debug-alt-small)
	//  - vm-connect: $(vm-connect)
	//  - cloud: $(cloud)
	//  - merge: $(merge)
	//  - export: $(export)
	//  - graph-left: $(graph-left)
	//  - magnet: $(magnet)
	//  - notebook: $(notebook)
	//  - redo: $(redo)
	//  - check-all: $(check-all)
	//  - pinned-dirty: $(pinned-dirty)
	//  - pass-filled: $(pass-filled)
	//  - circle-large-filled: $(circle-large-filled)
	//  - circle-large: $(circle-large)
	//  - circle-large-outline: $(circle-large-outline)
	//  - combine: $(combine)
	//  - gather: $(gather)
	//  - table: $(table)
	//  - variable-group: $(variable-group)
	//  - type-hierarchy: $(type-hierarchy)
	//  - type-hierarchy-sub: $(type-hierarchy-sub)
	//  - type-hierarchy-super: $(type-hierarchy-super)
	//  - git-pull-request-create: $(git-pull-request-create)
	//  - run-above: $(run-above)
	//  - run-below: $(run-below)
	//  - notebook-template: $(notebook-template)
	//  - debug-rerun: $(debug-rerun)
	//  - workspace-trusted: $(workspace-trusted)
	//  - workspace-untrusted: $(workspace-untrusted)
	//  - workspace-unknown: $(workspace-unknown)
	//  - terminal-cmd: $(terminal-cmd)
	//  - terminal-debian: $(terminal-debian)
	//  - terminal-linux: $(terminal-linux)
	//  - terminal-powershell: $(terminal-powershell)
	//  - terminal-tmux: $(terminal-tmux)
	//  - terminal-ubuntu: $(terminal-ubuntu)
	//  - terminal-bash: $(terminal-bash)
	//  - arrow-swap: $(arrow-swap)
	//  - copy: $(copy)
	//  - person-add: $(person-add)
	//  - filter-filled: $(filter-filled)
	//  - wand: $(wand)
	//  - debug-line-by-line: $(debug-line-by-line)
	//  - inspect: $(inspect)
	//  - layers: $(layers)
	//  - layers-dot: $(layers-dot)
	//  - layers-active: $(layers-active)
	//  - compass: $(compass)
	//  - compass-dot: $(compass-dot)
	//  - compass-active: $(compass-active)
	//  - azure: $(azure)
	//  - issue-draft: $(issue-draft)
	//  - git-pull-request-closed: $(git-pull-request-closed)
	//  - git-pull-request-draft: $(git-pull-request-draft)
	//  - debug-all: $(debug-all)
	//  - debug-coverage: $(debug-coverage)
	//  - run-errors: $(run-errors)
	//  - folder-library: $(folder-library)
	//  - debug-continue-small: $(debug-continue-small)
	//  - beaker-stop: $(beaker-stop)
	//  - graph-line: $(graph-line)
	//  - graph-scatter: $(graph-scatter)
	//  - pie-chart: $(pie-chart)
	//  - bracket: $(bracket)
	//  - bracket-dot: $(bracket-dot)
	//  - bracket-error: $(bracket-error)
	//  - lock-small: $(lock-small)
	//  - azure-devops: $(azure-devops)
	//  - verified-filled: $(verified-filled)
	//  - newline: $(newline)
	//  - layout: $(layout)
	//  - layout-activitybar-left: $(layout-activitybar-left)
	//  - layout-activitybar-right: $(layout-activitybar-right)
	//  - layout-panel-left: $(layout-panel-left)
	//  - layout-panel-center: $(layout-panel-center)
	//  - layout-panel-justify: $(layout-panel-justify)
	//  - layout-panel-right: $(layout-panel-right)
	//  - layout-panel: $(layout-panel)
	//  - layout-sidebar-left: $(layout-sidebar-left)
	//  - layout-sidebar-right: $(layout-sidebar-right)
	//  - layout-statusbar: $(layout-statusbar)
	//  - layout-menubar: $(layout-menubar)
	//  - layout-centered: $(layout-centered)
	//  - target: $(target)
	//  - indent: $(indent)
	//  - record-small: $(record-small)
	//  - error-small: $(error-small)
	//  - terminal-decoration-error: $(terminal-decoration-error)
	//  - arrow-circle-down: $(arrow-circle-down)
	//  - arrow-circle-left: $(arrow-circle-left)
	//  - arrow-circle-right: $(arrow-circle-right)
	//  - arrow-circle-up: $(arrow-circle-up)
	//  - layout-sidebar-right-off: $(layout-sidebar-right-off)
	//  - layout-panel-off: $(layout-panel-off)
	//  - layout-sidebar-left-off: $(layout-sidebar-left-off)
	//  - blank: $(blank)
	//  - heart-filled: $(heart-filled)
	//  - map: $(map)
	//  - map-horizontal: $(map-horizontal)
	//  - fold-horizontal: $(fold-horizontal)
	//  - map-filled: $(map-filled)
	//  - map-horizontal-filled: $(map-horizontal-filled)
	//  - fold-horizontal-filled: $(fold-horizontal-filled)
	//  - circle-small: $(circle-small)
	//  - bell-slash: $(bell-slash)
	//  - bell-slash-dot: $(bell-slash-dot)
	//  - comment-unresolved: $(comment-unresolved)
	//  - git-pull-request-go-to-changes: $(git-pull-request-go-to-changes)
	//  - git-pull-request-new-changes: $(git-pull-request-new-changes)
	//  - search-fuzzy: $(search-fuzzy)
	//  - comment-draft: $(comment-draft)
	//  - send: $(send)
	//  - sparkle: $(sparkle)
	//  - insert: $(insert)
	//  - mic: $(mic)
	//  - thumbsdown-filled: $(thumbsdown-filled)
	//  - thumbsup-filled: $(thumbsup-filled)
	//  - coffee: $(coffee)
	//  - snake: $(snake)
	//  - game: $(game)
	//  - vr: $(vr)
	//  - chip: $(chip)
	//  - piano: $(piano)
	//  - music: $(music)
	//  - mic-filled: $(mic-filled)
	//  - repo-fetch: $(repo-fetch)
	//  - copilot: $(copilot)
	//  - lightbulb-sparkle: $(lightbulb-sparkle)
	//  - robot: $(robot)
	//  - sparkle-filled: $(sparkle-filled)
	//  - diff-single: $(diff-single)
	//  - diff-multiple: $(diff-multiple)
	//  - surround-with: $(surround-with)
	//  - share: $(share)
	//  - git-stash: $(git-stash)
	//  - git-stash-apply: $(git-stash-apply)
	//  - git-stash-pop: $(git-stash-pop)
	//  - vscode: $(vscode)
	//  - vscode-insiders: $(vscode-insiders)
	//  - code-oss: $(code-oss)
	//  - run-coverage: $(run-coverage)
	//  - run-all-coverage: $(run-all-coverage)
	//  - coverage: $(coverage)
	//  - github-project: $(github-project)
	//  - map-vertical: $(map-vertical)
	//  - fold-vertical: $(fold-vertical)
	//  - map-vertical-filled: $(map-vertical-filled)
	//  - fold-vertical-filled: $(fold-vertical-filled)
	//  - go-to-search: $(go-to-search)
	//  - percentage: $(percentage)
	//  - sort-percentage: $(sort-percentage)
	//  - attach: $(attach)
	//  - go-to-editing-session: $(go-to-editing-session)
	//  - edit-session: $(edit-session)
	//  - code-review: $(code-review)
	//  - copilot-warning: $(copilot-warning)
	//  - python: $(python)
	//  - copilot-large: $(copilot-large)
	//  - copilot-warning-large: $(copilot-warning-large)
	//  - keyboard-tab: $(keyboard-tab)
	//  - copilot-blocked: $(copilot-blocked)
	//  - copilot-not-connected: $(copilot-not-connected)
	//  - flag: $(flag)
	//  - lightbulb-empty: $(lightbulb-empty)
	//  - symbol-method-arrow: $(symbol-method-arrow)
	//  - copilot-unavailable: $(copilot-unavailable)
	//  - repo-pinned: $(repo-pinned)
	//  - keyboard-tab-above: $(keyboard-tab-above)
	//  - keyboard-tab-below: $(keyboard-tab-below)
	//  - git-pull-request-done: $(git-pull-request-done)
	//  - mcp: $(mcp)
	//  - extensions-large: $(extensions-large)
	//  - layout-panel-dock: $(layout-panel-dock)
	//  - layout-sidebar-left-dock: $(layout-sidebar-left-dock)
	//  - layout-sidebar-right-dock: $(layout-sidebar-right-dock)
	//  - copilot-in-progress: $(copilot-in-progress)
	//  - copilot-error: $(copilot-error)
	//  - copilot-success: $(copilot-success)
	//  - chat-sparkle: $(chat-sparkle)
	//  - search-sparkle: $(search-sparkle)
	//  - edit-sparkle: $(edit-sparkle)
	//  - copilot-snooze: $(copilot-snooze)
	//  - send-to-remote-agent: $(send-to-remote-agent)
	//  - comment-discussion-sparkle: $(comment-discussion-sparkle)
	//  - chat-sparkle-warning: $(chat-sparkle-warning)
	//  - chat-sparkle-error: $(chat-sparkle-error)
	//  - dialog-error: $(dialog-error)
	//  - dialog-warning: $(dialog-warning)
	//  - dialog-info: $(dialog-info)
	//  - dialog-close: $(dialog-close)
	//  - tree-item-expanded: $(tree-item-expanded)
	//  - tree-filter-on-type-on: $(tree-filter-on-type-on)
	//  - tree-filter-on-type-off: $(tree-filter-on-type-off)
	//  - tree-filter-clear: $(tree-filter-clear)
	//  - tree-item-loading: $(tree-item-loading)
	//  - menu-selection: $(menu-selection)
	//  - menu-submenu: $(menu-submenu)
	//  - menubar-more: $(menubar-more)
	//  - scrollbar-button-left: $(scrollbar-button-left)
	//  - scrollbar-button-right: $(scrollbar-button-right)
	//  - scrollbar-button-up: $(scrollbar-button-up)
	//  - scrollbar-button-down: $(scrollbar-button-down)
	//  - toolbar-more: $(toolbar-more)
	//  - quick-input-back: $(quick-input-back)
	//  - drop-down-button: $(drop-down-button)
	//  - symbol-customcolor: $(symbol-customcolor)
	//  - export: $(export)
	//  - workspace-unspecified: $(workspace-unspecified)
	//  - newline: $(newline)
	//  - thumbsdown-filled: $(thumbsdown-filled)
	//  - thumbsup-filled: $(thumbsup-filled)
	//  - git-fetch: $(git-fetch)
	//  - lightbulb-sparkle-autofix: $(lightbulb-sparkle-autofix)
	//  - debug-breakpoint-pending: $(debug-breakpoint-pending)
	"terminal.integrated.tabs.defaultIcon": "terminal",

	// 제목 오른쪽에 표시되는 터미널 설명을 제어합니다. 변수는 컨텍스트에 따라 대체됩니다.
	// - `${cwd}`: 터미널의 현재 작업 디렉터리입니다.
	// - `${cwdFolder}`: 값이 초기 작업 디렉터리와 다른 경우 다중 루트 작업 영역 또는 단일 루트 작업 영역에 표시되는 터미널의 현재 작업 디렉터리입니다. Windows에서는 셸 통합이 사용하도록 설정된 경우에만 표시됩니다.
	// - `${workspaceFolder}`: 터미널이 시작된 작업 영역입니다.
	// - `${workspaceFolderName}`: 터미널이 시작된 작업 영역의 'name'입니다.
	// - `${local}`: 원격 작업 영역의 로컬 터미널을 나타냅니다.
	// - `${process}`: 터미널 프로세스의 이름입니다.
	// - `${progress}`: 'OSC 9;4' 시퀀스에 의해 보고된 진행 상태입니다.
	// - `${separator}`: 값 또는 정적 텍스트가 있는 변수로 둘러싸인 경우에만 표시되는 조건부 구분 기호 (` - `)입니다.
	// - `${sequence}`: 프로세스에 의해 터미널에 제공된 이름입니다.
	// - `${task}`: 이 터미널이 작업과 연결되어 있음을 나타냅니다.
	// - `${shellType}`: 검색된 셸 유형입니다.
	// - `${shellCommand}`: 셸 통합에 따라 실행되고 있는 명령입니다. 이를 위해서는 검색된 명령줄에 대한 높은 신뢰도가 필요한데, 이는 일부 프롬프트 프레임워크에서는 작동하지 않을 수 있습니다.
	// - `${shellPromptInput}`: 셸 통합에 따른 셸의 전체 프롬프트 입력입니다.
	"terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",

	// 터미널 탭 상태가 애니메이션을 지원하는지 여부를 제어합니다(예: 진행 중인 작업).
	"terminal.integrated.tabs.enableAnimation": true,

	// 터미널 탭이 터미널 측면에 목록으로 표시되는지 여부를 제어합니다. 이 기능을 사용하지 않도록 설정하면 드롭다운이 대신 표시됩니다.
	"terminal.integrated.tabs.enabled": true,

	// 탭의 터미널 포커스를 두 번 클릭하거나 한 번 클릭할 때 맞출지 여부를 제어합니다.
	//  - singleClick: 터미널 탭을 클릭할 때 터미널 포커스 설정
	//  - doubleClick: 터미널 탭을 두 번 클릭할 때 터미널 포커스 설정
	"terminal.integrated.tabs.focusMode": "doubleClick",

	// 터미널 탭 보기가 특정 조건에서 숨겨지는지 여부를 제어합니다.
	//  - never: 터미널 탭 보기를 숨기지 않음
	//  - singleTerminal: 터미널이 하나만 열린 경우 터미널 탭 보기 숨기기
	//  - singleGroup: 단일 터미널 그룹만 열려 있는 경우 터미널 탭 보기 숨기기
	"terminal.integrated.tabs.hideCondition": "singleTerminal",

	// 실제 터미널의 왼쪽 또는 오른쪽에 있는 터미널 탭의 위치를 제어합니다.
	//  - left: 터미널 왼쪽에 터미널 탭 보기 표시
	//  - right: 터미널 오른쪽에 터미널 탭 보기 표시
	"terminal.integrated.tabs.location": "right",

	// `terminal.integrated.tabs.title#` 및 `#terminal.integrated.tabs.description`이(가) 사용하는 구분 기호입니다.
	"terminal.integrated.tabs.separator": " - ",

	// 터미널 분할 및 종료 단추가 새 터미널 단추 옆에 표시되는지 여부를 제어합니다.
	//  - always: 항상 작업 표시
	//  - singleTerminal: 작업이 열려 있는 유일한 터미널인 경우 표시
	//  - singleTerminalOrNarrow: 작업이 열려 있는 유일한 터미널이거나 탭 보기가 텍스트가 없는 좁은 상태일 때 표시
	//  - never: 작업 표시 안 함
	"terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",

	// 보기에 활성 터미널 정보를 표시합니다. 탭 내의 제목이 표시되지 않는 경우 특히 유용합니다.
	//  - always: 항상 활성 터미널 표시
	//  - singleTerminal: 활성 터미널이 열려 있는 유일한 터미널인 경우 표시
	//  - singleTerminalOrNarrow: 활성 터미널이 열려 있는 유일한 터미널이거나 탭 보기가 텍스트가 없는 좁은 상태일 때 표시
	//  - never: 활성 터미널 표시 안 함
	"terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",

	// 터미널 제목을 제어합니다. 변수는 컨텍스트에 따라 대체됩니다.
	// - `${cwd}`: 터미널의 현재 작업 디렉터리입니다.
	// - `${cwdFolder}`: 값이 초기 작업 디렉터리와 다른 경우 다중 루트 작업 영역 또는 단일 루트 작업 영역에 표시되는 터미널의 현재 작업 디렉터리입니다. Windows에서는 셸 통합이 사용하도록 설정된 경우에만 표시됩니다.
	// - `${workspaceFolder}`: 터미널이 시작된 작업 영역입니다.
	// - `${workspaceFolderName}`: 터미널이 시작된 작업 영역의 'name'입니다.
	// - `${local}`: 원격 작업 영역의 로컬 터미널을 나타냅니다.
	// - `${process}`: 터미널 프로세스의 이름입니다.
	// - `${progress}`: 'OSC 9;4' 시퀀스에 의해 보고된 진행 상태입니다.
	// - `${separator}`: 값 또는 정적 텍스트가 있는 변수로 둘러싸인 경우에만 표시되는 조건부 구분 기호 (` - `)입니다.
	// - `${sequence}`: 프로세스에 의해 터미널에 제공된 이름입니다.
	// - `${task}`: 이 터미널이 작업과 연결되어 있음을 나타냅니다.
	// - `${shellType}`: 검색된 셸 유형입니다.
	// - `${shellCommand}`: 셸 통합에 따라 실행되고 있는 명령입니다. 이를 위해서는 검색된 명령줄에 대한 높은 신뢰도가 필요한데, 이는 일부 프롬프트 프레임워크에서는 작동하지 않을 수 있습니다.
	// - `${shellPromptInput}`: 셸 통합에 따른 셸의 전체 프롬프트 입력입니다.
	"terminal.integrated.tabs.title": "${process}",

	// 탭 정지의 셀 수입니다.
	"terminal.integrated.tabStopWidth": 8,

	// 터미널에서 문자 너비를 계산할 때 사용할 유니코드 버전을 제어합니다. 이모지 또는 다른 와이드 문자가 너무 많거나 적게 삭제하여 적절한 공백이나 백스페이스를 사용하지 않는 경우, 이 설정을 조정하는 것이 좋습니다.
	//  - 6: 유니코드 버전 6. 이전 시스템에서 더 잘 작동하는 이전 버전입니다.
	//  - 11: 유니코드 버전 11. 이 버전은 최신 버전의 유니코드를 사용하는 최신 시스템에서 더 나은 지원을 제공합니다.
	"terminal.integrated.unicodeVersion": "11",

	// 터미널 드롭다운에 WSL 배포판이 표시되는지를 제어합니다.
	"terminal.integrated.useWslProfiles": true,

	// Windows 터미널 프로세스 통신에 ConPTY를 사용할지 여부입니다(Windows 10 빌드 번호 18309 이상 필요). 이 설정이 false이면 Winpty가 사용됩니다.
	"terminal.integrated.windowsEnableConpty": true,

	// Windows와 함께 제공되는 것이 아니라 VS Code 함께 제공되는 실험적 conpty.dll(v1.22.250204002)을 사용할지 여부입니다.
	"terminal.integrated.windowsUseConptyDll": false,

	// 두 번 클릭하여 단어를 선택할 때와 대체 '단어' 링크 감지에서 단어 구분 기호로 간주할 모든 문자를 포함하는 문자열입니다. 링크를 감지할 때 사용되므로 링크 감지 시 사용되는 `:`와 같은 문자를 포함하면 'file:10:5'와 같은 링크의 행과 열 부분이 무시됩니다.
	"terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’“”|",

	// Whether to generate the 'final' modifer for code actions that create new declarations.
	//  - none: Do not generate final modifier.
	//  - fields: Generate 'final' modifier only for new field declarations.
	//  - variables: Generate 'final' modifier only for new variable declarations.
	//  - all: Generate 'final' modifier for all new declarations.
	"java.codeGeneration.addFinalForNewDeclaration": "none",

	// Generate method comments when generating the methods.
	"java.codeGeneration.generateComments": false,

	// Use 'instanceof' to compare types when generating the hashCode and equals methods.
	"java.codeGeneration.hashCodeEquals.useInstanceof": false,

	// Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher.
	"java.codeGeneration.hashCodeEquals.useJava7Objects": false,

	// Specifies the insertion location of the code generated by source actions.
	//  - afterCursor: Insert the generated code after the member where the cursor is located.
	//  - beforeCursor: Insert the generated code before the member where the cursor is located.
	//  - lastMember: Insert the generated code as the last member of the target type.
	"java.codeGeneration.insertionLocation": "afterCursor",

	// The code style for generating the toString method.
	//  - STRING_CONCATENATION: String concatenation
	//  - STRING_BUILDER: StringBuilder/StringBuffer
	//  - STRING_BUILDER_CHAINED: StringBuilder/StringBuffer - chained call
	//  - STRING_FORMAT: String.format/MessageFormat
	"java.codeGeneration.toString.codeStyle": "STRING_CONCATENATION",

	// Limit number of items in arrays/collections/maps to list, if 0 then list all.
	"java.codeGeneration.toString.limitElements": 0,

	// List contents of arrays instead of using native toString().
	"java.codeGeneration.toString.listArrayContents": true,

	// Skip null values when generating the toString method.
	"java.codeGeneration.toString.skipNullValues": false,

	// The template for generating the toString method.
	"java.codeGeneration.toString.template": "${object.className} [${member.name()}=${member.value}, ${otherMembers}]",

	// Use blocks in 'if' statements when generating the methods.
	"java.codeGeneration.useBlocks": false,

	// Defines the `smart semicolon` detection. Defaults to `false`.
	"java.edit.smartSemicolonDetection.enabled": false,

	// Specifies the file header comment for new Java file. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
	"java.templates.fileHeader": [],

	// Specifies the type comment for new Java type. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
	"java.templates.typeComment": [],

	// Specifies whether to try to collapse the opened worktrees into a single (common) repository in the views when possible
	"gitlens.views.collapseWorktreesWhenPossible": true,

	// Deprecated. Use `gitlens.views.formats.commits.description` instead
	// 
	"gitlens.views.commitDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.commitFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.commitFileFormat": null,

	// Deprecated. Use `gitlens.views.commits.files.label` instead
	// 
	"gitlens.views.commitFormat": null,

	// Specifies the default number of items to show in a view list. Use 0 to specify no limit
	"gitlens.views.defaultItemLimit": 10,

	// Specifies the description format of commits in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.commits.description": "${author, }${agoOrDate}",

	// Specifies the format of commits in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.commits.label": "${❰ tips|11? ❱➤  }${message}",

	// Specifies the tooltip format (in markdown) of commits in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.commits.tooltip": "${avatar} &nbsp;__${author}__ &nbsp;$(history) ${ago} _(${date})_ \\\n${link}${' via  'pullRequest}${'&nbsp;&nbsp;'changesDetail} ${message}${\n\n---\n\nfootnotes}\n\n${tips}",

	// Specifies the tooltip format (in markdown) of "file" commits in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.commits.tooltipWithStatus": "${avatar} &nbsp;__${author}__ &nbsp;$(history) ${ago} _(${date})_ \\\n${link}${' via  'pullRequest}&nbsp;&nbsp;•&nbsp;&nbsp;{{slot-status}} ${message}${\n\n---\n\nfootnotes}\n\n${tips}",

	// Specifies the description format of a file in the views. See [_File Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.formats.files.description": "${directory}${  ←  originalPath}",

	// Specifies the format of a file in the views. See [_File Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.formats.files.label": "${working  }${file}",

	// Specifies the description format of stashes in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.stashes.description": "${stashOnRef, }${agoOrDate}",

	// Specifies the format of stashes in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.stashes.label": "${message}",

	// Specifies the tooltip format (in markdown) of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.stashes.tooltip": "${link}${' on `'stashOnRef`}${'\\\n&nbsp;&nbsp;'changesDetail} \\\n &nbsp;$(history) ${ago} _(${date})_ ${message}${\n\n---\n\nfootnotes}",

	// Specifies whether to allow selecting multiple items in the views
	"gitlens.views.multiselect": true,

	// Specifies whether to open multiple changes in the multi-diff editor (single tab) or in individual diff editors (multiple tabs)
	"gitlens.views.openChangesInMultiDiffEditor": true,

	// Specifies the number of items to show in a each page when paginating a view list. Use 0 to specify no limit
	"gitlens.views.pageItemLimit": 40,

	// Specifies the default view to show when the _GitLens_ view is opened
	//  - commits: Commits view
	//  - branches: Worktrees view
	//  - remotes: Branches view
	//  - stashes: Remotes view
	//  - tags: Stashes view
	//  - worktrees: Tags view
	//  - contributors: Contributors view
	//  - repositories: Repositories view
	//  - searchAndCompare: File History view
	//  - launchpad: Launchpad view
	//  - fileHistory: Search & Compare view
	"gitlens.views.scm.grouped.default": "commits",

	// Specifies which views will be hidden, when grouped into the _GitLens_ view on the Source Control side bar
	"gitlens.views.scm.grouped.hiddenViews": {
		"commits": false,
		"worktrees": false,
		"branches": false,
		"remotes": false,
		"stashes": false,
		"tags": false,
		"contributors": false,
		"repositories": true,
		"fileHistory": false,
		"launchpad": false,
		"searchAndCompare": false
	},

	// Specifies which views will be grouped into the _GitLens_ view on the Source Control side bar
	"gitlens.views.scm.grouped.views": {
		"commits": true,
		"worktrees": true,
		"branches": true,
		"remotes": true,
		"stashes": true,
		"tags": true,
		"contributors": true,
		"repositories": true,
		"fileHistory": false,
		"launchpad": false,
		"searchAndCompare": false
	},

	// Specifies whether to show a _Contributors_ section on comparison results in the views
	"gitlens.views.showComparisonContributors": true,

	// Specifies whether to show contributor statistics in _Contributors_ sections in the views. This can take a while to compute depending on the repository size
	"gitlens.views.showContributorsStatistics": false,

	// Specifies whether to always show the current branch at the top of the views
	"gitlens.views.showCurrentBranchOnTop": true,

	// Specifies whether to show relative date markers (_Less than a week ago_, _Over a week ago_, _Over a month ago_, etc) on revision (commit) histories in the views
	"gitlens.views.showRelativeDateMarkers": true,

	// Deprecated. Use `gitlens.views.formats.stashes.description` instead
	// 
	"gitlens.views.stashDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.stashFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.stashFileFormat": null,

	// Deprecated. Use `gitlens.views.stashes.files.label` instead
	// 
	"gitlens.views.stashFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.statusFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.statusFileFormat": null,

	// 문제 보기를 열 때 문제 보기에 자동으로 파일을 표시할지 여부를 제어합니다.
	"problems.autoReveal": true,

	// 파일 및 폴더에 오류와 경고를 표시합니다. 꺼져 있을 때 `problems.visibility`이(가) 덮어씁니다.
	"problems.decorations.enabled": true,

	// 문제 보기의 기본 보기 모드를 제어합니다.
	"problems.defaultViewMode": "tree",

	// 활성화하면 상태 표시줄에 현재 문제가 표시됩니다.
	"problems.showCurrentInStatus": false,

	// 문제를 탐색하는 순서를 제어합니다.
	//  - severity: 심각도에 따라 정렬된 문제 탐색
	//  - position: 위치별로 정렬된 문제 탐색
	"problems.sortOrder": "severity",

	// 편집기 및 워크벤치 전체에서 문제를 표시할지 여부를 제어합니다.
	"problems.visibility": true,

	// 탐색 이동 경로를 사용하도록/사용하지 않도록 설정합니다.
	"breadcrumbs.enabled": true,

	// 이동 경로 보기에서 파일 경로를 표시할지 여부와 표시 방법을 제어합니다.
	//  - on: 이동 경로 뷰에서 파일 경로를 표시합니다.
	//  - off: 이동 경로 뷰에서 파일 경로를 표시하지 않습니다.
	//  - last: 이동 경로 뷰에서 파일 경로의 마지막 요소만 표시합니다.
	"breadcrumbs.filePath": "on",

	// 아이콘으로 이동 경로 항목을 렌더링합니다.
	"breadcrumbs.icons": true,

	// 사용하도록 설정되면 이동 경로에 '배열' 기호가 표시됩니다.
	"breadcrumbs.showArrays": true,

	// 사용하도록 설정된 경우 이동 경로에 '부울' 기호가 표시됩니다.
	"breadcrumbs.showBooleans": true,

	// 사용하도록 설정되면 이동 경로에 '클래스' 기호가 표시됩니다.
	"breadcrumbs.showClasses": true,

	// 사용하도록 설정되면 이동 경로에 '상수' 기호가 표시됩니다.
	"breadcrumbs.showConstants": true,

	// 사용하도록 설정되면 이동 경로에 '생성자' 기호가 표시됩니다.
	"breadcrumbs.showConstructors": true,

	// 사용하도록 설정되면 이동 경로에 'enumMember' 기호가 표시됩니다.
	"breadcrumbs.showEnumMembers": true,

	// 사용하도록 설정되면 이동 경로에 '열거형' 기호가 표시됩니다.
	"breadcrumbs.showEnums": true,

	// 사용하도록 설정되면 이동 경로에 '이벤트' 기호가 표시됩니다.
	"breadcrumbs.showEvents": true,

	// 사용하도록 설정되면 이동 경로에 '필드' 기호가 표시됩니다.
	"breadcrumbs.showFields": true,

	// 사용하도록 설정되면 이동 경로에 '파일' 기호가 표시됩니다.
	"breadcrumbs.showFiles": true,

	// 사용하도록 설정된 경우 이동 경로에 '함수' 기호가 표시됩니다.
	"breadcrumbs.showFunctions": true,

	// 사용하도록 설정되면 이동 경로에 '인터페이스' 기호가 표시됩니다.
	"breadcrumbs.showInterfaces": true,

	// 사용하도록 설정되면 이동 경로에 '키' 기호가 표시됩니다.
	"breadcrumbs.showKeys": true,

	// 사용하도록 설정되면 이동 경로에 '메서드' 기호가 표시됩니다.
	"breadcrumbs.showMethods": true,

	// 사용하도록 설정되면 이동 경로에 '모듈' 기호가 표시됩니다.
	"breadcrumbs.showModules": true,

	// 사용하도록 설정되면 이동 경로에 '네임스페이스' 기호가 표시됩니다.
	"breadcrumbs.showNamespaces": true,

	// 사용하도록 설정된 경우 이동 경로에 'null' 기호가 표시됩니다.
	"breadcrumbs.showNull": true,

	// 사용하도록 설정되면 이동 경로에 '숫자' 기호가 표시됩니다.
	"breadcrumbs.showNumbers": true,

	// 사용하도록 설정된 경우 이동 경로에 '개체' 기호가 표시됩니다.
	"breadcrumbs.showObjects": true,

	// 사용하도록 설정되면 이동 경로에 '연산자' 기호가 표시됩니다.
	"breadcrumbs.showOperators": true,

	// 사용하도록 설정되면 이동 경로에 '패키지' 기호가 표시됩니다.
	"breadcrumbs.showPackages": true,

	// 사용하도록 설정되면 이동 경로에 '속성' 기호가 표시됩니다.
	"breadcrumbs.showProperties": true,

	// 사용하도록 설정되면 이동 경로에 '문자열' 기호가 표시됩니다.
	"breadcrumbs.showStrings": true,

	// 사용하도록 설정되면 이동 경로에 '구조' 기호가 표시됩니다.
	"breadcrumbs.showStructs": true,

	// 사용하도록 설정되면 이동 경로에 'typeParameter' 기호가 표시됩니다.
	"breadcrumbs.showTypeParameters": true,

	// 사용하도록 설정되면 이동 경로에 '변수' 기호가 표시됩니다.
	"breadcrumbs.showVariables": true,

	// 이동 경로 보기에서 기호를 표시할지 여부와 표시 방법을 제어합니다.
	//  - on: 이동 경로 뷰에서 모든 기호를 표시합니다.
	//  - off: 이동 경로 뷰에서 기호를 표시하지 않습니다.
	//  - last: 이동 경로 뷰에서 현재 기호만 표시합니다.
	"breadcrumbs.symbolPath": "on",

	// 이동 경로 개요 보기에서 기호를 정렬하는 방법을 제어합니다.
	//  - position: 파일 위치 순서로 기호 개요를 표시합니다.
	//  - name: 사전순으로 기호 개요를 표시합니다.
	//  - type: 기호 형식 순서로 기호 개요를 표시합니다.
	"breadcrumbs.symbolSortOrder": "position",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Launchpad_ view
	"gitlens.views.launchpad.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Launchpad_ view. Only applies when `gitlens.views.launchpad.files.layout` is set to `tree` or `auto`
	"gitlens.views.launchpad.files.compact": true,

	// Specifies how the _Launchpad_ view will display file icons
	//  - status: Shows the file's status as the icon
	//  - type: Shows the file's type (theme icon) as the icon
	"gitlens.views.launchpad.files.icon": "type",

	// Specifies how the _Launchpad_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.launchpad.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.launchpad.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Launchpad_ view. Only applies when `gitlens.views.launchpad.files.layout` is set to `auto`
	"gitlens.views.launchpad.files.threshold": 5,

	// The list of clean ups to be run on the current document when it's saved or when the cleanup command is issued. Clean ups can automatically fix code style or programming mistakes. Click [HERE](command:_java.learnMoreAboutCleanUps) to learn more about what each clean up does.
	"java.cleanup.actions": [
		"renameFileToType"
	],

	// Deprecated, please use 'java.cleanup.actions' instead.
	// 
	"java.cleanup.actionsOnSave": [],

	// Reordering of fields, enum constants, and initializers can result in semantic and runtime changes due to different initialization and persistence order. This setting prevents this from occurring.
	"java.codeAction.sortMembers.avoidVolatileChanges": true,

	// Show quickfixes at the problem or line level.
	"java.quickfix.showAt": "line",

	// Specify whether to replace all the occurrences of the subtype with the new extracted interface.
	"java.refactoring.extract.interface.replace": true,

	// Enable/disable cleanup actions on save.
	"java.saveActions.cleanup": true,

	// Enable/disable auto organize imports on save action
	"java.saveActions.organizeImports": false,

	// Specifies the number of imports added before a star-import declaration is used.
	"java.sources.organizeImports.starThreshold": 99,

	// Specifies the number of static imports added before a star-import declaration is used.
	"java.sources.organizeImports.staticStarThreshold": 99,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Commits_ view
	"gitlens.views.commits.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `tree` or `auto`
	"gitlens.views.commits.files.compact": true,

	// Specifies how the _Commits_ view will display file icons
	//  - status: Shows the file's status as the icon
	//  - type: Shows the file's type (theme icon) as the icon
	"gitlens.views.commits.files.icon": "type",

	// Specifies how the _Commits_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.commits.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.commits.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `auto`
	"gitlens.views.commits.files.threshold": 5,

	// Specifies whether to query for pull requests associated with the current branch and commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with the current branch in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.showForCommits": true,

	// Specifies whether to reveal commits in the _Commits_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.commits.reveal": true,

	// Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag, etc) in the _Commits_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the current branch with a user-selected reference
	//  - working: Compares the working tree with a user-selected reference
	"gitlens.views.commits.showBranchComparison": "working",

	// Specifies whether to show stashes in the _Commits_ view
	"gitlens.views.commits.showStashes": false,

	// 개요 항목의 축소 또는 확장 여부를 제어합니다.
	//  - alwaysCollapse: 모든 항목 축소
	//  - alwaysExpand: 모든 항목 확장
	"outline.collapseItems": "alwaysExpand",

	// 아이콘으로 윤곽 요소를 렌더링합니다.
	"outline.icons": true,

	// 개요 요소에서 오류 및 경고에 배지를 사용합니다. 꺼져 있을 때 `problems.visibility`이(가) 덮어씁니다.
	"outline.problems.badges": true,

	// 개요 요소에서 오류 및 경고에 색을 사용합니다. 꺼져 있을 때 `problems.visibility`이(가) 덮어씁니다.
	"outline.problems.colors": true,

	// 개요 요소에 오류 및 경고를 표시합니다. 꺼져 있을 때 `problems.visibility`이(가) 덮어씁니다.
	"outline.problems.enabled": true,

	// 사용하도록 설정하면 개요에 '배열' 기호를 표시합니다.
	"outline.showArrays": true,

	// 사용하도록 설정하면 개요에 '부울' 기호를 표시합니다.
	"outline.showBooleans": true,

	// 사용하도록 설정하면 개요에 '클래스' 기호를 표시합니다.
	"outline.showClasses": true,

	// 사용하도록 설정하면 개요에 '상수' 기호를 표시합니다.
	"outline.showConstants": true,

	// 사용하도록 설정하면 개요에 '생성자' 기호를 표시합니다.
	"outline.showConstructors": true,

	// 사용하도록 설정하면 개요에 'enumMember' 기호를 표시합니다.
	"outline.showEnumMembers": true,

	// 사용하도록 설정하면 개요에 '열거형' 기호를 표시합니다.
	"outline.showEnums": true,

	// 사용하도록 설정하면 개요에 '이벤트' 기호를 표시합니다.
	"outline.showEvents": true,

	// 사용하도록 설정하면 개요에 '필드' 기호를 표시합니다.
	"outline.showFields": true,

	// 사용하도록 설정하면 개요에 '파일' 기호를 표시합니다.
	"outline.showFiles": true,

	// 사용하도록 설정하면 개요에 '기능' 기호를 표시합니다.
	"outline.showFunctions": true,

	// 사용하도록 설정하면 개요에 '인터페이스' 기호를 표시합니다.
	"outline.showInterfaces": true,

	// 사용하도록 설정하면 개요에 '키' 기호를 표시합니다.
	"outline.showKeys": true,

	// 사용하도록 설정하면 개요에 '메서드' 기호를 표시합니다.
	"outline.showMethods": true,

	// 사용하도록 설정하면 개요에 '모듈' 기호를 표시합니다.
	"outline.showModules": true,

	// 사용하도록 설정하면 개요에 '네임스페이스' 기호를 표시합니다.
	"outline.showNamespaces": true,

	// 사용하도록 설정하면 개요에 'null' 기호를 표시합니다.
	"outline.showNull": true,

	// 사용하도록 설정하면 개요에 '숫자' 기호를 표시합니다.
	"outline.showNumbers": true,

	// 사용하도록 설정하면 개요에 '개체' 기호를 표시합니다.
	"outline.showObjects": true,

	// 사용하도록 설정하면 개요에 '연산자' 기호를 표시합니다.
	"outline.showOperators": true,

	// 사용하도록 설정하면 개요에 '패키지' 기호를 표시합니다.
	"outline.showPackages": true,

	// 사용하도록 설정하면 개요에 '속성' 기호를 표시합니다.
	"outline.showProperties": true,

	// 사용하도록 설정하면 개요에 '문자열' 기호를 표시합니다.
	"outline.showStrings": true,

	// 사용하도록 설정하면 개요에 '구조' 기호를 표시합니다.
	"outline.showStructs": true,

	// 사용하도록 설정하면 개요에 'typeParameter' 기호를 표시합니다.
	"outline.showTypeParameters": true,

	// 사용하도록 설정하면 개요에 '변수' 기호를 표시합니다.
	"outline.showVariables": true,

	// Enable/disable the implementations code lens for the provided categories.
	//  - none: Disable the implementations code lens
	//  - types: Enable the implementations code lens only for types
	//  - methods: Enable the implementations code lens only for methods
	//  - all: Enable the implementations code lens for types and methods
	"java.implementationCodeLens": "none",

	// Enable/disable inlay hints for parameter names:
	// ```java
	// 
	// Integer.valueOf(/* s: */ '123', /* radix: */ 10)
	//  
	// ```
	//  `java.inlayHints.parameterNames.exclusions` can be used to disable the inlay hints for methods.
	//  - none: Disable parameter name hints
	//  - literals: Enable parameter name hints only for literal arguments
	//  - all: Enable parameter name hints for literal and non-literal arguments
	"java.inlayHints.parameterNames.enabled": "literals",

	// The patterns for the methods that will be disabled to show the inlay hints. Supported pattern examples:
	//  - `java.lang.Math.*` - All the methods from java.lang.Math.
	//  - `*.Arrays.asList` - Methods named as 'asList' in the types named as 'Arrays'.
	//  - `*.println(*)` - Methods named as 'println'.
	//  - `(from, to)` - Methods with two parameters named as 'from' and 'to'.
	//  - `(arg*)` - Methods with one parameter whose name starts with 'arg'.
	"java.inlayHints.parameterNames.exclusions": [],

	// Include getter, setter and builder/constructor when finding references.
	"java.references.includeAccessors": true,

	// Include declarations when finding references.
	"java.references.includeDeclarations": true,

	// Include the decompiled sources when finding references.
	"java.references.includeDecompiledSources": true,

	// Enable/disable the references code lens.
	"java.referencesCodeLens.enabled": false,

	// Specifies the scope which must be used for search operation like 
	//  - Find Reference
	//  - Call Hierarchy
	//  - Workspace Symbols
	//  - all: Search on all classpath entries including reference libraries and projects.
	//  - main: All classpath entries excluding test classpath entries.
	"java.search.scope": "all",

	// Include method declarations from source files in symbol search.
	"java.symbols.includeSourceMethodDeclarations": false,

	// Enable/disable lazy loading the content in type hierarchy. Lazy loading could save a lot of loading time but every type should be expanded manually to load its content.
	"java.typeHierarchy.lazyLoad": false,

	// Specifies whether to automatically link external resources in commit messages
	"gitlens.views.commitDetails.autolinks.enabled": true,

	// Specifies whether to lookup additional details about automatically link external resources in commit messages. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commitDetails.autolinks.enhanced": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Commit Details_ view
	"gitlens.views.commitDetails.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Commit Details_ view. Only applies when `gitlens.views.commitDetails.files.layout` is set to `tree` or `auto`
	"gitlens.views.commitDetails.files.compact": true,

	// Specifies how the _Commit Details_ view will display file icons
	//  - status: Shows the file's status as the icon
	//  - type: Shows the file's type (theme icon) as the icon
	"gitlens.views.commitDetails.files.icon": "type",

	// Specifies how the _Commit Details_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.commitDetails.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.commitDetails.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Commit Details_ view. Only applies when `gitlens.views.commitDetails.files.layout` is set to `auto`
	"gitlens.views.commitDetails.files.threshold": 5,

	// Specifies whether to query for associated pull requests. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commitDetails.pullRequests.enabled": true,

	// Preferred content provider (a 3rd party decompiler id, usually)
	"java.contentProvider.preferred": null,

	// Specifies a list of file patterns for which matching documents should not have their diagnostics reported (eg. '**/Foo.java').
	"java.diagnostic.filter": [],

	// Enable/disable download of Maven source artifacts for Eclipse projects.
	"java.eclipse.downloadSources": false,

	// Specifies whether to recheck all open Java files for diagnostics when editing a Java file.
	"java.edit.validateAllOpenBuffersOnChanges": false,

	// Specifies whether to reload the sources of the open class files when their source jar files are changed.
	//  - ask: Ask to reload the sources of the open class files
	//  - auto: Automatically reload the sources of the open class files
	//  - manual: Manually reload the sources of the open class files
	"java.editor.reloadChangedSources": "ask",

	// Enable/disable smart folding range support. If disabled, it will use the default indentation-based folding range provided by VS Code.
	"java.foldingRange.enabled": true,

	// Enable/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection.
	"java.selectionRange.enabled": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Pull Request_ view
	"gitlens.views.pullRequest.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Pull Request_ view. Only applies when `gitlens.views.pullRequest.files.layout` is set to `tree` or `auto`
	"gitlens.views.pullRequest.files.compact": true,

	// Specifies how the _Pull Request_ view will display file icons
	//  - status: Shows the file's status as the icon
	//  - type: Shows the file's type (theme icon) as the icon
	"gitlens.views.pullRequest.files.icon": "type",

	// Specifies how the _Pull Request_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.pullRequest.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.pullRequest.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Pull Request_ view. Only applies when `gitlens.views.pullRequest.files.layout` is set to `auto`
	"gitlens.views.pullRequest.files.threshold": 5,

	// Specifies whether to automatically refresh the _Repositories_ view when the repository or the file system changes
	"gitlens.views.repositories.autoRefresh": true,

	// Specifies whether to automatically reveal repositories in the _Repositories_ view when opening files
	"gitlens.views.repositories.autoReveal": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Repositories_ view
	"gitlens.views.repositories.avatars": true,

	// Specifies whether to compact (flatten) unnecessary branch and tag nesting in the _Repositories_ view. Only applies when `gitlens.views.repositories.branches.layout` is set to `tree`
	"gitlens.views.repositories.branches.compact": true,

	// Specifies how the _Repositories_ view will display branches and tags
	//  - list: Displays branches and tags as a list
	//  - tree: Displays branches and tags as a tree when names contain slashes `/`
	"gitlens.views.repositories.branches.layout": "tree",

	// Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag, etc) under each branch in the _Repositories_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the branch with a user-selected reference
	"gitlens.views.repositories.branches.showBranchComparison": "branch",

	// Specifies whether to show stashes in the _Commits_ and _Branches_ sections of the _Repositories_ view
	"gitlens.views.repositories.branches.showStashes": false,

	// Specifies whether to show the _Repositories_ view in a compact display density
	"gitlens.views.repositories.compact": false,

	// Deprecated. This setting is no longer used
	// 
	"gitlens.views.repositories.enabled": null,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `tree` or `auto`
	"gitlens.views.repositories.files.compact": true,

	// Specifies how the _Repositories_ view will display file icons
	//  - status: Shows the file's status as the icon
	//  - type: Shows the file's type (theme icon) as the icon
	"gitlens.views.repositories.files.icon": "type",

	// Specifies how the _Repositories_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.repositories.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.repositories.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `auto`
	"gitlens.views.repositories.files.threshold": 5,

	// Specifies whether to include working tree file status for each repository in the _Repositories_ view
	"gitlens.views.repositories.includeWorkingTree": false,

	// Specifies whether to query for pull requests associated with branches and commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with branches in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.showForCommits": true,

	// Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag, etc) in the _Repositories_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the current branch with a user-selected reference
	//  - working: Compares the working tree with a user-selected reference
	"gitlens.views.repositories.showBranchComparison": "working",

	// Specifies whether to show the branches for each repository in the _Repositories_ view
	"gitlens.views.repositories.showBranches": true,

	// Specifies whether to show the commits on the current branch for each repository in the _Repositories_ view
	"gitlens.views.repositories.showCommits": true,

	// Specifies whether to show the contributors for each repository in the _Repositories_ view
	"gitlens.views.repositories.showContributors": true,

	// Specifies whether to show the experimental incoming activity for each repository in the _Repositories_ view
	"gitlens.views.repositories.showIncomingActivity": false,

	// Specifies whether to show the remotes for each repository in the _Repositories_ view
	"gitlens.views.repositories.showRemotes": true,

	// Specifies whether to show the stashes for each repository in the _Repositories_ view
	"gitlens.views.repositories.showStashes": false,

	// Specifies whether to show the tags for each repository in the _Repositories_ view
	"gitlens.views.repositories.showTags": true,

	// Specifies whether to show the upstream status of the current branch for each repository in the _Repositories_ view
	"gitlens.views.repositories.showUpstreamStatus": true,

	// Specifies whether to show the worktrees for each repository in the _Repositories_ view
	"gitlens.views.repositories.showWorktrees": true,

	// Specifies how the _Repositories_ view will display worktrees
	//  - name: Displays worktree name
	//  - path: Displays worktree path
	//  - relativePath: Displays worktree relative path
	"gitlens.views.repositories.worktrees.viewAs": "name",

	// Specifies whether file histories will follow renames
	"gitlens.advanced.fileHistoryFollowsRenames": true,

	// Specifies whether file histories will show commits from all branches
	"gitlens.advanced.fileHistoryShowAllBranches": false,

	// Specifies whether file histories will show merge commits
	"gitlens.advanced.fileHistoryShowMergeCommits": false,

	// Specifies whether to show avatar images instead of status icons in the _File History_ view
	"gitlens.views.fileHistory.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _File History_ view. Only applies when `gitlens.views.fileHistory.files.layout` is set to `tree` or `auto`
	"gitlens.views.fileHistory.files.compact": true,

	// Specifies how the _File History_ view will display file icons
	//  - status: Shows the file's status as the icon
	//  - type: Shows the file's type (theme icon) as the icon
	"gitlens.views.fileHistory.files.icon": "type",

	// Specifies how the _File History_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.fileHistory.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.fileHistory.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _File History_ view. Only applies when `gitlens.views.fileHistory.files.layout` is set to `auto`
	"gitlens.views.fileHistory.files.threshold": 5,

	// Specifies the default mode for the _File History_ view
	//  - commits: Displays commits for the selected file or folder
	//  - contributors: Displays contributors for the selected file or folder
	"gitlens.views.fileHistory.mode": "commits",

	// Specifies whether to query for pull requests associated with commits in the _File History_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.fileHistory.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _File History_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.fileHistory.pullRequests.showForCommits": true,

	// Specifies whether to allow opening multiple instances of the _Visual File History_ in the editor area
	"gitlens.visualHistory.allowMultiple": true,

	// Specifies the limit on the how many commits can be queried for statistics in the _Visual File History_, because of rate limits. Only applies to virtual workspaces.
	"gitlens.visualHistory.queryLimit": 20,

	// Specifies whether to show avatar images instead of status icons in the _Line History_ view
	"gitlens.views.lineHistory.avatars": true,

	// Deprecated. This setting is no longer used
	// 
	"gitlens.views.lineHistory.enabled": null,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Branches_ view
	"gitlens.views.branches.avatars": true,

	// Specifies whether to compact (flatten) unnecessary branch nesting in the _Branches_ view. Only applies when `gitlens.views.branches.branches.layout` is set to `tree`
	"gitlens.views.branches.branches.compact": true,

	// Specifies how the _Branches_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when names contain slashes `/`
	"gitlens.views.branches.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `tree` or `auto`
	"gitlens.views.branches.files.compact": true,

	// Specifies how the _Branches_ view will display file icons
	//  - status: Shows the file's status as the icon
	//  - type: Shows the file's type (theme icon) as the icon
	"gitlens.views.branches.files.icon": "type",

	// Specifies how the _Branches_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.branches.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.branches.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `auto`
	"gitlens.views.branches.files.threshold": 5,

	// Specifies whether to query for pull requests associated with each branch and commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with each branch in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.showForCommits": true,

	// Specifies whether to reveal branches in the _Branches_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.branches.reveal": true,

	// Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag, etc) in the _Branches_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the branch with a user-selected reference
	"gitlens.views.branches.showBranchComparison": "branch",

	// Specifies whether to show remote branches for the default remote in the _Branches_ view
	"gitlens.views.branches.showRemoteBranches": false,

	// Specifies whether to show stashes in the _Branches_ view
	"gitlens.views.branches.showStashes": false,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Remotes_ view
	"gitlens.views.remotes.avatars": true,

	// Specifies whether to compact (flatten) unnecessary branch nesting in the _Remotes_ view. Only applies when `gitlens.views.remotes.branches.layout` is set to `tree`
	"gitlens.views.remotes.branches.compact": true,

	// Specifies how the _Remotes_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when names contain slashes `/`
	"gitlens.views.remotes.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `tree` or `auto`
	"gitlens.views.remotes.files.compact": true,

	// Specifies how the _Remotes_ view will display file icons
	//  - status: Shows the file's status as the icon
	//  - type: Shows the file's type (theme icon) as the icon
	"gitlens.views.remotes.files.icon": "type",

	// Specifies how the _Remotes_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.remotes.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.remotes.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `auto`
	"gitlens.views.remotes.files.threshold": 5,

	// Specifies whether to query for pull requests associated with each branch and commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with each branch in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.showForCommits": true,

	// Specifies whether to reveal remotes in the _Remotes_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.remotes.reveal": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `tree` or `auto`
	"gitlens.views.stashes.files.compact": true,

	// Specifies how the _Stashes_ view will display file icons
	//  - status: Shows the file's status as the icon
	//  - type: Shows the file's type (theme icon) as the icon
	"gitlens.views.stashes.files.icon": "type",

	// Specifies how the _Stashes_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.stashes.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.stashes.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `auto`
	"gitlens.views.stashes.files.threshold": 5,

	// Specifies whether to reveal stashes in the _Stashes_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.stashes.reveal": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Tags_ view
	"gitlens.views.tags.avatars": true,

	// Specifies whether to compact (flatten) unnecessary tag nesting in the _Tags_ view. Only applies when `gitlens.views.tags.branches.layout` is set to `tree`
	"gitlens.views.tags.branches.compact": true,

	// Specifies how the _Tags_ view will display tags
	//  - list: Displays tags as a list
	//  - tree: Displays tags as a tree when names contain slashes `/`
	"gitlens.views.tags.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `tree` or `auto`
	"gitlens.views.tags.files.compact": true,

	// Specifies how the _Tags_ view will display file icons
	//  - status: Shows the file's status as the icon
	//  - type: Shows the file's type (theme icon) as the icon
	"gitlens.views.tags.files.icon": "type",

	// Specifies how the _Tags_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.tags.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.tags.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `auto`
	"gitlens.views.tags.files.threshold": 5,

	// Specifies whether to reveal tags in the _Tags_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.tags.reveal": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Worktrees_ view
	"gitlens.views.worktrees.avatars": true,

	// Specifies whether to compact (flatten) unnecessary branch nesting in the _Worktrees_ view. Only applies when `gitlens.views.worktrees.branches.layout` is set to `tree`
	"gitlens.views.worktrees.branches.compact": true,

	// Specifies how the _Worktrees_ view will display worktree branches
	//  - list: Displays worktree branches as a list
	//  - tree: Displays worktree branches as a tree when names contain slashes `/`
	"gitlens.views.worktrees.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Worktrees_ view. Only applies when `gitlens.views.worktrees.files.layout` is set to `tree` or `auto`
	"gitlens.views.worktrees.files.compact": true,

	// Specifies how the _Worktrees_ view will display file icons
	//  - status: Shows the file's status as the icon
	//  - type: Shows the file's type (theme icon) as the icon
	"gitlens.views.worktrees.files.icon": "type",

	// Specifies how the _Worktrees_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.worktrees.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.worktrees.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Worktrees_ view. Only applies when `gitlens.views.worktrees.files.layout` is set to `auto`
	"gitlens.views.worktrees.files.threshold": 5,

	// Specifies whether to query for pull requests associated with the worktree branch and commits in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.worktrees.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with the worktree branch in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.worktrees.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.worktrees.pullRequests.showForCommits": true,

	// Specifies whether to reveal worktrees in the _Worktrees_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.worktrees.reveal": true,

	// Specifies whether to show a comparison of the worktree branch with a user-selected reference (branch, tag, etc) in the _Worktrees_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the worktree branch with a user-selected reference
	"gitlens.views.worktrees.showBranchComparison": "working",

	// Specifies whether to show stashes in the _Worktrees_ view
	"gitlens.views.worktrees.showStashes": false,

	// Specifies how the _Worktrees_ view will display worktrees
	//  - name: Displays worktree name
	//  - path: Displays worktree path
	//  - relativePath: Displays worktree relative path
	"gitlens.views.worktrees.worktrees.viewAs": "name",

	// Specifies the default path in which new worktrees will be created
	"gitlens.worktrees.defaultLocation": null,

	// Specifies how and when to open a worktree after it is created
	//  - always: Always open the new worktree in the current window
	//  - alwaysNewWindow: Always open the new worktree in a new window
	//  - onlyWhenEmpty: Only open the new worktree in the current window when no folder is opened
	//  - never: Never open the new worktree
	//  - prompt: Always prompt to open the new worktree
	"gitlens.worktrees.openAfterCreate": "prompt",

	// Specifies whether to prompt for a path when creating new worktrees
	"gitlens.worktrees.promptForLocation": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Contributors_ view
	"gitlens.views.contributors.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `tree` or `auto`
	"gitlens.views.contributors.files.compact": true,

	// Specifies how the _Contributors_ view will display file icons
	//  - status: Shows the file's status as the icon
	//  - type: Shows the file's type (theme icon) as the icon
	"gitlens.views.contributors.files.icon": "type",

	// Specifies how the _Contributors_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.contributors.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.contributors.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `auto`
	"gitlens.views.contributors.files.threshold": 5,

	// Specifies the maximum amount of time (in seconds) to wait for all contributors to load. Use 0 to wait indefinitely (no timeout)
	"gitlens.views.contributors.maxWait": 10,

	// Specifies whether to query for pull requests associated with branches and commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.contributors.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.contributors.pullRequests.showForCommits": true,

	// Specifies whether to reveal contributors in the _Contributors_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.contributors.reveal": true,

	// Specifies whether to show commits from all branches in the _Contributors_ view
	"gitlens.views.contributors.showAllBranches": false,

	// Specifies whether to show contributor statistics in the _Contributors_ view. This can take a while to compute depending on the repository size
	"gitlens.views.contributors.showStatistics": false,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Search & Compare_ view
	"gitlens.views.searchAndCompare.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `tree` or `auto`
	"gitlens.views.searchAndCompare.files.compact": true,

	// Specifies how the _Search & Compare_ view will display file icons
	//  - status: Shows the file's status as the icon
	//  - type: Shows the file's type (theme icon) as the icon
	"gitlens.views.searchAndCompare.files.icon": "type",

	// Specifies how the _Search & Compare_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.searchAndCompare.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.searchAndCompare.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `auto`
	"gitlens.views.searchAndCompare.files.threshold": 5,

	// Specifies whether to query for pull requests associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.searchAndCompare.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.searchAndCompare.pullRequests.showForCommits": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Cloud Patches_ view
	"gitlens.views.drafts.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Cloud Patches_ view. Only applies when `gitlens.views.drafts.files.layout` is set to `tree` or `auto`
	"gitlens.views.drafts.files.compact": true,

	// Specifies how the _Cloud Patches_ view will display file icons
	//  - status: Shows the file's status as the icon
	//  - type: Shows the file's type (theme icon) as the icon
	"gitlens.views.drafts.files.icon": "type",

	// Specifies how the _Cloud Patches_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.drafts.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.drafts.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Cloud Patches_ view. Only applies when `gitlens.views.drafts.files.layout` is set to `auto`
	"gitlens.views.drafts.files.threshold": 5,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Patch Details_ view
	"gitlens.views.patchDetails.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Patch Details_ view. Only applies when `gitlens.views.patchDetails.files.layout` is set to `tree` or `auto`
	"gitlens.views.patchDetails.files.compact": true,

	// Specifies how the _Patch Details_ view will display file icons
	//  - status: Shows the file's status as the icon
	//  - type: Shows the file's type (theme icon) as the icon
	"gitlens.views.patchDetails.files.icon": "type",

	// Specifies how the _Patch Details_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.patchDetails.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.patchDetails.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Patch Details_ view. Only applies when `gitlens.views.patchDetails.files.layout` is set to `auto`
	"gitlens.views.patchDetails.files.threshold": 5,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Cloud Workspaces_ view
	"gitlens.views.workspaces.avatars": true,

	// Specifies whether to compact (flatten) unnecessary branch and tag nesting in the _Cloud Workspaces_ view. Only applies when `gitlens.views.workspaces.branches.layout` is set to `tree`
	"gitlens.views.workspaces.branches.compact": true,

	// Specifies how the _Cloud Workspaces_ view will display branches and tags
	//  - list: Displays branches and tags as a list
	//  - tree: Displays branches and tags as a tree when names contain slashes `/`
	"gitlens.views.workspaces.branches.layout": "tree",

	// Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag, etc) under each branch in the _Cloud Workspaces_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the branch with a user-selected reference
	"gitlens.views.workspaces.branches.showBranchComparison": "branch",

	// Specifies whether to show stashes in the _Commits_ and _Branches_ sections of the _Cloud Workspaces_ view
	"gitlens.views.workspaces.branches.showStashes": false,

	// Specifies whether to show the _Cloud Workspaces_ view in a compact display density
	"gitlens.views.workspaces.compact": false,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Cloud Workspaces_ view. Only applies when `gitlens.views.workspaces.files.layout` is set to `tree` or `auto`
	"gitlens.views.workspaces.files.compact": true,

	// Specifies how the _Cloud Workspaces_ view will display file icons
	//  - status: Shows the file's status as the icon
	//  - type: Shows the file's type (theme icon) as the icon
	"gitlens.views.workspaces.files.icon": "type",

	// Specifies how the _Cloud Workspaces_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.workspaces.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.workspaces.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Cloud Workspaces_ view. Only applies when `gitlens.views.workspaces.files.layout` is set to `auto`
	"gitlens.views.workspaces.files.threshold": 5,

	// Specifies whether to include working tree file status for each repository in the _Cloud Workspaces_ view
	"gitlens.views.workspaces.includeWorkingTree": false,

	// Specifies whether to query for pull requests associated with branches and commits in the _Cloud Workspaces_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.workspaces.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with branches in the _Cloud Workspaces_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.workspaces.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Cloud Workspaces_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.workspaces.pullRequests.showForCommits": true,

	// Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag, etc) in the _Cloud Workspaces_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the current branch with a user-selected reference
	//  - working: Compares the working tree with a user-selected reference
	"gitlens.views.workspaces.showBranchComparison": "working",

	// Specifies whether to show the branches for each repository in the _Cloud Workspaces_ view
	"gitlens.views.workspaces.showBranches": true,

	// Specifies whether to show the commits on the current branch for each repository in the _Cloud Workspaces_ view
	"gitlens.views.workspaces.showCommits": true,

	// Specifies whether to show the contributors for each repository in the _Cloud Workspaces_ view
	"gitlens.views.workspaces.showContributors": true,

	// Specifies whether to show the experimental incoming activity for each repository in the _Cloud Workspaces_ view
	"gitlens.views.workspaces.showIncomingActivity": false,

	// Specifies whether to show the remotes for each repository in the _Cloud Workspaces_ view
	"gitlens.views.workspaces.showRemotes": true,

	// Specifies whether to show the stashes for each repository in the _Cloud Workspaces_ view
	"gitlens.views.workspaces.showStashes": false,

	// Specifies whether to show the tags for each repository in the _Cloud Workspaces_ view
	"gitlens.views.workspaces.showTags": true,

	// Specifies whether to show the upstream status of the current branch for each repository in the _Cloud Workspaces_ view
	"gitlens.views.workspaces.showUpstreamStatus": true,

	// Specifies whether to show the worktrees for each repository in the _Cloud Workspaces_ view
	"gitlens.views.workspaces.showWorktrees": true,

	// Specifies how the _Cloud Workspaces_ view will display worktrees
	//  - name: Displays worktree name
	//  - path: Displays worktree path
	//  - relativePath: Displays worktree relative path
	"gitlens.views.workspaces.worktrees.viewAs": "name",

	// Specifies how Git commits are displayed in the _Interactive Rebase Editor_
	//  - asc: Shows oldest commit first
	//  - desc: Shows newest commit first
	"gitlens.rebaseEditor.ordering": "desc",

	// Specifies when to show the _Commit Details_ view for the selected row in the _Interactive Rebase Editor_
	//  - false: Never shows the _Commit Details_ view automatically
	//  - open: Shows the _Commit Details_ view automatically only when opening the _Interactive Rebase Editor_
	//  - selection: Shows the _Commit Details_ view automatically when selection changes in the _Interactive Rebase Editor_
	"gitlens.rebaseEditor.showDetailsView": "selection",

	// Specifies whether to show avatar images in quick pick menus when applicable
	"gitlens.gitCommands.avatars": true,

	// Specifies whether to dismiss the _Git Command Palette_ when focus is lost (if not, press `ESC` to dismiss)
	"gitlens.gitCommands.closeOnFocusOut": true,

	// Specifies whether to match all or any commit message search patterns
	"gitlens.gitCommands.search.matchAll": false,

	// Specifies whether to match commit search patterns with or without regard to casing
	"gitlens.gitCommands.search.matchCase": false,

	// Specifies whether to match commit search patterns using regular expressions
	"gitlens.gitCommands.search.matchRegex": true,

	// Specifies whether to show the commit search results directly in the quick pick menu, in the Side Bar, or will be based on the context
	"gitlens.gitCommands.search.showResultsInSideBar": null,

	// Deprecated. This setting has been renamed to `gitlens.gitCommands.search.showResultsInSideBar`
	// 
	"gitlens.gitCommands.search.showResultsInView": null,

	// Specifies which (and when) Git commands will skip the confirmation step, using the format: `git-command-name:(menu|command)`
	//  - branch-create:command: Skips branch create confirmations when run from a command, e.g. a view action
	//  - branch-create:menu: Skips branch create confirmations when run from the Git Command Palette
	//  - co-authors:command: Skips co-author confirmations when run from a command, e.g. a view action
	//  - co-authors:menu: Skips co-author confirmations when run from the Git Command Palette
	//  - fetch:command: Skips fetch confirmations when run from a command, e.g. a view action
	//  - fetch:menu: Skips fetch confirmations when run from the Git Command Palette
	//  - pull:command: Skips pull confirmations when run from a command, e.g. a view action
	//  - pull:menu: Skips pull confirmations when run from the Git Command Palette
	//  - push:command: Skips push confirmations when run from a command, e.g. a view action
	//  - push:menu: Skips push confirmations when run from the Git Command Palette
	//  - stash-apply:command: Skips stash apply confirmations when run from a command, e.g. a view action
	//  - stash-apply:menu: Skips stash apply confirmations when run from the Git Command Palette
	//  - stash-pop:command: Skips stash pop confirmations when run from a command, e.g. a view action
	//  - stash-pop:menu: Skips stash pop confirmations when run from the Git Command Palette
	//  - stash-push:command: Skips stash push confirmations when run from a command, e.g. a view action
	//  - stash-push:menu: Skips stash push confirmations when run from the Git Command Palette
	//  - switch:command: Skips switch confirmations when run from a command, e.g. a view action
	//  - switch:menu: Skips switch confirmations when run from the Git Command Palette
	//  - tag-create:command: Skips tag create confirmations when run from a command, e.g. a view action
	//  - tag-create:menu: Skips tag create confirmations when run from the Git Command Palette
	"gitlens.gitCommands.skipConfirmations": [
		"fetch:command",
		"stash-push:command"
	],

	// Specifies how Git commands are sorted in the _Git Command Palette_
	//  - name: Sorts commands by name
	//  - usage: Sorts commands by last used date
	"gitlens.gitCommands.sortBy": "usage",

	// Specifies autolinks to external resources in commit messages. Use `<num>` as the variable for the reference number
	"gitlens.autolinks": null,

	// Specifies whether to use cloud-based integrations when authenticating with GitHub
	"gitlens.cloudIntegrations.enabled": true,

	// Specifies whether to enable rich integrations with any supported remote services
	"gitlens.integrations.enabled": true,

	// Specifies whether to allow guest access to GitLens features when using Visual Studio Live Share
	"gitlens.liveshare.allowGuestAccess": true,

	// Specifies whether to enable integration with Visual Studio Live Share
	"gitlens.liveshare.enabled": true,

	// Specifies the configuration of a partner integration
	"gitlens.partners": null,

	// Specifies custom remote services to be matched with Git remotes to detect custom domains for built-in remote services or provide support for custom remote services
	"gitlens.remotes": null,

	// Specifies whether to enable experimental integration with the GitKraken CLI
	"gitlens.gitkraken.cli.integration.enabled": false,

	// Specifies whether to automatically install and enable the GitKraken MCP. This only applies to VS Code 1.101 and later.
	"gitlens.gitkraken.mcp.autoEnabled": true,

	// Specifies whether to use VS Code as Git's `core.editor` for Gitlens terminal commands
	"gitlens.terminal.overrideGitEditor": true,

	// Specifies whether to enable terminal links &mdash; autolinks in the integrated terminal to quickly jump to more details for commits, branches, tags, and more
	"gitlens.terminalLinks.enabled": true,

	// Specifies whether to show the _Commit Details_ view when clicking on a commit link in the integrated terminal
	"gitlens.terminalLinks.showDetailsView": true,

	// Specifies a custom URL to use for access to an Azure OpenAI model. Azure URLs should be in the following format: https://{your-resource-name}.openai.azure.com/openai/deployments/{deployment-id}/chat/completions?api-version={api-version}
	"gitlens.ai.azure.url": null,

	// Specifies whether to enable GitLens' AI-powered features
	"gitlens.ai.enabled": true,

	// Specifies whether to enable the experimental version of the commit composer
	"gitlens.ai.experimental.composer.enabled": false,

	// Specifies custom instructions to provide to the AI provider when generating a summary of changes
	"gitlens.ai.explainChanges.customInstructions": null,

	// Specifies custom instructions to provide to the AI provider when generating a changelog from a set of changes
	"gitlens.ai.generateChangelog.customInstructions": null,

	// Specifies custom instructions to provide to the AI provider when generating a commit message
	"gitlens.ai.generateCommitMessage.customInstructions": null,

	// Specifies custom instructions to provide to the AI provider when generating commits
	"gitlens.ai.generateCommits.customInstructions": null,

	// Specifies custom instructions to provide to the AI provider when generating a cloud patch title and description
	"gitlens.ai.generateCreateCloudPatch.customInstructions": null,

	// Specifies custom instructions to provide to the AI provider when generating a code suggest title and description
	"gitlens.ai.generateCreateCodeSuggest.customInstructions": null,

	// Specifies custom instructions to provide to the AI provider when generating a pull request title and description
	"gitlens.ai.generateCreatePullRequest.customInstructions": null,

	// Specifies custom instructions to provide to the AI provider when generating a stash message
	"gitlens.ai.generateStashMessage.customInstructions": null,

	// Specifies the GitKraken AI provided model to use for GitLens' AI features, formatted as `provider:model`
	"gitlens.ai.gitkraken.model": null,

	// Specifies the threshold (in tokens) for when to show a warning about the prompt being too large
	"gitlens.ai.largePromptWarningThreshold": 20000,

	// Specifies the AI provider and model to use for GitLens' AI features. Should be formatted as `provider:model` (e.g. `openai:gpt-4o` or `anthropic:claude-3-5-sonnet-latest`), `gitkraken` for GitKraken AI provided models, or `vscode` for models provided by the VS Code extension API (e.g. Copilot)
	"gitlens.ai.model": null,

	// Specifies the temperature, a measure of output randomness, to use for the AI model. Higher values result in more randomness, e.g. creativity, while lower values are more deterministic
	"gitlens.ai.modelOptions.temperature": 0.7,

	// Specifies the Ollama URL to use for access
	"gitlens.ai.ollama.url": null,

	// Specifies a custom URL to use for access to an OpenAI model.
	"gitlens.ai.openai.url": null,

	// Specifies a custom URL to use for access to an OpenAI-compatible model.
	"gitlens.ai.openaicompatible.url": null,

	// Specifies the VS Code provided model to use for GitLens' AI features, formatted as `provider:model`
	"gitlens.ai.vscode.model": null,

	// 타임라인 보기에서 목록 끝까지 스크롤한 경우 다음 항목 페이지를 로드할지 여부를 제어합니다.
	"timeline.pageOnScroll": true,

	// 기본 보기에서와 추가 항목 로드 시 타임라인 보기에 표시할 항목 수입니다. `null`로 설정하면 타임라인 보기의 표시 영역에 따라 페이지 크기가 자동으로 선택됩니다.
	"timeline.pageSize": 50,

	// Specifies how absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.defaultDateFormat": null,

	// Specifies the locale, a [BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag#List_of_major_primary_language_subtags), to use for date formatting, defaults to the VS Code locale. Use `system` to follow the current system locale, or choose a specific locale, e.g `en-US` — US English, `en-GB` — British English, `de-DE` — German, `ja-JP` = Japanese, etc.
	"gitlens.defaultDateLocale": null,

	// Specifies how short absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.defaultDateShortFormat": null,

	// Specifies whether commit dates should use the authored or committed date
	//  - authored: Uses the date when the changes were authored (i.e. originally written)
	//  - committed: Uses the date when the changes were committed
	"gitlens.defaultDateSource": "authored",

	// Specifies how dates will be displayed by default
	//  - relative: e.g. 1 day ago
	//  - absolute: e.g. July 25th, 2018 7:18pm
	"gitlens.defaultDateStyle": "relative",

	// Specifies how times will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.defaultTimeFormat": null,

	// Specifies how branches are sorted in quick pick menus and views
	//  - date:desc: Sorts branches by the most recent commit date in descending order
	//  - date:asc: Sorts branches by the most recent commit date in ascending order
	//  - name:asc: Sorts branches by name in ascending order
	//  - name:desc: Sorts branches by name in descending order
	"gitlens.sortBranchesBy": "date:desc",

	// Specifies how contributors are sorted in quick pick menus and views
	//  - count:desc: Sorts contributors by commit count in descending order
	//  - count:asc: Sorts contributors by commit count in ascending order
	//  - date:desc: Sorts contributors by the most recent commit date in descending order
	//  - date:asc: Sorts contributors by the most recent commit date in ascending order
	//  - name:asc: Sorts contributors by name in ascending order
	//  - name:desc: Sorts contributors by name in descending order
	"gitlens.sortContributorsBy": "count:desc",

	// Specifies how repositories are sorted in quick pick menus and views
	//  - discovered: Sorts repositories by discovery or workspace order
	//  - lastFetched:desc: Sorts repositories by last fetched date in descending order
	//  - lastFetched:asc: Sorts repositories by last fetched date in ascending order
	//  - name:asc: Sorts repositories by name in ascending order
	//  - name:desc: Sorts repositories by name in descending order
	"gitlens.sortRepositoriesBy": "discovered",

	// Specifies how tags are sorted in quick pick menus and views
	//  - date:desc: Sorts tags by date in descending order
	//  - date:asc: Sorts tags by date in ascending order
	//  - name:asc: Sorts tags by name in ascending order
	//  - name:desc: Sorts tags by name in descending order
	"gitlens.sortTagsBy": "date:desc",

	// Specifies which commands will be added to which menus
	"gitlens.menus": {
		"editor": {
			"blame": true,
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"editorGroup": {
			"blame": true,
			"compare": true
		},
		"editorGutter": {
			"compare": true,
			"remote": true,
			"share": true
		},
		"editorTab": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"explorer": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"ghpr": {
			"worktree": true
		},
		"scm": {
			"graph": true,
			"visualHistory": true
		},
		"scmRepositoryInline": {
			"generateCommitMessage": true,
			"graph": true,
			"stash": true
		},
		"scmRepository": {
			"authors": true,
			"generateCommitMessage": true,
			"graph": true,
			"patch": true,
			"visualHistory": true
		},
		"scmGroupInline": {
			"stash": true
		},
		"scmGroup": {
			"compare": true,
			"openClose": true,
			"patch": true,
			"stash": true
		},
		"scmItemInline": {
			"stash": false
		},
		"scmItem": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"patch": true,
			"remote": true,
			"share": true,
			"stash": true
		}
	},

	// Specifies the keymap to use for GitLens shortcut keys
	//  - alternate: Adds an alternate set of shortcut keys that start with `Alt` (⌥ on macOS)
	//  - chorded: Adds a chorded set of shortcut keys that start with `Ctrl+Shift+G` (`⌥⌘G` on macOS)
	//  - none: No shortcut keys will be added
	"gitlens.keymap": "chorded",

	// Specifies the active GitLens mode, if any
	"gitlens.mode.active": "",

	// Specifies the active GitLens mode alignment in the status bar
	//  - left: Aligns to the left
	//  - right: Aligns to the right
	"gitlens.mode.statusBar.alignment": "right",

	// Specifies whether to provide the active GitLens mode in the status bar
	"gitlens.mode.statusBar.enabled": true,

	// Specifies the user-defined GitLens modes
	"gitlens.modes": {
		"zen": {
			"name": "Zen",
			"statusBarItemName": "Zen",
			"description": "for a zen-like experience, disables many visual features",
			"codeLens": false,
			"currentLine": false,
			"hovers": false,
			"statusBar": false
		},
		"review": {
			"name": "Review",
			"statusBarItemName": "Reviewing",
			"description": "for reviewing code, enables many visual features",
			"codeLens": true,
			"currentLine": true,
			"hovers": true
		}
	},

	// Specifies the ID of the user's active GitKraken organization in GitLens
	"gitlens.gitkraken.activeOrganizationId": "",

	// Specifies the length of abbreviated commit SHAs
	"gitlens.advanced.abbreviatedShaLength": 7,

	// Specifies whether to copy full or abbreviated commit SHAs to the clipboard. Abbreviates to the length of `gitlens.advanced.abbreviatedShaLength`.
	"gitlens.advanced.abbreviateShaOnCopy": false,

	// Specifies additional arguments to pass to the `git blame` command
	"gitlens.advanced.blame.customArguments": null,

	// Specifies whether git output will be cached — changing the default is not recommended
	"gitlens.advanced.caching.enabled": true,

	// Specifies whether to cache (per-workspace) the path to the Git executable to use for GitLens
	"gitlens.advanced.caching.gitPath": true,

	// Specifies the order by which commits will be shown. If unspecified, commits will be shown in reverse chronological order
	//  - null: Shows commits in reverse chronological order
	//  - date: Shows commits in reverse chronological order of the commit timestamp
	//  - author-date: Shows commits in reverse chronological order of the author timestamp
	//  - topo: Shows commits in reverse chronological order of the commit timestamp, but avoids intermixing multiple lines of history
	"gitlens.advanced.commitOrdering": null,

	// Specifies whether to delay loading commit file details until required. This can improve performance when opening repositories with large histories, but causes more incremental Git calls
	"gitlens.advanced.commits.delayLoadingFileDetails": false,

	// Specifies an optional external diff tool to use when comparing files. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
	"gitlens.advanced.externalDiffTool": null,

	// Specifies an optional external diff tool to use when comparing directories. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
	"gitlens.advanced.externalDirectoryDiffTool": null,

	// Specifies the maximum number of items to show in a list. Use 0 to specify no maximum
	"gitlens.advanced.maxListItems": 200,

	// Specifies the maximum number of items to show in a search. Use 0 to specify no maximum
	"gitlens.advanced.maxSearchItems": 200,

	// Specifies which messages should be suppressed
	"gitlens.advanced.messages": {
		"suppressBitbucketPRCommitLinksAppNotInstalledWarning": false,
		"suppressCommitHasNoPreviousCommitWarning": false,
		"suppressCommitNotFoundWarning": false,
		"suppressCreatePullRequestPrompt": false,
		"suppressDebugLoggingWarning": false,
		"suppressFileNotUnderSourceControlWarning": false,
		"suppressGitDisabledWarning": false,
		"suppressGitMissingWarning": false,
		"suppressGitVersionWarning": false,
		"suppressLineUncommittedWarning": false,
		"suppressNoRepositoryWarning": false,
		"suppressRebaseSwitchToTextWarning": false,
		"suppressIntegrationDisconnectedTooManyFailedRequestsWarning": false,
		"suppressIntegrationRequestFailed500Warning": false,
		"suppressIntegrationRequestTimedOutWarning": false,
		"suppressBlameInvalidIgnoreRevsFileWarning": false,
		"suppressBlameInvalidIgnoreRevsFileBadRevisionWarning": false
	},

	// Specifies whether to dismiss quick pick menus when focus is lost (if not, press `ESC` to dismiss)
	"gitlens.advanced.quickPick.closeOnFocusOut": true,

	// Specifies how many folders deep to search for repositories. Defaults to `git.repositoryScanMaxDepth`
	"gitlens.advanced.repositorySearchDepth": null,

	// Specifies the amount (percent) of similarity a deleted and added file pair must have to be considered a rename
	"gitlens.advanced.similarityThreshold": null,

	// Specifies whether to ignore whitespace when comparing revisions during blame operations
	"gitlens.blame.ignoreWhitespace": false,

	// Specifies debug mode
	"gitlens.debug": false,

	// Specifies whether to override the default deep link scheme (vscode://) with the environment value or a specified value
	"gitlens.deepLinks.schemeOverride": false,

	// Specifies whether to attempt to detect nested repositories when opening files
	"gitlens.detectNestedRepositories": false,

	// Specifies whether to allow GitLens to send product usage telemetry.
	// 
	// _**Note:** For GitLens to send any telemetry BOTH this setting and VS Code telemetry must be enabled. If either one is disabled no telemetry will be sent._
	"gitlens.telemetry.enabled": true,

	// ansible, azure-pipelines, css, dockerfile, dockercompose, html, json, jsonc, less, postcss, scss, stylus, vue, yaml에 대해 재정의할 설정을 구성합니다.
	"[ansible][azure-pipelines][css][dockerfile][dockercompose][html][json][jsonc][less][postcss][scss][stylus][vue][yaml]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// chatmode에 대해 재정의할 설정을 구성합니다.
	"[chatmode]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false,
		"diffEditor.ignoreTrimWhitespace": false,
		"editor.wordWrap": "on",
		"editor.quickSuggestions": {
				"comments": "off",
				"strings": "off",
				"other": "off"
		}
	},

	// clojure에 대해 재정의할 설정을 구성합니다.
	"[clojure]":  {
		"diffEditor.ignoreTrimWhitespace": false
	},

	// coffeescript에 대해 재정의할 설정을 구성합니다.
	"[coffeescript]":  {
		"diffEditor.ignoreTrimWhitespace": false,
		"editor.defaultColorDecorators": "never"
	},

	// csharp에 대해 재정의할 설정을 구성합니다.
	"[csharp]":  {
		"editor.maxTokenizationLineLength": 2500
	},

	// css에 대해 재정의할 설정을 구성합니다.
	"[css]":  {
		"editor.suggest.insertMode": "replace"
	},

	// dart에 대해 재정의할 설정을 구성합니다.
	"[dart]":  {
		"editor.tabSize": 2,
		"editor.insertSpaces": true,
		"editor.detectIndentation": false,
		"editor.suggest.insertMode": "replace",
		"editor.defaultFormatter": "Dart-Code.dart-code",
		"editor.inlayHints.enabled": "offUnlessPressed"
	},

	// dockercompose에 대해 재정의할 설정을 구성합니다.
	"[dockercompose]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced",
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		}
	},

	// dockerfile에 대해 재정의할 설정을 구성합니다.
	"[dockerfile]":  {
		"editor.quickSuggestions": {
				"strings": true
		}
	},

	// dtd에 대해 재정의할 설정을 구성합니다.
	"[dtd]":  {
		"editor.autoClosingBrackets": "never",
		"files.trimFinalNewlines": true
	},

	// fsharp에 대해 재정의할 설정을 구성합니다.
	"[fsharp]":  {
		"diffEditor.ignoreTrimWhitespace": false
	},

	// git-commit에 대해 재정의할 설정을 구성합니다.
	"[git-commit]":  {
		"editor.rulers": [
				50,
				72
		],
		"editor.wordWrap": "off",
		"workbench.editor.restoreViewState": false
	},

	// git-rebase에 대해 재정의할 설정을 구성합니다.
	"[git-rebase]":  {
		"workbench.editor.restoreViewState": false
	},

	// go에 대해 재정의할 설정을 구성합니다.
	"[go]":  {
		"editor.insertSpaces": false
	},

	// handlebars에 대해 재정의할 설정을 구성합니다.
	"[handlebars]":  {
		"editor.suggest.insertMode": "replace"
	},

	// html에 대해 재정의할 설정을 구성합니다.
	"[html]":  {
		"editor.suggest.insertMode": "replace"
	},

	// http에 대해 재정의할 설정을 구성합니다.
	"[http]":  {
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		}
	},

	// instructions에 대해 재정의할 설정을 구성합니다.
	"[instructions]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false,
		"diffEditor.ignoreTrimWhitespace": false,
		"editor.wordWrap": "on",
		"editor.quickSuggestions": {
				"comments": "off",
				"strings": "off",
				"other": "off"
		}
	},

	// jade에 대해 재정의할 설정을 구성합니다.
	"[jade]":  {
		"diffEditor.ignoreTrimWhitespace": false
	},

	// java에 대해 재정의할 설정을 구성합니다.
	"[java]":  {
		"editor.suggest.snippetsPreventQuickSuggestions": false
	},

	// javascript에 대해 재정의할 설정을 구성합니다.
	"[javascript]":  {
		"editor.maxTokenizationLineLength": 2500
	},

	// json에 대해 재정의할 설정을 구성합니다.
	"[json]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},

	// jsonc에 대해 재정의할 설정을 구성합니다.
	"[jsonc]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},

	// julia에 대해 재정의할 설정을 구성합니다.
	"[julia]":  {
		"editor.defaultColorDecorators": "never"
	},

	// less에 대해 재정의할 설정을 구성합니다.
	"[less]":  {
		"editor.suggest.insertMode": "replace"
	},

	// makefile에 대해 재정의할 설정을 구성합니다.
	"[makefile]":  {
		"editor.insertSpaces": false
	},

	// markdown에 대해 재정의할 설정을 구성합니다.
	"[markdown]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false,
		"diffEditor.ignoreTrimWhitespace": false,
		"editor.wordWrap": "on",
		"editor.quickSuggestions": {
				"comments": "off",
				"strings": "off",
				"other": "off"
		}
	},

	// plaintext에 대해 재정의할 설정을 구성합니다.
	"[plaintext]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false
	},

	// prompt에 대해 재정의할 설정을 구성합니다.
	"[prompt]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false,
		"diffEditor.ignoreTrimWhitespace": false,
		"editor.wordWrap": "on",
		"editor.quickSuggestions": {
				"comments": "off",
				"strings": "off",
				"other": "off"
		}
	},

	// python에 대해 재정의할 설정을 구성합니다.
	"[python]":  {
		"diffEditor.ignoreTrimWhitespace": false,
		"editor.defaultColorDecorators": "never",
		"gitlens.codeLens.symbolScopes": [
				"!Module"
		],
		"editor.formatOnType": true,
		"editor.wordBasedSuggestions": "off"
	},

	// ruby에 대해 재정의할 설정을 구성합니다.
	"[ruby]":  {
		"editor.defaultColorDecorators": "never"
	},

	// scss에 대해 재정의할 설정을 구성합니다.
	"[scss]":  {
		"editor.suggest.insertMode": "replace"
	},

	// search-result에 대해 재정의할 설정을 구성합니다.
	"[search-result]":  {
		"editor.lineNumbers": "off"
	},

	// shellscript에 대해 재정의할 설정을 구성합니다.
	"[shellscript]":  {
		"files.eol": "\n",
		"editor.defaultColorDecorators": "never"
	},

	// snippets에 대해 재정의할 설정을 구성합니다.
	"[snippets]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},

	// svg에 대해 재정의할 설정을 구성합니다.
	"[svg]":  {
		"editor.autoClosingBrackets": "never",
		"files.trimFinalNewlines": true
	},

	// xml에 대해 재정의할 설정을 구성합니다.
	"[xml]":  {
		"editor.autoClosingBrackets": "never",
		"files.trimFinalNewlines": true
	},

	// xsl에 대해 재정의할 설정을 구성합니다.
	"[xsl]":  {
		"editor.autoClosingBrackets": "never",
		"files.trimFinalNewlines": true
	},

	// yaml에 대해 재정의할 설정을 구성합니다.
	"[yaml]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced",
		"diffEditor.ignoreTrimWhitespace": false,
		"editor.defaultColorDecorators": "never",
		"editor.quickSuggestions": {
				"strings": "on"
		}
	},

	// 채팅에 에이전트 모드를 사용하도록 설정합니다. 이 기능을 사용하도록 설정하면 보기의 드롭다운을 통해 에이전트 모드를 활성화할 수 있습니다.
	"chat.agent.enabled": true,

	// 에이전트 모드에서 제출 당 허용되는 최대 요청 수입니다. 제한에 도달하면 계속하려면 확인하라는 메시지가 표시됩니다.
	"chat.agent.maxRequests": 25,

	// 사고의 렌더링 방식을 제어합니다.
	//  - collapsed: 생각하는 부분은 기본적으로 축소됩니다.
	//  - collapsedPreview: 생각하는 부분이 먼저 확장된 다음, 생각하지 않는 부분에 도달하면 축소됩니다.
	//  - expanded: 생각하는 부분은 기본적으로 확장됩니다.
	//  - none: 사고 과정 표시 안 함
	"chat.agent.thinkingStyle": "collapsed",

	// 에이전트 세션 메뉴를 표시할 위치를 제어합니다.
	"chat.agentSessionsViewLocation": "disabled",

	// 채팅에서 검사점을 사용하도록 설정합니다. 검사점을 사용하면 채팅을 이전 상태로 복원할 수 있습니다.
	"chat.checkpoints.enabled": true,

	// 채팅 검사점 파일 변경 내용을 표시할지 여부를 제어합니다.
	"chat.checkpoints.showFileChanges": false,

	// 명령 센터에서 채팅 제어 작업 메뉴를 표시할지 여부를 제어합니다(`window.commandCenter` 필요).
	"chat.commandCenter.enabled": true,

	// 패널 채팅에서 채팅 참가자 자동 감지를 사용합니다.
	"chat.detectParticipant.enabled": true,

	// GitHub Copilot이 제공하는 채팅, 코드 완성 및 다음 편집 제안을 포함한 기본 제공 AI 기능을 사용하지 않도록 설정하고 숨깁니다.
	"chat.disableAIFeatures": false,

	// 채팅에서 변경한 내용이 자동으로 수락되는 지연입니다. 값은 초 단위로, '0'은 사용 안 됨을 의미하고 '100'초는 최대값입니다.
	"chat.editing.autoAcceptDelay": 0,

	// 요청 및 관련 편집을 제거하기 전에 확인을 표시할지 여부입니다.
	"chat.editing.confirmEditRequestRemoval": true,

	// 요청 및 관련 편집을 다시 시도하기 전에 확인을 표시할지 여부입니다.
	"chat.editing.confirmEditRequestRetry": true,

	// 채팅 코드 블록에서 글꼴 모음을 제어합니다.
	"chat.editor.fontFamily": "default",

	// 채팅 코드 블록의 글꼴 크기를 픽셀 단위로 제어합니다.
	"chat.editor.fontSize": 14,

	// 채팅 코드 블록의 글꼴 두께를 제어합니다.
	"chat.editor.fontWeight": "default",

	// 채팅 코드 블록의 줄 높이를 픽셀 단위로 제어합니다. 0을 사용하여 글꼴 크기에서 선 높이를 계산합니다.
	"chat.editor.lineHeight": 0,

	// 라인이 채팅 코드 블록에서 래핑되어야 하는지 여부를 제어합니다.
	"chat.editor.wordWrap": "off",

	// 채팅에서 요청을 편집할 수 있습니다. 이를 통해 요청 내용을 변경하고 모델에 다시 제출할 수 있습니다.
	"chat.editRequests": "inline",

	// 도구 호출을 기반으로 하는 새 편집 모드를 사용하도록 설정합니다. 이 기능을 사용하도록 설정하면 도구 호출을 지원하지 않는 모델은 편집 모드에서 사용할 수 없습니다.
	"chat.edits2.enabled": false,

	// 입력 자리 표시자 텍스트에 힌트가 있는 수정된 빈 채팅 상태를 표시합니다.
	"chat.emptyChatState.enabled": true,

	// 빈 채팅 상태에서 최근 채팅 기록을 표시합니다.
	"chat.emptyState.history.enabled": false,

	// 이 설정은 사용되지 않습니다. Please use `chat.detectParticipant.enabled` instead.
	// 패널 채팅에서 채팅 참가자 자동 감지를 사용합니다.
	"chat.experimental.detectParticipant.enabled": null,

	// 타사 확장에서 제공하는 도구를 사용하여 사용하도록 설정합니다.
	"chat.extensionTools.enabled": true,

	// 채팅 메시지의 글꼴 패밀리를 제어합니다.
	"chat.fontFamily": "default",

	// 채팅 메시지의 글꼴 크기를 픽셀 단위로 제어합니다.
	"chat.fontSize": 13,

	// 지정된 채팅 위치에 대해 활성 편집기를 채팅 컨텍스트로 자동으로 사용하도록 설정합니다.
	"chat.implicitContext.enabled": {
		"panel": "always"
	},

	// 새 암시적 컨텍스트 흐름이 표시되는지 여부를 제어합니다. 질문 및 편집 모드에서는 컨텍스트가 자동으로 포함됩니다. 에이전트 모드에서 컨텍스트는 첨부 파일로 제안됩니다. 선택 항목은 항상 컨텍스트로 포함됩니다.
	"chat.implicitContext.suggestedContext": true,

	// 채팅 세션에서 첨부할 수 있는 명령 파일('*.instructions.md')의 위치를 지정합니다. [자세히 알아보세요](https://aka.ms/vscode-ghcp-custom-instructions).
	// 
	// 상대 경로는 작업 영역의 루트 폴더에서 확인됩니다.
	"chat.instructionsFilesLocations": {
		".github/instructions": true
	},

	// KaTeX를 사용하여 채팅 응답에서 수학 렌더링을 사용하도록 설정합니다.
	"chat.math.enabled": true,

	// 모델 컨텍스트 프로토콜 서버에 대한 액세스를 제어합니다.
	//  - none: MCP 서버에 액세스할 수 없습니다.
	//  - registry: 레지스트리에서만 MCP 서버에 대한 액세스를 허용합니다.
	//  - all: 모든 MCP 서버에 대한 액세스를 허용합니다.
	"chat.mcp.access": "all",

	// AI 지원 MCP 서버 설치를 위해 NuGet 패키지를 사용하도록 설정합니다. .NET 패키지(NuGet.org)의 중앙 레지스트리에서 이름으로 MCP 서버를 설치하는 데 사용됩니다.
	"chat.mcp.assisted.nuget.enabled": false,

	// 채팅 메시지를 제출할 때 MCP 서버를 자동으로 시작할지 여부를 제어합니다.
	//  - never: MCP 서버를 자동으로 시작하지 마세요.
	//  - onlyNew: 실행된 적이 없는 새 MCP 서버만 자동으로 시작합니다.
	//  - newAndOutdated: 아직 실행되지 않은 만료된 새 MCP 서버를 자동으로 시작합니다.
	"chat.mcp.autostart": "never",

	// 다양한 다른 애플리케이션의 구성에서 모델 컨텍스트 프로토콜 서버의 검색을 구성합니다.
	"chat.mcp.discovery.enabled": {
		"claude-desktop": false,
		"windsurf": false,
		"cursor-global": false,
		"cursor-workspace": false
	},

	// 샘플링을 위해 MCP 서버에 노출할 모델을 구성합니다(백그라운드에서 모델 요청을 만들기). 이 설정은 'MCP: 서버 나열' 명령 하에 그래픽으로 편집할 수 있습니다.
	"chat.mcp.serverSampling": {},

	// 사용자 지정 채팅 모드 파일의 위치를 지정합니다('*.chatmode.md'). [자세히 알아보세요](https://aka.ms/vscode-ghcp-custom-chat-modes).
	// 
	// 상대 경로는 작업 영역의 루트 폴더에서 확인됩니다.
	"chat.modeFilesLocations": {
		".github/chatmodes": true
	},

	// 창에 포커스가 없는 동안 확인이 필요할 때 채팅 세션이 사용자에게 알려야 하는지 여부를 제어합니다. 여기에는 알림 배너뿐만 아니라 창 배지도 포함됩니다.
	"chat.notifyWindowOnConfirmation": true,

	// 채팅 세션에서 재사용 가능한 프롬프트('*.prompt.md') 및 명령 파일('*.instructions.md')을 사용하도록 설정합니다. [자세히 알아보세요](https://aka.ms/vscode-ghcp-prompt-snippets).
	"chat.promptFiles": true,

	// 채팅 세션에서 실행할 수 있는 재사용 가능한 프롬프트 파일('*.prompt.md')의 위치를 지정합니다. [자세히 알아보세요](https://aka.ms/vscode-ghcp-prompt-snippets).
	// 
	// 상대 경로는 작업 영역의 루트 폴더에서 확인됩니다.
	"chat.promptFilesLocations": {
		".github/prompts": true
	},

	// 채팅 시작 보기에서 추천할 프롬프트 파일을 구성합니다. 각 키는 프롬프트 파일 이름이며 항상 추천하려면 값이 'true'이고, 추천하지 않으려면 'false' 또는 `resourceLangId == markdown`와(과) 같은 [when 절](https://aka.ms/vscode-when-clause) 표현식일 수 있습니다.
	"chat.promptFilesRecommendations": {},

	// 채팅 입력에서 관련 파일을 렌더링할지 여부를 제어합니다.
	"chat.renderRelatedFiles": false,

	// 선택한 요소의 CSS를 채팅에 추가할지 여부를 제어합니다. `chat.sendElementsToChat.enabled`을(를) 사용하도록 설정해야 합니다.
	"chat.sendElementsToChat.attachCSS": true,

	// 선택한 요소의 스크린샷을 채팅에 추가할지 여부를 제어합니다. `chat.sendElementsToChat.enabled`을(를) 사용하도록 설정해야 합니다.
	"chat.sendElementsToChat.attachImages": true,

	// 단순 브라우저에서 요소를 채팅으로 보낼 수 있는지 여부를 제어합니다.
	"chat.sendElementsToChat.enabled": true,

	// 로그인 대화 상자의 변형을 제어합니다.
	"chat.setup.signInDialogVariant": "default",

	// 채팅 세션 보기의 두 번째 행에 세션 설명을 표시할지 여부를 제어합니다.
	"chat.showAgentSessionsViewDescription": true,

	// 채팅에서 할 일 목록을 활성화하여 에이전트가 복잡한 개발 작업 흐름을 위한 계획, 진행 추적 및 상황 관리 도구로 사용할 수 있도록 합니다.
	"chat.todoListTool.enabled": false,

	// 사용하도록 설정하면 todo 도구가 쓰기 전용 모드로 작동하여 에이전트가 컨텍스트에서 할 일을 기억해야 합니다.
	"chat.todoListTool.writeOnly": false,

	// 채팅에서 편집한 내용을 자동으로 승인할지 여부를 제어합니다. 기본값은 '**/.vscode/*.json'와 같이 즉시 의도하지 않은 부작용을 일으킬 가능성이 있는 특정 파일에 대한 편집을 제외한 모든 편집 내용을 승인하는 것입니다.
	// 
	// 파일은 지정된 순서에 따라 GLOB 패턴과 일치합니다.
	"chat.tools.edits.autoApprove": {
		"**/*": true,
		"**/.vscode/*.json": false,
		"**/.git/**": false,
		"**/{package.json,package-lock.json,server.xml,build.rs,web.config,.gitattributes,.env}": false,
		"**/*.{csproj,fsproj,vbproj}": false
	},

	// "YOLO 모드"라고도 하는 전역 자동 승인은 모든 작업 영역의 모든 도구에 대해 수동 승인을 완전히 사용하지 않도록 설정하여 에이전트가 완전히 자율적으로 작동할 수 있도록 합니다. 이는 매우 위험하며 *절대* 권장되지 않습니다. [Codespaces](https://github.com/features/codespaces) 및 [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers)와 같은 컨테이너화된 환경에서도 손상될 수 있는 사용자 키가 컨테이너에 전달됩니다.
	// 
	// **이 기능은 [중요한 보안 보호](https://code.visualstudio.com/docs/copilot/security)를 사용하지 않도록 설정하고 공격자가 컴퓨터를 훨씬 쉽게 손상시킬 수 있도록 합니다.**
	"chat.tools.global.autoApprove": false,

	// 실행 취소 요청이 있을 때 채팅 입력을 복원할지 여부를 제어합니다. 복원된 요청의 텍스트로 입력이 채워집니다.
	"chat.undoRequests.restoreInput": true,

	// 작업 영역 루트에 있는 `AGENTS.MD` 파일의 지침을 모든 채팅 요청에 추가할지 여부를 제어합니다.
	"chat.useAgentsMdFile": true,

	// '코딩 에이전트에 위임' 버튼이 새 채팅 세션 API를 사용할지 여부를 제어합니다.
	"chat.useChatSessionsForCloudButton": false,

	// 저장소 서비스 대신 디스크에 채팅 세션을 저장할 수 있습니다. 이 기능을 사용하면 기존 세션이 작업 영역당 한 번 새 형식으로 마이그레이션됩니다.
	"chat.useFileStorage": true,

	// 
	//  - legacy: 레거시 비교 알고리즘을 사용합니다.
	//  - advanced: 고급 비교 알고리즘을 사용합니다.
	"mergeEditor.diffAlgorithm": "advanced",

	// Controls if deletions in base or one of the inputs should be indicated by a vertical bar.
	"mergeEditor.showDeletionMarkers": true,

	// Enable experimental multi diff editor.
	"multiDiffEditor.experimental.enabled": true,

	// 사용하도록 설정하면 새 실행 중인 프로세스가 감지되고 수신하는 포트가 자동으로 전달됩니다. 이 설정을 사용하지 않도록 설정해도 모든 포트가 전달되는 것을 방지할 수 없습니다. 사용하지 않도록 설정하더라도 확장은 여전히 포트를 전달하도록 할 수 있으며 일부 URL을 열면 포트가 계속 전달됩니다. 또한 다음 참조: `remote.autoForwardPortsSource`
	"remote.autoForwardPorts": true,

	// 포트를 자동으로 전달할 때 'process'에서 'hybrid'로의 전환을 트리거하는 자동 전달 포트의 수와 'remote.autoForwardPortsSource'는 기본적으로 'process'로 설정됩니다. 대체를 사용하지 않도록 설정하려면 '0'으로 설정합니다. 'remote.autoForwardPortsFallback'이 구성되지 않았지만 'remote.autoForwardPortsSource'가 구성된 경우 'remote.autoForwardPortsFallback'은 '0'으로 설정된 것처럼 처리됩니다.
	"remote.autoForwardPortsFallback": 20,

	// `remote.autoForwardPorts#`(이)가 true이면 포트가 자동으로 전달되는 원본을 설정합니다. `#remote.autoForwardPorts#`이(가) false이면 `#remote.autoForwardPortsSource`은(는) 이미 전달된 포트에 대한 정보를 찾는 데 사용됩니다. Windows 및 macOS 원격에서 `process` 및 `hybrid` 옵션은 아무런 영향을 주지 않으며 `output`이 사용됩니다.
	//  - process: 포트는 시작되고 포트가 포함된 프로세스를 확인하여 검색되면 자동으로 전달됩니다.
	//  - output: 포트는 터미널 및 디버그 출력을 읽어 검색되면 자동으로 전달됩니다. 포트를 사용하는 프로세스 중 일부는 통합 터미널 또는 디버그 콘솔로 인쇄되지 않으므로 일부 포트가 누락됩니다. 출력을 기반으로 전달되는 포트는 포트 보기에서 사용자에 의해 다시 로드되거나 포트가 닫힐 때까지 "전달 취소"되지 않습니다.
	//  - hybrid: 터미널 및 디버그 출력을 읽어 검색되면 포트가 자동으로 전달됩니다. 포트를 사용하는 모든 프로세스가 통합 터미널 또는 디버그 콘솔에 인쇄되는 것은 아니므로 일부 포트가 누락됩니다. 포트는 해당 포트에서 수신 대기하는 프로세스가 종료될 때까지 기다려 "전달되지 않음" 상태가 됩니다.
	"remote.autoForwardPortsSource": "process",

	// 이미 로컬에 설치된 경우 원격에 연결할 때 설치할 확장 목록입니다.
	"remote.defaultExtensionsIfInstalledLocally": [
		"GitHub.copilot",
		"GitHub.copilot-chat",
		"GitHub.vscode-pull-request-github"
	],

	// 활성화된 확장이 로컬로 다운로드되고 원격으로 설치됩니다.
	"remote.downloadExtensionsLocally": false,

	// 확장 종류를 재정의합니다. 'ui' 확장은 로컬 머신에 설치되고 실행되며, 'workspace' 확장은 원격 머신에서 실행됩니다. 이 설정을 사용하여 확장의 기본 종류를 재정의함으로써 해당 확장이 로컬 머신에 설치되고 활성화되는지 원격 머신에 설치되고 활성화되는지 여부를 지정합니다.
	"remote.extensionKind": {
		"pub.name": [
			"ui"
		]
	},

	// 터미널 및 디버그 콘솔에서 열 때 포트가 있는 로컬 URL을 전달할지 여부를 제어합니다.
	"remote.forwardOnOpen": true,

	// 포트 전달에 사용할 로컬 호스트 이름을 지정합니다.
	"remote.localPortHost": "localhost",

	// 설정 `remote.portsAttributes`에서 속성을 가져오지 않는 모든 포트에 적용되는 기본 속성을 설정합니다. 예:
	// 
	// ```
	// {
	//   "onAutoForward": "ignore"
	// }
	// ```
	"remote.otherPortsAttributes": {},

	// 특정 포트 번호가 전달될 때 적용되는 속성을 설정합니다. 예:
	// 
	// ```
	// "3000": {
	//   "label": "Application"
	// },
	// "40000-55000": {
	//   "onAutoForward": "ignore"
	// },
	// ".+\\/server.js": {
	//  "onAutoForward": "openPreview"
	// }
	// ```
	"remote.portsAttributes": {
		"443": {
			"protocol": "https"
		},
		"8443": {
			"protocol": "https"
		}
	},

	// 작업 영역에서 전달한 포트를 복원합니다.
	"remote.restoreForwardedPorts": true,

	// 키를 누르면 접근성 보기를 닫고 호출된 요소에 포커스를 둡니다.
	"accessibility.accessibleView.closeOnKeyPress": true,

	// 디버그 조사식 보기에서 변수 변경 내용을 발표해야 하는지 여부를 제어합니다.
	"accessibility.debugWatchVariableAnnouncements": true,

	// 채팅 에이전트가 편집 내용을 적용했을 때 파일을 열어야 하는지 여부를 제어합니다.
	"accessibility.openChatEditedFiles": true,

	// 코드가 실행될 때 포커스를 REPL로 자동으로 보낼지 여부를 제어합니다.
	"accessibility.replEditor.autoFocusReplExecution": "input",

	// 네이티브 REPL에서 실행의 출력을 발표할지 여부를 제어합니다.
	"accessibility.replEditor.readLastExecutionOutput": true,

	// 위치 변경 내용을 디바운스할지 여부
	"accessibility.signalOptions.debouncePositionChanges": false,

	// 
	"accessibility.signalOptions.experimental.delays.errorAtPosition": {},

	// Delays for all signals besides error and warning at position
	"accessibility.signalOptions.experimental.delays.general": {},

	// 
	"accessibility.signalOptions.experimental.delays.warningAtPosition": {},

	// 소리의 볼륨(백분율)(0-100)입니다.
	"accessibility.signalOptions.volume": 70,

	// 채팅 편집 내용의 변경 내용이 포함된 파일을 공개할 때 소리/오디오 신호를 재생합니다.
	"accessibility.signals.chatEditModifiedFile": {
		"sound": "auto"
	},

	// 채팅 요청이 이루어지면 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.chatRequestSent": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 응답을 받으면 소리/오디오 신호를 재생합니다.
	"accessibility.signals.chatResponseReceived": {
		"sound": "auto"
	},

	// 채팅에서 사용자 작업이 필요할 때 신호음(오디오 신호) 및/또는 알림(경고)을 재생합니다.
	"accessibility.signals.chatUserActionRequired": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 기능이 화면에서 사라지면(예: 터미널, 디버그 콘솔 또는 출력 채널) 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.clear": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 코드 동작이 적용되었을 때 소리 신호를 재생합니다.
	"accessibility.signals.codeActionApplied": {
		"sound": "auto"
	},

	// 코드 동작이 트리거될 때 소리 신호를 재생합니다.
	"accessibility.signals.codeActionTriggered": {
		"sound": "auto"
	},

	// 접근성 Diff 뷰어 모드에서 삭제된 줄 또는 다음/이전 변경으로 포커스가 이동할 때 소리/오디오 신호를 재생합니다.
	"accessibility.signals.diffLineDeleted": {
		"sound": "auto"
	},

	// 접근성 Diff 뷰어 모드에서 삽입된 줄 또는 다음/이전 변경으로 포커스가 이동할 때 소리/오디오 신호를 재생합니다.
	"accessibility.signals.diffLineInserted": {
		"sound": "auto"
	},

	// 접근성 Diff 뷰어 모드에서 수정된 줄 또는 다음/이전 변경으로 포커스가 이동할 때 소리/오디오 신호를 재생합니다.
	"accessibility.signals.diffLineModified": {
		"sound": "auto"
	},

	// 편집이 유지될 때 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.editsKept": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 편집이 취소될 때 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.editsUndone": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 파일 또는 Notebook의 서식이 지정되면 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.format": {
		"sound": "never",
		"announcement": "never"
	},

	// 활성 줄에 중단점이 있는 경우 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.lineHasBreakpoint": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 활성 줄에 오류가 있는 경우 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.lineHasError": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 활성 줄에 펼칠 수 있는 접힌 영역이 있을 때 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.lineHasFoldedArea": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 활성 줄에 인라인 제안이 있을 때 소리/오디오 신호를 재생합니다.
	"accessibility.signals.lineHasInlineSuggestion": {
		"sound": "auto"
	},

	// 활성 줄에 경고가 있는 경우 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.lineHasWarning": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 다음 편집 제안이 있을 때 소리/오디오 신호 및/또는 알림(경고)을 재생합니다.
	"accessibility.signals.nextEditSuggestion": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 인레이 힌트가 없는 인레이 힌트가 있는 줄을 읽으려고 할 때 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.noInlayHints": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Notebook 셀 실행이 성공적으로 완료되면 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.notebookCellCompleted": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Notebook 셀 실행이 실패하면 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.notebookCellFailed": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 디버거가 중단점에서 중지된 경우 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.onDebugBreak": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 활성 줄에 경고가 있는 경우 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.positionHasError": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 활성 줄에 경고가 있는 경우 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.positionHasWarning": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 진행되고 있는 중에 루프에서 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.progress": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 파일이 저장되면 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.save": {
		"sound": "never",
		"announcement": "never"
	},

	// 작업이 완료되면 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.taskCompleted": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 작업이 실패할 때 (0이 아닌 종료 코드) 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.taskFailed": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 터미널 벨이 울릴 때 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.terminalBell": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 터미널 명령이 실패하거나(0이 아닌 종료 코드) 접근성 보기에서 해당 종료 ​​코드가 있는 명령이 탐색될 때 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.terminalCommandFailed": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 터미널 명령이 성공하거나(종료 코드 0) 접근성 보기에서 해당 종료 ​​코드가 있는 명령이 탐색될 때 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.terminalCommandSucceeded": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 터미널 빠른 수정을 사용할 수 있을 때 소리(오디오 신호) 및 알림과 같은 신호를 재생합니다.
	"accessibility.signals.terminalQuickFix": {
		"sound": "auto",
		"announcement": "auto"
	},

	// 음성 녹음이 시작되면 소리/오디오 신호를 재생합니다.
	"accessibility.signals.voiceRecordingStarted": {
		"sound": "on"
	},

	// 음성 녹음이 중지되면 소리/오디오 신호를 재생합니다.
	"accessibility.signals.voiceRecordingStopped": {
		"sound": "auto"
	},

	// 워크벤치에서 링크에 밑줄을 표시할지 여부를 제어합니다.
	"accessibility.underlineLinks": false,

	// 주석 위젯 또는 주석이 포함된 파일에서 수행할 수 있는 작업에 대한 정보를 제공합니다.
	"accessibility.verbosity.comments": true,

	// 디버그 콘솔 또는 실행 및 디버그 뷰렛에 포커스가 있을 때 디버그 콘솔 접근성 도움말 대화 상자에 액세스하는 방법에 대한 정보를 제공합니다. 이 작업을 적용하려면 창을 다시 로드해야 합니다.
	"accessibility.verbosity.debug": true,

	// 포커스 상태일 때 diff 편집기에서 변경 내용을 탐색하는 방법에 대한 정보를 제공합니다.
	"accessibility.verbosity.diffEditor": true,

	// diff 편집기가 활성 편집기가 되는 시기를 나타냅니다.
	"accessibility.verbosity.diffEditorActive": true,

	// 빈 텍스트 편집기에서 관련 작업에 대한 정보를 제공합니다.
	"accessibility.verbosity.emptyEditorHint": true,

	// 접근성 보기에서 호버를 여는 방법에 대한 정보를 제공합니다.
	"accessibility.verbosity.hover": true,

	// 인라인 편집기 채팅 접근성 도움말 메뉴에 액세스하는 방법에 관한 정보를 제공하고, 입력에 포커스할 경우 기능을 사용하는 방법을 설명하는 힌트를 제공합니다.
	"accessibility.verbosity.inlineChat": true,

	// 인라인 완성 가리키기 및 액세스 가능 보기에 액세스하는 방법에 대한 정보를 제공합니다.
	"accessibility.verbosity.inlineCompletions": true,

	// 행에 포커스가 있을 때 키 바인딩 편집기에서 키 바인딩을 변경하는 방법에 대한 정보를 제공합니다.
	"accessibility.verbosity.keybindingsEditor": true,

	// Notebook 셀에 포커스가 있을 때 셀 컨테이너 또는 내부 편집기에 포커스를 두는 방법에 대한 정보를 제공합니다.
	"accessibility.verbosity.notebook": true,

	// 접근성 보기에서 알림을 여는 방법에 대한 정보를 제공합니다.
	"accessibility.verbosity.notification": true,

	// 채팅 입력에 포커스가 있을 때 채팅 도움말 메뉴에 액세스하는 방법에 대한 정보를 제공합니다.
	"accessibility.verbosity.panelChat": true,

	// REPL 편집기에 포커스가 있을 때 REPL 편집기 접근성 도움말 메뉴에 액세스하는 방법에 대한 정보를 제공합니다.
	"accessibility.verbosity.replEditor": true,

	// 입력에 초점이 맞춰져 있을 때 소스 컨트롤 접근성 도움말 메뉴에 액세스하는 방법에 대한 정보를 제공합니다.
	"accessibility.verbosity.sourceControl": true,

	// 터미널이 포커스 상태일 때 터미널 접근성 도움말 메뉴에 액세스하는 방법에 대한 정보를 제공합니다.
	"accessibility.verbosity.terminal": true,

	// 접근 가능한 보기에서 연습을 여는 방법에 대한 정보를 제공합니다.
	"accessibility.verbosity.walkthrough": true,

	// 화면 읽기 프로그램 모드에서 `window.title`(을)를 화면 읽기 프로그램에 최적화해야 하는지 여부를 제어합니다. 사용하도록 설정하면 창 제목의 끝에 `activeEditorState`이(가) 추가됩니다.
	"accessibility.windowTitleOptimized": true,

	// 네이티브 대화 상자, 메뉴 및 제목 표시줄과 같은 네이티브 UI 요소의 색 모드를 설정합니다. OS가 밝은 색 모드로 구성된 경우에도 창에 어두운 시스템 색 테마를 사용하도록 선택할 수 있습니다. `workbench.colorTheme` 설정에 따라 자동으로 조정되도록 구성할 수도 있습니다.
	// 
	// 참고: `window.autoDetectColorScheme`이(가) 활성화된 경우 이 설정은 무시됩니다.
	//  - default: 네이티브 위젯 색은 시스템 색과 일치합니다.
	//  - auto: 밝은 색 테마에는 밝은 네이티브 위젯 색을 사용하고 어두운 색 테마에는 어두운 색을 사용합니다.
	//  - light: 밝은 네이티브 위젯 색을 사용합니다.
	//  - dark: 어두운 네이티브 위젯 색을 사용합니다.
	"window.systemColorTheme": "default",

	// 원격 터널 액세스가 등록되는 이름입니다. 설정하지 않으면 호스트 이름이 사용됩니다.
	"remote.tunnels.access.hostNameOverride": "",

	// 원격 터널 액세스가 켜져 있을 때 이 컴퓨터가 절전 모드로 전환되지 않도록 합니다.
	"remote.tunnels.access.preventSleep": false,

	// Emmet 약어는 확장하면 안 되는 언어의 배열입니다.
	"emmet.excludeLanguages": [
		"markdown"
	],

	// 각 경로에 Emmet 구문Profiles 및/또는 코드 조각 파일이 포함될 수 있는 경로 배열입니다.
	// 충돌하는 경우 이후 경로의 프로필/코드 조각이 이전 경로의 프로필/코드 조각을 재정의합니다.
	// 자세한 내용과 예제 코드 조각 파일은 https://code.visualstudio.com/docs/editor/emmet을 참조하세요.
	"emmet.extensionsPath": [],

	// 기본적으로 지원되지 않는 언어에서 Emmet 약어를 사용하도록 설정합니다. 언어와 Emmet 지원 언어 간에 매핑을 여기에 추가합니다.
	// 예: '{"vue-html": "html", "javascript": "javascriptreact"}'
	"emmet.includeLanguages": {},

	// 'false'로 설정할 경우 전체 파일이 구문 분석되어 현재 위치가 Emmet 약어 확장에 유효한지 확인합니다. 'true'로 설정할 경우 CSS/SCSS/Less 파일에서 현재 위치 주변의 콘텐츠만 구문 분석합니다.
	"emmet.optimizeStylesheetParsing": true,

	// Emmet의 일부 작업 및 해결 프로그램의 동작을 수정하는 데 사용되는 기본 설정입니다.
	"emmet.preferences": {},

	// 가능한 Emmet 약어를 제안으로 표시합니다. 스타일시트에는 적용되지 않고 emmet.showExpandedAbbreviation이 "never"로 설정되어 있을 때도 적용되지 않습니다.
	"emmet.showAbbreviationSuggestions": true,

	// 확장된 Emmet 약어를 제안 사항으로 표시합니다.
	// `"inMarkupAndStylesheetFilesOnly"` 옵션은 html, haml, jade, slim, xml, xsl, css, scss, sass, less 및 stylus에 적용됩니다.
	// `"always"` 옵션은 태그/css에 관계없이 파일의 모든 부분에 적용됩니다.
	"emmet.showExpandedAbbreviation": "always",

	// 'True'이면 Emmet 제안이 코드 조각으로 표시되며 `editor.snippetSuggestions` 설정에 따라 코드 조각을 정렬할 수 있습니다.
	"emmet.showSuggestionsAsSnippets": false,

	// 지정된 구문에 대한 프로필을 정의하거나 특정 규칙이 포함된 고유한 프로필을 사용하세요.
	"emmet.syntaxProfiles": {},

	// 사용하도록 설정하면 완성된 내용이 표시되지 않는 경우에도 Tab 키를 누르면 Emmet 약어가 확장됩니다. 사용하지 않도록 설정하더라도 완성된 내용이 표시되는 경우에 Tab 키를 눌러 확장할 수 있습니다.
	"emmet.triggerExpansionOnTab": false,

	// 'true'인 경우 Emmet은 인라인 완성을 사용하여 확장을 제안합니다. 이 설정이 'true'인 동안 인라인이 아닌 완료 항목 공급자가 자주 표시되지 않도록 하려면 '다른' 항목에 대해 '#editor.quickSuggestions#'를 'inline' 또는 'off'로 전환합니다.
	"emmet.useInlineCompletions": false,

	// emmet 조각에 사용되는 변수입니다.
	"emmet.variables": {},

	// 강제 푸시(임대 사용 또는 사용 안 함)가 가능한지 여부를 제어합니다.
	"git.allowForcePush": false,

	// pre-commit 및 commit-msg 후크를 실행하지 않는 커밋이 허용되는지를 제어합니다.
	"git.allowNoVerifyCommit": false,

	// 스테이징된 변경 내용 리소스 그룹을 항상 표시합니다.
	"git.alwaysShowStagedChangesResourceGroup": false,

	// 모든 커밋에 대한 확인 플래그를 제어합니다.
	"git.alwaysSignOff": false,

	// true로 설정하면 커밋이 현재 Git 리포지토리의 기본 원격에서 자동으로 페치됩니다. 'all'로 설정하면 모든 원격에서 페치됩니다.
	"git.autofetch": false,

	// #git.autofetch#가 사용되는 경우 각 자동 git fetch 사이의 시간(초)입니다.
	"git.autofetchPeriod": 180,

	// 자동 새로 고침을 사용할지 여부입니다.
	"git.autorefresh": true,

	// 리포지토리가 자동으로 감지되어야 하는 경우를 구성합니다.
	//  - true: 현재 열려 있는 폴더의 하위 폴더와 열려 있는 파일의 부모 폴더를 모두 검사합니다.
	//  - false: 자동 리포지토리 검사를 사용하지 않습니다.
	//  - subFolders: 현재 열려 있는 폴더의 하위 폴더를 검사합니다.
	//  - openEditors: 열려 있는 파일의 부모 폴더를 검사합니다.
	"git.autoRepositoryDetection": true,

	// 풀하기 전에 변경 내용을 스태시하고 풀하는 데 성공한 후 변경 내용을 복원합니다.
	"git.autoStash": false,

	// 편집기 장식을 사용하여 편집기에서 git 블레임 정보를 표시할지 여부를 제어합니다.
	"git.blame.editorDecoration.enabled": false,

	// 블레임 정보 편집기 장식의 템플릿입니다. 지원되는 변수:
	// 
	// * `hash`: 커밋 해시
	// 
	// * 'hashShort': '#git.commitShortHashLength#'에 따라 커밋 해시의 첫 번째 N 문자
	// 
	// * 'subject': 커밋 메시지의 첫 줄
	// 
	// * 'authorName': 작성자 이름
	// 
	// * 'authorEmail': 작성자 이메일
	// 
	// * 'authorDate': 작성자 날짜
	// 
	// * 'authorDateAgo': 현재 날짜와 작성자 날짜 간의 시간 차이
	// 
	// 
	"git.blame.editorDecoration.template": "${subject}, ${authorName} (${authorDateAgo})",

	// 상태 표시줄에 블레임 정보를 표시할지 여부를 제어합니다.
	"git.blame.statusBarItem.enabled": true,

	// 블레임 정보 상태 표시줄 항목에 대한 템플릿입니다. 지원되는 변수:
	// 
	// * `hash`: 커밋 해시
	// 
	// * 'hashShort': '#git.commitShortHashLength#'에 따라 커밋 해시의 첫 번째 N 문자
	// 
	// * 'subject': 커밋 메시지의 첫 줄
	// 
	// * 'authorName': 작성자 이름
	// 
	// * 'authorEmail': 작성자 이메일
	// 
	// * 'authorDate': 작성자 날짜
	// 
	// * 'authorDateAgo': 현재 날짜와 작성자 날짜 간의 시간 차이
	// 
	// 
	"git.blame.statusBarItem.template": "${authorName} (${authorDateAgo})",

	// 새 브랜치를 만들 때 사용되는 접두사입니다.
	"git.branchPrefix": "",

	// 보호된 브랜치 목록입니다. 기본적으로 변경 내용이 보호된 브랜치에 커밋되기 전에 프롬프트가 표시됩니다. 프롬프트는 '#git.branchProtectionPrompt#' 설정을 사용하여 제어할 수 있습니다.
	"git.branchProtection": [],

	// 변경 내용이 보호된 분기에 커밋되기 전에 프롬프트가 표시되는지 여부를 제어합니다.
	//  - alwaysCommit: 항상 보호된 브랜치에 변경 내용을 커밋합니다.
	//  - alwaysCommitToNewBranch: 변경 사항을 항상 새 브랜치에 커밋
	//  - alwaysPrompt: 변경 내용이 보호된 분기에 커밋되기 전에 항상 프롬프트를 표시합니다.
	"git.branchProtectionPrompt": "alwaysPrompt",

	// 무작위로 생성된 분기 이름에 사용되는 사전 목록입니다. 각 값은 분기 이름의 세그먼트를 생성하는 데 사용되는 사전을 나타냅니다. 지원되는 사전: '형용사', '동물', '색상', '숫자'.
	//  - adjectives: 무작위 형용사
	//  - animals: 임의의 동물 이름
	//  - colors: 임의의 색상 이름
	//  - numbers: 100에서 999 사이의 난수
	"git.branchRandomName.dictionary": [
		"adjectives",
		"animals"
	],

	// 새 브랜치를 만들 때 임의 이름이 생성되는지 여부를 제어합니다.
	"git.branchRandomName.enable": false,

	// 분기의 정렬 순서를 제어합니다.
	"git.branchSortOrder": "committerdate",

	// 새 분기 이름의 유효성을 검사하는 정규식입니다.
	"git.branchValidationRegex": "",

	// 새 브랜치 이름의 공백을 바꾸고 임의로 생성된 브랜치 이름의 세그먼트를 구분할 문자입니다.
	"git.branchWhitespaceChar": "-",

	// '다음으로 체크 아웃...'을 실행할 때 나열되는 Git 참조의 형식을 제어합니다.
	//  - local: 로컬 분기
	//  - tags: 태그
	//  - remote: 원격 분기
	"git.checkoutType": [
		"local",
		"remote",
		"tags"
	],

	// 변경 내용을 스태시, 커밋, 삭제, 스테이징 또는 스테이징 해제할 때 diff 편집기를 자동으로 닫을지 여부를 제어합니다.
	"git.closeDiffOnOperation": false,

	// `stdout`를 [git output](command:git.showOutput)에 기록하는 git 명령(예: 커밋, 푸시) 목록입니다. git 명령에 클라이언트 측 후크가 구성된 경우 클라이언트 측 후크의 `stdout`도 [git output](command:git.showOutput)에 기록됩니다.
	"git.commandsToLog": [],

	// 커밋 짧은 해시의 길이를 제어합니다.
	"git.commitShortHashLength": 7,

	// 'Git: Commit Empty' 명령에 대한 빈 항목 생성 커밋을 항상 확인합니다.
	"git.confirmEmptyCommits": true,

	// 강제 푸시하기 전에 확인을 요청할지 여부를 제어합니다.
	"git.confirmForcePush": true,

	// 확인하지 않고 커밋하기 전에 확인을 요청할지를 제어합니다.
	"git.confirmNoVerifyCommit": true,

	// Git 리포지토리를 동기화하기 전에 확인합니다.
	"git.confirmSync": true,

	// Git 개수 배지를 제어합니다.
	//  - all: 모든 변경 내용을 계산합니다.
	//  - tracked: 추적된 변경 내용만 계산합니다.
	//  - off: 카운터를 끕니다.
	"git.countBadge": "all",

	// Git에서 색과 배지를 탐색기와 열려 있는 편집기 뷰에 적용하는지 여부를 제어합니다.
	"git.decorations.enabled": true,

	// 새 Git 리포지토리를 초기화할 때 기본 분기(예: main, trunk, development)의 이름입니다. 빈 값으로 설정하면 Git에 구성된 기본 분기 이름이 사용됩니다. **참고:** Git 버전 `2.28.0` 이상이 필요합니다.
	"git.defaultBranchName": "main",

	// Git 리포지토리를 복제할 기본 위치입니다.
	"git.defaultCloneDirectory": null,

	// Git 하위 모듈을 자동으로 검색할지 여부를 제어합니다.
	"git.detectSubmodules": true,

	// Git submodules 검출 개수의 제한을 제어합니다.
	"git.detectSubmodulesLimit": 10,

	// Git 작업 트리를 자동으로 검색할지 여부를 제어합니다.
	"git.detectWorktrees": true,

	// 검색된 Git 작업 트리의 제한을 제어합니다.
	"git.detectWorktreesLimit": 10,

	// 커밋하기 전에 해결되지 않은 진단을 확인할지 여부를 제어합니다.
	"git.diagnosticsCommitHook.enabled": false,

	// 커밋하기 전에 고려할 원본 목록(**항목**) 및 최소 심각도(**값**)를 제어합니다. **참고:** 특정 원본의 진단을 무시하려면 원본을 목록에 추가하고 최소 심각도를 '없음'으로 설정합니다.
	"git.diagnosticsCommitHook.sources": {
		"*": "error"
	},

	// 추적되지 않은 변경 내용을 삭제할 때 파일을 영구적으로 삭제하는 대신 휴지통(Windows), 휴지통(macOS, Linux)으로 이동할지 여부를 제어합니다. **참고:** 이 설정은 원격에 연결되거나 Linux에서 스냅 패키지로 실행할 경우에는 영향을 주지 않습니다.
	"git.discardUntrackedChangesToTrash": true,

	// GPG, X.509 또는 SSH로 서명 커밋을 사용합니다.
	"git.enableCommitSigning": false,

	// Git을 사용하도록 설정했는지 여부입니다.
	"git.enabled": true,

	// 단계적 변경 사항이 없는 경우 모든 변경 사항을 저장합니다.
	"git.enableSmartCommit": false,

	// Git Sync 명령이 상태 표시줄에 표시되는지 여부를 제어합니다.
	"git.enableStatusBarSync": true,

	// 사용하도록 설정하면 풀할 때 모든 분기를 페치합니다. 그렇지 않으면 현재 분기만 페치합니다.
	"git.fetchOnPull": false,

	// 동기화 명령을 실행할 때 주석이 추가된 모든 태그를 푸시합니다.
	"git.followTagsWhenSync": false,

	// This setting is now deprecated, please use `github.gitAuthentication` instead.
	// 
	"git.githubAuthentication": null,

	// 무시할 Git 리포지토리의 목록입니다.
	"git.ignoredRepositories": [],

	// 레거시 Git 경고를 무시합니다.
	"git.ignoreLegacyWarning": false,

	// 리포지토리에 변경 내용이 너무 많으면 경고를 무시합니다.
	"git.ignoreLimitWarning": false,

	// Git이 없으면 경고를 무시합니다.
	"git.ignoreMissingGitWarning": false,

	// 풀할 때 분기가 다시 지정된 것 같은 경우 경고를 무시합니다.
	"git.ignoreRebaseWarning": false,

	// 파일 트리의 하위 모듈 수정 내용을 무시합니다.
	"git.ignoreSubmodules": false,

	// Windows에 Git 2.25~2.26이 설치되어 있는 경우 경고를 무시합니다.
	"git.ignoreWindowsGit27Warning": false,

	// 커밋 메시지 입력 유효성 검사 진단을 표시할지 여부를 제어합니다.
	"git.inputValidation": false,

	// 경고 표시를 위한 커밋 메시지 길이 임계값을 제어합니다.
	"git.inputValidationLength": 72,

	// 경고 표시를 위한 커밋 메시지 제목 길이 임계값을 제어합니다. `git.inputValidationLength` 값을 상속하려면 이 임계값 설정을 해제하세요.
	"git.inputValidationSubjectLength": 50,

	// 현재 충돌 된 파일의 병합 편집기를 엽니다.
	"git.mergeEditor": false,

	// 복제 후에 자동으로 리포지토리를 열지 여부를 제어합니다.
	//  - always: 항상 현재 창에서 엽니다.
	//  - alwaysNewWindow: 항상 새 창에서 엽니다.
	//  - whenNoFolderOpen: 열려 있는 폴더가 없는 경우에만 현재 창에서 엽니다.
	//  - prompt: 항상 동작을 확인합니다.
	"git.openAfterClone": "prompt",

	// 변경을 클릭할 때 Diff 편집기가 열릴지 여부를 제어합니다. 그렇지 않으면 일반 편집기가 열립니다.
	"git.openDiffOnClick": true,

	// 작업 영역 또는 열린 파일의 부모 폴더에 있는 리포지토리를 열지 여부를 제어합니다.
	//  - always: 항상 작업 영역의 부모 폴더에서 리포지토리를 열거나 파일을 엽니다.
	//  - never: 작업 영역의 부모 폴더에서 리포지토리를 열거나 파일을 열지 마세요.
	//  - prompt: 작업 영역의 부모 폴더에서 리포지토리를 열거나 파일을 열기 전에 프롬프트를 표시합니다.
	"git.openRepositoryInParentFolders": "prompt",

	// Git 명령을 실행한 후 소스 제어 뷰의 상태를 낙관적으로 업데이트할지 여부를 제어합니다.
	"git.optimisticUpdate": true,

	// git 실행 파일의 경로 및 파일 이름입니다(예: `C:\Program Files\Git\bin\git.exe`(Windows)). 조회할 여러 경로를 포함하는 문자열 값의 배열일 수도 있습니다.
	"git.path": null,

	// 커밋이 성공한 후 git 명령을 실행합니다.
	//  - none: 커밋 후 명령을 실행하지 않습니다.
	//  - push: 커밋이 성공한 후 'git push'를 실행합니다.
	//  - sync: 커밋이 성공한 후 'git pull' 및 'git push'를 실행합니다.
	"git.postCommitCommand": "none",

	// Git가 제출(commit)하기 전에 저장되지 않은 파일을 검사할지를 제어합니다.
	//  - always: 저장되지 않은 파일이 있는지 확인합니다.
	//  - staged: 저장되지 않은 스테이징된 파일만 확인합니다.
	//  - never: 이 검사를 사용하지 않도록 설정합니다.
	"git.promptToSaveFilesBeforeCommit": "always",

	// Git이 변경 사항을 스태시하기 전에 저장되지 않은 파일을 검사할지를 제어합니다.
	//  - always: 저장되지 않은 파일이 있는지 확인합니다.
	//  - staged: 저장되지 않은 스테이징된 파일만 확인합니다.
	//  - never: 이 검사를 사용하지 않도록 설정합니다.
	"git.promptToSaveFilesBeforeStash": "always",

	// 페치할 때 정리합니다.
	"git.pruneOnFetch": false,

	// 나가는 커밋이 없는 분기를 체크아웃하기 전에 빨리 감기할지 여부를 제어합니다.
	"git.pullBeforeCheckout": false,

	// 풀할 때 모든 태그를 페치합니다.
	"git.pullTags": true,

	// 동기화 명령을 실행할 때 Git에서 다시 지정을 사용하게 합니다.
	"git.rebaseWhenSync": false,

	// 커밋 후 실행된 마지막 git 명령을 기억하세요.
	"git.rememberPostCommitCommand": false,

	// 풀 명령을 실행할 때 충돌이 발생할 경우 로컬 태그를 원격 태그로 자동으로 교체합니다.
	"git.replaceTagsWhenPull": false,

	// `git.autoRepositoryDetection`이 `true` 또는 `subFolders`로 설정된 경우 Git 리포지토리를 검색하는 동안 무시되는 폴더 목록입니다.
	"git.repositoryScanIgnoredFolders": [
		"node_modules"
	],

	// `git.autoRepositoryDetection`이 `true` 또는 `subFolders`로 설정된 경우 Git 리포지토리에 대한 작업 영역 간 폴더를 스캔할 때 사용되는 깊이를 제어합니다. 제한 없이 '-1'로 설정할 수 있습니다.
	"git.repositoryScanMaxDepth": 1,

	// 명시적 Git 사용자 구성을 요구할지 또는 누락된 경우 Git에서 추측하도록 허용할지를 제어합니다.
	"git.requireGitUserConfig": true,

	// Git 리포지토리를 검색할 경로의 목록입니다.
	"git.scanRepositories": [],

	// 작업 단추가 원본 제어 뷰에 표시되는지 여부를 제어합니다.
	"git.showActionButton": {
		"commit": true,
		"publish": true,
		"sync": true
	},

	// Git 소스 제어판에 커밋 입력을 표시할지 여부를 제어합니다.
	"git.showCommitInput": true,

	// Git 변경점 보기에서 파일 열기 동작 줄을 표시할지의 여부를 제어합니다.
	"git.showInlineOpenFileAction": true,

	// Git 작업에서 진행률을 표시할지 여부를 제어합니다.
	"git.showProgress": true,

	// 푸시가 성공했을 때 알림을 표시할지 여부를 제어합니다.
	"git.showPushSuccessNotification": false,

	// Git 참조에 대한 마지막 커밋의 세부 정보를 checkout, branch 및 tag 선택기에 표시할지 여부를 제어합니다.
	"git.showReferenceDetails": true,

	// 추가/삭제된 파일 쌍의 변경 사항을 이름 변경으로 간주하기 위한 유사성 색인의 임계값(파일 크기와 비교한 추가/삭제 양)을 제어합니다. **참고:** Git 버전 `2.18.0` 이상이 필요합니다.
	"git.similarityThreshold": 50,

	// 스마트 커밋에서 자동으로 스테이징되는 변경 사항을 제어합니다.
	//  - all: 모든 변경 사항을 자동으로 스테이징합니다.
	//  - tracked: 추적된 변경 사항만 자동으로 스테이징했습니다.
	"git.smartCommitChanges": "all",

	// Git 상태 명령에서 구문 분석할 수 있는 변경 내용의 수를 제한하는 방법을 제어합니다. 제한이 없는 경우 0으로 설정할 수 있습니다.
	"git.statusLimit": 10000,

	// 스마트 커밋을 사용하도록 제안합니다(스테이징된 변경 사항이 없는 경우 모든 변경 사항 커밋).
	"git.suggestSmartCommit": true,

	// 동기화 작업을 실행할 때 사용자가 작업을 취소할 수 있도록 알림이 표시되는지 여부를 제어합니다.
	"git.supportCancellation": false,

	// 통합 터미널에서 생성된 Git 프로세스의 인증 처리기로 VS Code를 사용할지를 제어합니다. 참고: 이 설정의 변경 내용을 적용하려면 터미널을 다시 시작해야 합니다.
	"git.terminalAuthentication": true,

	// 통합 터미널에서 생성된 Git 프로세스에 대해 Git 편집기로 VS Code를 사용할지 여부를 제어합니다. 참고: 이 설정에서 변경 사항을 선택하려면 터미널을 다시 시작해야 합니다.
	"git.terminalGitEditor": false,

	// 타임라인 보기에서 항목에 사용할 날짜를 제어합니다.
	//  - committed: 커밋된 날짜 사용
	//  - authored: 작성 날짜 사용
	"git.timeline.date": "committed",

	// 타임라인 보기에 커밋 작성자를 표시할지를 제어합니다.
	"git.timeline.showAuthor": true,

	// 타임라인 보기에서 커밋되지 않은 변경 내용을 표시할지 여부를 제어합니다.
	"git.timeline.showUncommitted": false,

	// 추적되지 않은 변경 내용의 작동 방식을 제어합니다.
	//  - mixed: 추적 및 추적되지 않은 모든 변경 내용이 함께 표시되고 동일한 작업이 수행됩니다.
	//  - separate: 추적되지 않은 변경 내용은 소스 제어 보기에 별도로 표시됩니다. 또한 여러 작업에서 제외됩니다.
	//  - hidden: 추적되지 않은 변경 내용이 숨겨지고 여러 작업에서 제외됩니다.
	"git.untrackedChanges": "mixed",

	// 커밋 입력 상자의 메시지를 기본 스태시 메시지로 사용할지 여부를 제어합니다.
	"git.useCommitInputAsStashMessage": false,

	// 커밋 입력 상자에 메시지가 제공되지 않을 때마다 커밋 메시지를 작성하는 데 전체 텍스트 편집기를 사용할지 여부를 제어합니다.
	"git.useEditorAsCommitInput": true,

	// 강제 푸시가 더 안전한 force-if-includes 변형을 사용하는지 여부를 제어합니다. 참고: 이 설정을 사용하려면 '#git.useForcePushWithLease#' 설정 및 Git 버전 '2.30.0' 이상이 필요합니다.
	"git.useForcePushIfIncludes": true,

	// 강제 푸시가 좀 더 안전한 force-with-lease 변형을 사용하는지 여부를 제어합니다.
	"git.useForcePushWithLease": true,

	// 통합 버전을 사용하기 위해 GIT_ASKPASS를 덮어써야 하는지 여부를 제어합니다.
	"git.useIntegratedAskPass": true,

	// '#git.useEditorAsCommitInput#'이 사용하도록 설정된 경우 자세한 정보 표시 출력을 사용하도록 설정합니다.
	"git.verboseCommit": false,

	// GitHub 리포지토리에 대한 리포지토리 규칙을 쿼리할지 여부를 제어합니다.
	"github.branchProtection": true,

	// VS Code 내에서 Git 명령에 대해 자동 GitHub 인증을 사용하도록 설정할지 여부를 제어합니다.
	"github.gitAuthentication": true,

	// GitHub 리포지토리를 복제하는 데 사용되는 프로토콜 제어
	"github.gitProtocol": "https",

	// 다양한 호버에 커밋 작성자 GitHub 아바타를 표시할지 여부를 제어합니다(예: Git 블레임, Timeline, Source Control Graph 등).
	"github.showAvatar": true,

	// true이면 HTTP 요청에 Electron의 기본 제공 가져오기 함수를 사용합니다. false이면 Node.js 전역 가져오기 함수를 사용합니다. 이 설정은 Electron 환경에서 실행되는 경우에만 적용됩니다. **참고:** 이 설정을 적용하려면 다시 시작해야 합니다.
	"github-authentication.useElectronFetch": true,

	// GHE.com 또는 GitHub Enterprise Server instance URI입니다.
	// 
	// 예제:
	// * GHE.com: 'https://octocat.ghe.com`
	// * GitHub Enterprise Server: 'https://github.octocat.com`
	// 
	// > **참고:** 이 값은 _not_이(가) GitHub.com URI로 설정되어야 합니다. 계정이 GitHub.com 있거나 GitHub Enterprise 관리되는 사용자인 경우 추가 구성이 필요하지 않으며 GitHub에 로그인할 수 있습니다.
	"github-enterprise.uri": "",

	// Grunt 작업 검색의 활성화를 제어합니다. Grunt 작업 검색으로 인해 열려 있는 작업 영역의 파일이 실행될 수 있습니다.
	"grunt.autoDetect": "off",

	// Gulp 작업 검색의 활성화를 제어합니다. Gulp 작업 검색으로 인해 열려 있는 작업 영역의 파일이 실행될 수 있습니다.
	"gulp.autoDetect": "off",

	// 작업자 스레드에서 Jupyter Notebook을 직렬화하는 실험적 기능입니다.
	"ipynb.experimental.serialization": true,

	// ipynb 노트북 파일의 Markdown 셀에 이미지 붙여넣기를 활성화/비활성화합니다. 붙여넣은 이미지는 셀에 첨부 파일로 삽입됩니다.
	"ipynb.pasteImagesAsAttachments.enabled": true,

	// Jake 작업 검색의 사용 여부를 제어합니다. Jake 작업 검색으로 인해 열려 있는 작업 영역의 파일이 실행될 수 있습니다.
	"jake.autoDetect": "off",

	// 기본 제공 Markdown 미리 보기에서 렌더링 수학을 사용하거나 사용하지 않도록 설정합니다.
	"markdown.math.enabled": true,

	// 사용자 지정 매크로의 컬렉션입니다. 각 매크로는 키-값 쌍으로, 키는 새 명령 이름이고 값은 매크로의 확장입니다.
	"markdown.math.macros": {},

	// 자동으로 음소거 시 비디오 재생을 시작합니다.
	"mediaPreview.video.autoPlay": false,

	// 비디오를 자동으로 반복합니다.
	"mediaPreview.video.loop": false,

	// 병합 충돌을 해결한 후 다음 병합 충돌로 자동으로 이동할지 여부입니다.
	"merge-conflict.autoNavigateNextConflict.enabled": false,

	// 편집기 내에서 병합 충돌 블록에 대한 Code Lens를 만듭니다.
	"merge-conflict.codeLens.enabled": true,

	// 편집기 내에서 병합 충돌 블록에 대한 decorator를 만듭니다.
	"merge-conflict.decorators.enabled": true,

	// 병합 충돌에서 변경 내용을 비교할 때 diff 뷰가 열리는 위치를 제어합니다.
	//  - Current: 현재 편집기 그룹에서 diff 뷰를 엽니다.
	//  - Beside: 현재 편집기 그룹 옆에 있는 diff 뷰를 엽니다.
	//  - Below: 현재 편집기 그룹 아래에 diff 뷰를 엽니다.
	"merge-conflict.diffViewPosition": "Current",

	// Microsoft 소버린 클라우드 인증 공급자와 함께 사용할 소버린 클라우드에 대한 사용자 지정 구성입니다. 이 기능을 사용하려면 `microsoft-sovereign-cloud.environment`을 'custom'으로 설정해야 합니다.
	"microsoft-sovereign-cloud.customEnvironment": {},

	// 인증에 사용할 소버린 클라우드입니다. 'custom'을 선택하는 경우 `microsoft-sovereign-cloud.customEnvironment` 설정도 설정해야 합니다.
	//  - ChinaCloud: Azure 중국
	//  - USGovernment: Azure 미국 정부
	//  - custom: 사용자 지정 Microsoft 소버린 클라우드
	"microsoft-sovereign-cloud.environment": "",

	// Microsoft 계정 로그인하는 데 사용할 인증 구현입니다.
	// 
	// *참고: 'classic' 구현은 더 이상 사용되지 않으며, 향후 릴리스에서 제거될 예정입니다. 'msal' 구현이 작동하지 않는 경우 [문제 보고하기](command:workbench.action.openIssueReporter)를 클릭하고 로그인하려는 내용을 설명해 주세요.*
	//  - msal: MSAL(Microsoft 인증 라이브러리)을 사용하여 Microsoft 계정에 로그인합니다.
	//  - msal-no-broker: 브라우저를 사용하여 Microsoft 계정으로 로그인하려면 Microsoft 인증 라이브러리(MSAL)를 사용하세요. 네이티브 브로커에 문제가 있는 경우에 유용합니다.
	//  - classic: (사용되지 않음) 클래식 인증 흐름을 사용하여 Microsoft 계정 로그인합니다.
	"microsoft-authentication.implementation": "msal",

	// `debug.node.autoAttach`이 설정되어 있는 경우 자동으로 연결 및 디버그할 프로세스를 구성합니다. 이 설정과 관계없이 `--inspect` 플래그로 시작한 노드 프로세스가 항상 연결됩니다.
	//  - always: 터미널에서 시작되는 모든 Node.js 프로세스에 자동으로 연결합니다.
	//  - smart: node_modules 폴더에 있지 않은 스크립트를 실행할 때 자동으로 연결합니다.
	//  - onlyWithFlag: '--inspect'가 지정된 경우에만 자동으로 연결합니다.
	//  - disabled: 자동 연결이 사용하지 않도록 설정되어 있고 상태 표시줄에 표시되지 않습니다.
	"debug.javascript.autoAttachFilter": "disabled",

	// "smart" `debug.javascript.autoAttachFilter` 모드로 연결할 시간을 결정하는 GLOB 패턴을 구성합니다. `$KNOWN_TOOLS$`이(가) 공용 테스트 및 코드 실행기의 이름 목록으로 바뀝니다. [VS Code 문서에서 자세히 읽기](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
	"debug.javascript.autoAttachSmartPattern": [
		"${workspaceFolder}/**",
		"!**/node_modules/**",
		"**/$KNOWN_TOOLS$/**"
	],

	// 원격 웹 앱을 디버깅할 때 원격 서버를 로컬 컴퓨터에 자동으로 터널링할지 여부를 구성합니다.
	"debug.javascript.automaticallyTunnelRemoteServer": true,

	// 조건부 중단점에서 오류가 발생하면 중지할지 여부입니다.
	"debug.javascript.breakOnConditionalError": false,

	// npm 스크립트에 "실행" 및 "디버그" 코드 렌즈가 표시되어야 하는 위치입니다. "all", 스크립트, 스크립트 섹션의 "top" 또는 "never"일 수 있습니다.
	"debug.javascript.codelens.npmScripts": "top",

	// 디버그 터미널 내부에서 클릭한 열린 링크를 디버깅할 때 사용되는 옵션입니다. 이 동작을 사용하지 않도록 설정하려면 "false"로 설정할 수 있습니다.
	"debug.javascript.debugByLinkOptions": "on",

	// 지정되지 않은 경우 시작 구성에 사용되는 기본 `runtimeExecutable`입니다. 이 설정을 사용하여 Node.js 또는 브라우저 설치의 사용자 지정 경로를 구성할 수 있습니다.
	"debug.javascript.defaultRuntimeExecutable": {
		"pwa-node": "node"
	},

	// 실험적 네트워크 보기를 지원하는 대상에 대해 실험적 네트워크 보기를 활성화합니다.
	"debug.javascript.enableNetworkView": true,

	// '디버그: Node.js 프로세스에 연결' 명령을 통해 프로세스를 디버그할 때 사용되는 기본 옵션입니다.
	"debug.javascript.pickAndAttachOptions": {},

	// 디버거에서 소스 맵과 같은 리소스를 로드할 때 사용할 요청 옵션입니다. 예를 들어 sourcemap에서 인증을 요구하거나 자체 서명된 인증서를 사용하는 경우 이 옵션을 구성해야 할 수 있습니다. 옵션은 [`got`](https://github.com/sindresorhus/got) 라이브러리를 사용하여 요청을 만드는 데 사용됩니다.
	// 
	// 일반적으로 `{ "https": { "rejectUnauthorized": false } }`를 전달하여 인증서 확인을 사용하지 않도록 설정할 수 있습니다.
	"debug.javascript.resourceRequestOptions": {},

	// JavaScript 디버그 터미널 및 npm 스크립트에 대한 기본 시작 옵션입니다.
	"debug.javascript.terminalOptions": {},

	// 원본 파일을 읽을 수 없는 sourcemap된 파일을 자동으로 매핑 해제하는지를 구성합니다. false(기본값)인 경우 프롬프트가 표시됩니다.
	"debug.javascript.unmapMissingSources": false,

	// npm 스크립트가 자동으로 감지되어야 하는지 여부를 제어합니다.
	"npm.autoDetect": "on",

	// 탐색기 컨텍스트 메뉴의 폴더에 포함된 NPM 스크립트 실행을 사용하도록 설정합니다.
	"npm.enableRunFromFolder": false,

	// The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
	// 최상위 'package.json' 파일이 없는 경우 npm 스크립트의 탐색기 보기를 사용하도록 설정합니다.
	"npm.enableScriptExplorer": false,

	// 자동 스크립트 검색에서 제외할 폴더에 대한 Glob 패턴을 구성합니다.
	"npm.exclude": "",

	// https://registry.npmjs.org 및 https://registry.bower.io에서 데이터를 가져와 npm 종속성의 가리키기 기능에 대한 정보 및 자동 완성을 제공합니다.
	"npm.fetchOnlinePackageInfo": true,

	// 종속성을 설치하는 데 사용되는 패키지 관리자입니다.
	//  - auto: 잠금 파일 및 설치된 패키지 관리자를 기반으로 사용할 패키지 관리자를 자동 감지합니다.
	//  - npm: npm을 패키지 관리자로 사용합니다.
	//  - yarn: yarn을 패키지 관리자로 사용합니다.
	//  - pnpm: pnpm을 패키지 관리자로 사용합니다.
	//  - bun: bun을 패키지 관리자로 사용합니다.
	"npm.packageManager": "auto",

	// `--silent` 옵션으로 npm 명령 실행.
	"npm.runSilent": false,

	// NPM 스크립트 탐색기에서 사용되는 기본 클릭 작업: 'open' 또는 'run', 기본값은 'open'입니다.
	"npm.scriptExplorerAction": "open",

	// NPM 스크립트 뷰에서 제외해야 하는 스크립트를 나타내는 정규식 배열입니다.
	"npm.scriptExplorerExclude": [],

	// 스크립트에 대한 '실행' 및 '디버그' 명령으로 가리킵니다.
	"npm.scriptHover": true,

	// 스크립트를 실행하는 데 사용되는 스크립트 실행기입니다.
	//  - auto: 잠금 파일 및 설치된 패키지 관리자를 기반으로 사용할 스크립트 실행기를 자동 감지합니다.
	//  - npm: npm을 스크립트 실행기로 사용합니다.
	//  - yarn: Yarn을 스크립트 실행기로 사용합니다.
	//  - pnpm: pnpm을 스크립트 실행기로 사용합니다.
	//  - bun: 스크립트 실행기로 번을 사용합니다.
	//  - node: Node.js 스크립트 실행기로 사용합니다.
	"npm.scriptRunner": "auto",

	// CodeLens 참조를 선택할 때 '참조 피킹' 또는 '참조 찾기'를 호출할지 여부를 제어합니다.
	//  - peek: Peek 편집기에서 참조를 표시합니다.
	//  - view: 참조를 별도의 보기로 표시합니다.
	"references.preferredLocation": "peek",

	// 간단한 브라우저에 포커스가 있을 때를 보여 주는 부동 표시기를 사용하도록 설정/사용하지 않도록 설정합니다.
	"simpleBrowser.focusLockIndicator.enabled": true,

	// absolute path of `adb`
	"androidEmulatorLauncher.adbPath": "~/Library/Android/sdk/platform-tools/adb",

	// absolute path of the `emulator` tool
	"androidEmulatorLauncher.emulatorPath": "~/Library/Android/sdk/tools/emulator",

	// The file extensions recognized as SQLite database.
	"sqlite.databaseExtensions": [
		"db",
		"db3",
		"sdb",
		"s3db",
		"sqlite",
		"sqlite3"
	],

	// Logging level in the output channel (DEBUG, INFO, WARN, ERROR)
	"sqlite.logLevel": "INFO",

	// Number of records to show per page. (-1 to show all records)
	"sqlite.recordsPerPage": 50,

	// SQL query to execute every time a database is opened.
	"sqlite.setupDatabase": {},

	// SQLite3 command or executable path.
	"sqlite.sqlite3": "sqlite3",

	// The default debug port to use.
	"tsserver-debug.debugPort": 9559,

	// The number of milliseconds to wait to discover an port that can be used for remote debugging.
	"tsserver-debug.discoveryTimeout": 3000,

	// Open documentation in a browser within VS Code.
	"tailwindDocs.useSimpleBrowser": true,

	// Allow downloading from servers with self-signed certificates (not recommended for production)
	"bitoAI.allowSelfSignedCertificates": true,

	// Specify the base font size in pixels. **Enabling the option to match with the IDE’s font size, as mentioned above, will override this setting.**
	"bitoAI.appearance.fontSize": 13,

	// Enable to match the font size with that of the IDE. **This will override any specific numeric value set in the font size config below.**
	"bitoAI.appearance.fontSize (Match with IDE Font)": true,

	// Select the predefined 'Light' or 'Dark' theme, or opt for an 'Adaptive' theme that adjusts to your IDE's custom theme.
	"bitoAI.appearance.theme": "Always Dark",

	// Open the Bito extension in your preferred view: side panel, new window, or separate code file view.
	"bitoAI.openInExtendedWindow.enableExtendedWindow": "Open in side panel view",

	// Traces the communication between VS Code and the Tailwind CSS Language Server.
	"tailwindcss-intellisense.trace.server": "off",

	// The HTML attributes for which to provide class completions, hover previews, linting etc.
	"tailwindCSS.classAttributes": [
		"class",
		"className",
		"ngClass",
		"class:list"
	],

	// The function or tagged template literal names for which to provide class completions, hover previews, linting etc.
	"tailwindCSS.classFunctions": [],

	// Enable code actions.
	"tailwindCSS.codeActions": true,

	// Enable code lens.
	"tailwindCSS.codeLens": true,

	// Controls whether the editor should render inline color decorators for Tailwind CSS classes and helper functions.
	"tailwindCSS.colorDecorators": true,

	// Enable class name completions when using Emmet-style syntax, for example `div.bg-red-500.uppercase`
	"tailwindCSS.emmetCompletions": false,

	// 
	"tailwindCSS.experimental.classRegex": [],

	// Manually specify the Tailwind config file or files that should be read to provide IntelliSense features. Can either be a single string value, or an object where each key is a config file path and each value is a glob or array of globs representing the set of files that the config file applies to.
	"tailwindCSS.experimental.configFile": null,

	// Configure glob patterns to exclude from all IntelliSense features. Inherits all glob patterns from the `files.exclude` setting.
	"tailwindCSS.files.exclude": [
		"**/.git/**",
		"**/node_modules/**",
		"**/.hg/**",
		"**/.svn/**"
	],

	// Enable hovers.
	"tailwindCSS.hovers": true,

	// Enable features in languages that are not supported by default. Add a mapping here between the new language and an already supported language.
	//  E.g.: `{"plaintext": "html"}`
	"tailwindCSS.includeLanguages": {},

	// Enable the Node.js inspector agent for the language server and listen on the specified port.
	"tailwindCSS.inspectPort": null,

	// Class names on the same HTML element which apply the same CSS property or properties
	"tailwindCSS.lint.cssConflict": "warning",

	// Unsupported use of the [`@apply` directive](https://tailwindcss.com/docs/functions-and-directives/#apply)
	"tailwindCSS.lint.invalidApply": "error",

	// Unknown or invalid path used with the [`theme` helper](https://tailwindcss.com/docs/functions-and-directives/#theme)
	"tailwindCSS.lint.invalidConfigPath": "error",

	// Unknown screen name used with the [`@screen` directive](https://tailwindcss.com/docs/functions-and-directives/#screen)
	"tailwindCSS.lint.invalidScreen": "error",

	// Unknown value used with the [`@tailwind` directive](https://tailwindcss.com/docs/functions-and-directives/#tailwind)
	"tailwindCSS.lint.invalidTailwindDirective": "error",

	// Unknown variant name used with the [`@variants` directive](https://tailwindcss.com/docs/functions-and-directives/#variants)
	"tailwindCSS.lint.invalidVariant": "error",

	// Class variants not in the recommended order (applies in [JIT mode](https://tailwindcss.com/docs/just-in-time-mode) only)
	"tailwindCSS.lint.recommendedVariantOrder": "warning",

	// Usage of class names that have been blocklisted via `@source not inline(…)`
	"tailwindCSS.lint.usedBlocklistedClass": "warning",

	// Root font size in pixels. Used to convert `rem` CSS values to their `px` equivalents. See `tailwindCSS.showPixelEquivalents`.
	"tailwindCSS.rootFontSize": 16,

	// Show `px` equivalents for `rem` CSS values.
	"tailwindCSS.showPixelEquivalents": true,

	// Enable autocomplete suggestions.
	"tailwindCSS.suggestions": true,

	// Enable linting. Rules can be configured individually using the `tailwindcss.lint.*` settings
	"tailwindCSS.validate": true,

	// For import command. The declaration type used for require()
	"npm-intellisense.importDeclarationType": "const",

	// For import command. Use import statements instead of require()
	"npm-intellisense.importES6": true,

	// For import command. The linebreak used after the snippet
	"npm-intellisense.importLinebreak": ";\r\n",

	// For import command. The type of quotes to use in the snippet
	"npm-intellisense.importQuotes": "'",

	// (experimental) Enables path intellisense in subfolders of modules
	"npm-intellisense.packageSubfoldersIntellisense": false,

	// Look for package.json inside nearest directory instead of workspace root
	"npm-intellisense.recursivePackageJsonLookup": true,

	// Scans devDependencies as well
	"npm-intellisense.scanDevDependencies": false,

	// shows build in node modules like 'path' of 'fs'
	"npm-intellisense.showBuildInLibs": false,

	// If defined, unmapped absolute path imports are based on this location.  Takes priority over 'absolutePathToWorkspace' if both are defined
	"path-intellisense.absolutePathTo": "",

	// Sets an absolute path to the current workspace
	"path-intellisense.absolutePathToWorkspace": true,

	// Automatically adds slash after directory
	"path-intellisense.autoSlashAfterDirectory": false,

	// Automatically triggers next suggestion after previous suggestion
	"path-intellisense.autoTriggerNextSuggestion": false,

	// Adds the file extension to a import statements
	"path-intellisense.extensionOnImport": false,

	// Ignores tsconfig file for mappings
	"path-intellisense.ignoreTsConfigBaseUrl": false,

	// Mappings for paths.  The values should be interpreted as absolute paths (and can use '${workspaceFolder}')
	"path-intellisense.mappings": {},

	// Show hidden files
	"path-intellisense.showHiddenFiles": false,

	// Shows suggestions when the import starts with a forward slash ('/')
	"path-intellisense.showOnAbsoluteSlash": true,

	// Use this setting if the language server process doesn't exit after VS Code closes.
	"codeium.aggressiveShutdown": false,

	// Enable automatic proxy detection.
	"codeium.detectProxy": true,

	// Whether to disable Windsurf Supercomplete (Beta).
	"codeium.disableSupercomplete": false,

	// Disable tab to jump functionality.
	"codeium.disableTabJump": false,

	// AI-powered inline action buttons in your editor.
	//  - true: Always show
	//  - hide_x: Always show, but hide the x
	//  - false: Never show
	"codeium.enableCodeLens": true,

	// Show the Windsurf Command shortcut upon selecting multiple lines of text
	"codeium.enableCommandSideHintEducation": true,

	// Enable / disable Windsurf globally or for specific languages
	"codeium.enableConfig": {
		"*": true
	},

	// AI Powered `Windsurf: Explain Problem` hover pop-up.
	"codeium.enableExplainProblem": true,

	// If true, Windsurf will provide autocomplete suggestions in comments.
	"codeium.enableInComments": true,

	// Enable the Windsurf Indexing Engine. This feature allows chat and autocomplete models to have full codebase awareness, significantly improving autocomplete and chat quality. It also allows natural language search of your codebase. 
	// 
	//  When first enabled, Windsurf will consume about 25% of CPU while it indexes the workspace. This should take < 10 minutes depending on your workspace size, once per workspace. CPU usage will return to normal automatically.
	//  - true: On
	//  - default: Default (defer to Windsurf's judgement)
	//  - false: Off
	"codeium.enableSearch": "default",

	// Indexed files that have not been accessed within this retention period in days will be removed.
	"codeium.indexingRetentionPeriod": 30,

	// Custom absolute path to store Windsurf index data. Use in cases when the home directory is an NFS mount so the path is on local disk.
	"codeium.indexStoragePath": "",

	// Time in seconds the language server will have to start before timeout.
	"codeium.languageServerStartupTimeout": 15,

	// Conditional on indexing being enabled, Windsurf will attempt to index workspaces that have up to this many files. This file count ignores .gitignore and binary files. Raising this limit from default may lead to performance issues. Values 0 or below will be treated as unlimited.
	"codeium.searchMaxWorkspaceFileCount": 5000,

	// Snooze time in minutes. After this amount of time, Windsurf autocomplete will resume globally.
	"codeium.snoozeTime": 60,

	// Prefer using VS Code secrets over local storage for credentials.
	"codeium.useSecretStorage": true,

	// The setting is deprecated. Use editor.codeActionsOnSave instead with a source.fixAll.eslint member.
	// Turns auto fix on save on or off.
	"eslint.autoFixOnSave": false,

	// Show disable lint rule in the quick fix menu.
	"eslint.codeAction.disableRuleComment": {
		"enable": true,
		"location": "separateLine",
		"commentStyle": "line"
	},

	// Show open lint rule documentation web page in the quick fix menu.
	"eslint.codeAction.showDocumentation": {
		"enable": true
	},

	// Specifies the code action mode. Possible values are 'all' and 'problems'.
	//  - all: Fixes all possible problems in the file. This option might take some time.
	//  - problems: Fixes only reported problems that have non-overlapping textual edits. This option runs a lot faster.
	"eslint.codeActionsOnSave.mode": "all",

	// The ESLint options object to use on save (see https://eslint.org/docs/developer-guide/nodejs-api#eslint-class). `eslint.codeActionsOnSave.rules`, if specified, will take priority over any rule options here.
	"eslint.codeActionsOnSave.options": {},

	// The rules that should be executed when computing the code actions on save or formatting a file. Defaults to the rules configured via the ESLint configuration
	"eslint.codeActionsOnSave.rules": null,

	// Enables ESLint debug mode (same as `--debug` on the command line)
	"eslint.debug": false,

	// Controls whether eslint is enabled or not.
	"eslint.enable": true,

	// Additional exec argv argument passed to the runtime. This can for example be used to control the maximum heap space using --max_old_space_size
	"eslint.execArgv": null,

	// Use ESLint version 8.57 or later and `eslint.useFlatConfig` instead.
	// Enables support of experimental Flat Config (aka eslint.config.js). Requires ESLint version >= 8.21 < 8.57.0).
	"eslint.experimental.useFlatConfig": false,

	// Enables ESLint as a formatter.
	"eslint.format.enable": false,

	// If true, untitled files won't be validated by ESLint.
	"eslint.ignoreUntitled": false,

	// Controls whether a task for linting the whole workspace will be available.
	"eslint.lintTask.enable": false,

	// Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).
	"eslint.lintTask.options": ".",

	// Whether ESlint should migrate auto fix on save settings.
	"eslint.migration.2_x": "on",

	// The value of `NODE_ENV` to use when running eslint tasks.
	"eslint.nodeEnv": null,

	// A path added to `NODE_PATH` when resolving the eslint module.
	"eslint.nodePath": null,

	// A special rules customization section for text cells in notebook documents.
	"eslint.notebooks.rules.customizations": [],

	// Whether ESLint should issue a warning on ignored files.
	"eslint.onIgnoredFiles": "off",

	// The eslint options object to provide args normally passed to eslint when executed from a command line (see https://eslint.org/docs/developer-guide/nodejs-api#eslint-class).
	"eslint.options": {},

	// The setting is deprecated. The Package Manager is automatically detected now.
	// The package manager you use to install node modules.
	"eslint.packageManager": "npm",

	// An array of language ids for which the extension should probe if support is installed.
	"eslint.probe": [
		"astro",
		"civet",
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact",
		"html",
		"mdx",
		"vue",
		"markdown",
		"json",
		"jsonc"
	],

	// Shortens the text spans of underlined problems to their first related line.
	"eslint.problems.shortenToSingleLine": false,

	// This option is deprecated. Use eslint.lintTask.enable instead.
	// Controls whether a task for linting the whole workspace will be available.
	"eslint.provideLintTask": false,

	// Turns on quiet mode, which ignores warnings.
	"eslint.quiet": false,

	// Override the severity of one or more rules reported by this extension, regardless of the project's ESLint config. Use globs to apply default severities for multiple rules.
	"eslint.rules.customizations": [],

	// Run the linter on save (onSave) or on type (onType)
	"eslint.run": "onType",

	// The location of the node binary to run ESLint under.
	"eslint.runtime": null,

	// The time budget in milliseconds to spend on computing fixes before showing a warning or error.
	"eslint.timeBudget.onFixes": {
		"warn": 3000,
		"error": 6000
	},

	// The time budget in milliseconds to spend on validation before showing a warning or error.
	"eslint.timeBudget.onValidation": {
		"warn": 4000,
		"error": 8000
	},

	// Traces the communication between VSCode and the eslint linter service.
	"eslint.trace.server": "off",

	// Since version 7 ESLint offers a new API call ESLint. Use it even if the old CLIEngine is available. From version 8 on forward on ESLint class is available.
	"eslint.useESLintClass": false,

	// Controls whether flat config should be used or not. This setting requires ESLint version 8.57 or later and is interpreted according to the [ESLint Flat Config rollout plan](https://eslint.org/blog/2023/10/flat-config-rollout-plans/). This means:
	// 
	//  - *8.57.0 <= ESLint version < 9.x*: setting is honored and defaults to false
	// - *9.0.0 <= ESLint version < 10.x*: settings is honored and defaults to true
	// - *10.0.0 <= ESLint version*: setting is ignored. Flat configs are the default and can't be turned off.
	"eslint.useFlatConfig": null,

	// An array of language ids which should be validated by ESLint. If not installed ESLint will show an error.
	"eslint.validate": null,

	// Specifies how the working directories ESLint is using are computed. ESLint resolves configuration files (e.g. `eslintrc`, `.eslintignore`) relative to a working directory so it is important to configure this correctly.
	"eslint.workingDirectories": [],

	// Show an option to cold boot android devices.
	"emulator.androidColdBoot": false,

	// Add extra boot args to the android emulator.
	"emulator.androidExtraBootArgs": "",

	// The absolute path of your Android emulator directory containing the emulator script.
	"emulator.emulatorPath": "~/Library/Android/sdk/emulator",

	// The absolute path of the Android emulator directory on your Linux containing the emulator script.
	"emulator.emulatorPathLinux": "",

	// The absolute path of the Android emulator directory on your MacBook containing the emulator script.
	"emulator.emulatorPathMac": "",

	// The absolute path of the Android emulator directory on your Windows containing the emulator script.
	"emulator.emulatorPathWindows": "",

	// The absolute path of the Android emulator directory when running in WSL. (e.g. /mnt/c/Users/username/AppData/Local/Android/Sdk/emulator)
	"emulator.emulatorPathWSL": "",

	// Show the emulator icon in the editor bar on the top right.
	"emulator.hasEditorTitleIcon": true,

	// The absolute path of your Xcode simulator directory containing the Simulator.app script. Leaving it empty will automatically select the path with xcode-select -p.
	"emulator.simulatorPath": "",

	// Be notified when Docker Engine is not available.
	"docker.extension.dockerEngineAvailabilityPrompt": true,

	// Render a divider line between each build stage of a Dockerfile.
	"docker.extension.editor.dockerfileBuildStageDecorationLines": true,

	// Enable Compose editing features from the Docker DX extension. Note that changing this value requires a **restart** of Visual Studio Code to take effect.
	// 
	// If you have [Red Hat's YAML extension](https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml), note that both Docker DX and Red Hat's YAML extension are handling Compose files. This creates duplicate completions, hovers, and syntax errors.
	// 
	// You can follow the steps [here](https://github.com/docker/vscode-extension/blob/main/FAQ.md) to update your `settings.json` to turn off Compose support in the YAML extension and streamline your experience.
	"docker.extension.enableComposeLanguageServer": true,

	// Enter the port on localhost where the language server is running, used for debugging.
	"docker.lsp.debugServerPort": null,

	// Determines if `critical_high_vulnerabilities` diagnostics should be shown. If `docker.lsp.experimental.vulnerabilityScanning` is false then this setting will be ignored.
	"docker.lsp.experimental.scout.criticalHighVulnerabilities": true,

	// Determines if `not_pinned_digest` diagnostics should be shown. If `docker.lsp.experimental.vulnerabilityScanning` is false then this setting will be ignored.
	"docker.lsp.experimental.scout.notPinnedDigest": false,

	// Determines if `recommended_tag` diagnostics should be shown. If `docker.lsp.experimental.vulnerabilityScanning` is false then this setting will be ignored.
	"docker.lsp.experimental.scout.recommendedTag": false,

	// Determines if `vulnerabilities` diagnostics should be shown. If `docker.lsp.experimental.vulnerabilityScanning` is false then this setting will be ignored.
	"docker.lsp.experimental.scout.vulnerabilities": true,

	// Enable image analysis of Dockerfiles (Experimental)
	"docker.lsp.experimental.vulnerabilityScanning": true,

	// Determines what telemetry is collected by Docker. If vscode.env.isTelemetryEnabled is false, then telemetry collection is disabled regardless of what has been set for this configuration value.
	"docker.lsp.telemetry": "all",

	// Always prompt with repository picker when running Git History
	"gitHistory.alwaysPromptRepositoryPicker": false,

	// Avatar image cache expiration (0 = cache disabled)
	"gitHistory.avatarCacheExpiration": 60,

	// Prefer to open repository (instead of file) when pressing the editor title button
	"gitHistory.editorTitleButtonOpenRepo": false,

	// Whether to display the commit explorer view
	"gitHistory.hideCommitViewExplorer": false,

	// Include remote branches when opening Git History
	"gitHistory.includeRemoteBranches": false,

	// Output log information
	"gitHistory.logLevel": "Info",

	// Default number of items to be displayed in Git History Viewer
	"gitHistory.pageSize": 100,

	// Whether to display a button in the editor title menu bar
	"gitHistory.showEditorTitleMenuBarIcons": true,

	// Split show file history when file is active.
	"gitHistory.showFileHistorySplit": true,

	// Show commit details in side-by-side view
	"gitHistory.sideBySide": false,

	// Specifies where the 'Git: View History' action appears on the title of SCM Providers.
	//  - Inline: Show the 'Git: View History' action on the title of SCM Providers
	//  - More Actions: Show the 'Git: View History' action in the 'More Actions...' menu on the title of SCM Providers
	"gitHistory.sourceCodeProviderIntegrationLocation": "Inline",

	// Controls if snippets should add `import React from 'react';` at the top of components.
	// Use if you have React +17 and use jsx transform.
	"reactSnippets.settings.importReactOnTop": true,

	// defines the language scopes for which the snippets will be available.
	// Use comma separated values.
	// For example: `typescript,typescriptreact,javascript,javascriptreact`
	"reactSnippets.settings.languageScopes": "typescript,typescriptreact,javascript,javascriptreact",

	// [EXPERIMENTAL: MIGHT NOT WORK]: Integrate prettier settings with code generated from snippets.
	"reactSnippets.settings.prettierEnabled": false,

	// Controls if React components have typescript Props typing.
	"reactSnippets.settings.typescript": true,

	// Controls which prefix for typescript snippets should use for props/state.
	"reactSnippets.settings.typescriptPropsStatePrefix": "type",

	// When to validate class selectors.
	"css.autoValidation": "Never",

	// List of languages which suggestions are desired.
	"css.enabledLanguages": [
		"html"
	],

	// List of local or remote style sheets for suggestions.
	"css.styleSheets": [],

	// Include parentheses around a sole arrow function parameter.
	"prettier.arrowParens": "always",

	// Puts the `>` of a multi-line HTML (HTML, JSX, Vue, Angular) element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
	"prettier.bracketSameLine": false,

	// Controls the printing of spaces inside object literals.
	"prettier.bracketSpacing": true,

	// Path to the prettier configuration file.
	"prettier.configPath": "",

	// This feature is no longer supported. Instead, configure VS Code [default formatters](https://github.com/prettier/prettier-vscode#default-formatter) or use .prettierignore.
	// A list of languages IDs to disable this extension on.
	"prettier.disableLanguages": [],

	// A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter.
	"prettier.documentSelectors": [],

	// Control whether Prettier formats quoted code embedded in the file.
	"prettier.embeddedLanguageFormatting": "auto",

	// Controls whether Prettier is enabled or not. Reload required.
	"prettier.enable": true,

	// Enable debug logs for troubleshooting.
	"prettier.enableDebugLogs": false,

	// Specify the end of line used by prettier.
	"prettier.endOfLine": "lf",

	// Try prettier's [new ternary formatting](https://github.com/prettier/prettier/pull/13183) before it becomes the default behavior.
	"prettier.experimentalTernaries": false,

	// Specify the global [whitespace sensitivity](https://prettier.io/blog/2018/11/07/1.15.0.html#whitespace-sensitive-formatting) for HTML files.
	// Valid options:
	// - `css` - Respect the default value of CSS `display` property.
	// - `strict` - Whitespaces are considered sensitive.
	// - `ignore` - Whitespaces are considered insensitive.
	"prettier.htmlWhitespaceSensitivity": "css",

	// Path to a `.prettierignore` file.
	"prettier.ignorePath": ".prettierignore",

	// Prettier can insert a special `@format` marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the `@format` marker.
	"prettier.insertPragma": false,

	// This option has been deprecated in v2.4.0, use `bracketSameLine` instead.
	// Puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
	"prettier.jsxBracketSameLine": false,

	// Use single quotes instead of double quotes in JSX.
	"prettier.jsxSingleQuote": false,

	// Package manager is now automatically detected by VS Code. This setting is no longer used.
	// The package manager you use to install node modules.
	"prettier.packageManager": "npm",

	// Path to the `prettier` module, eg: `./node_modules/prettier`.
	"prettier.prettierPath": "",

	// Fit code within this line limit.
	"prettier.printWidth": 80,

	// (Markdown) wrap prose over multiple lines.
	"prettier.proseWrap": "preserve",

	// Change when properties in objects are quoted.
	// Valid options:
	// - `"as-needed"` - Only add quotes around object properties where required.
	// - `"consistent"` - If at least one property in an object requires quotes, quote all properties.
	// - `"preserve"` - Respect the input use of quotes in object properties.
	"prettier.quoteProps": "as-needed",

	// Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
	// 
	// > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
	"prettier.requireConfig": false,

	// Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
	"prettier.requirePragma": false,

	// When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
	// > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
	"prettier.resolveGlobalModules": false,

	// Whether to add a semicolon at the end of every line.
	"prettier.semi": true,

	// Enforces single attribute per line in HTML, JSX, Vue and Angular.
	"prettier.singleAttributePerLine": false,

	// Use single instead of double quotes.
	"prettier.singleQuote": false,

	// Number of spaces it should use per tab.
	"prettier.tabWidth": 2,

	// Controls the printing of trailing commas wherever possible. 
	// Valid options:
	// - `none` - No trailing commas
	// - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
	// - `all` - Trailing commas wherever possible (function arguments)
	"prettier.trailingComma": "es5",

	// Whether or not to take `.editorconfig` into account when parsing configuration. See the [`prettier.resolveConfig`](https://prettier.io/docs/en/api.html) docs for details.
	"prettier.useEditorConfig": true,

	// Indent lines with tabs.
	"prettier.useTabs": false,

	// Whether or not to indent the code inside `<script>` and `<style>` tags in Vue SFC files.
	"prettier.vueIndentScriptAndStyle": false,

	// This extension will process files in `node_modules`.
	"prettier.withNodeModules": false,

	// Set the languages that the extension will be activated.  e.g. ["html","xml","php"] By default, it is ["*"] and will be activated for all languages.
	"auto-rename-tag.activationOnLanguage": [
		"*"
	],

	// the trigger effect  on the language
	"shellformat.effectLanguages": [
		"shellscript",
		"dockerfile",
		"dotenv",
		"hosts",
		"jvmoptions",
		"ignore",
		"gitignore",
		"properties",
		"spring-boot-properties",
		"azcli",
		"bats"
	],

	// shfmt -h to see detail usage, example: -p -bn -ci
	"shellformat.flag": null,

	// the shfmt fullpath  example[mac,linux] /usr/local/bin/shfmt  [windows] C:/bin/shfmt.exe   download from https://github.com/mvdan/sh/releases
	"shellformat.path": null,

	// Use EditorConfig for shfmt configuration
	"shellformat.useEditorConfig": false,

	// Shows or hides the menu item.
	"nesttypeorm.menu.controller": true,

	// Shows or hides the menu item.
	"nesttypeorm.menu.entity": true,

	// Shows or hides the menu item.
	"nesttypeorm.menu.full": true,

	// Shows or hides the menu item.
	"nesttypeorm.menu.module": true,

	// Shows or hides the menu item.
	"nesttypeorm.menu.service": true,

	// 
	"github.copilot.advanced": {},

	// Enable or disable auto triggering of Copilot completions for specified [languages](https://code.visualstudio.com/docs/languages/identifiers). You can still trigger suggestions manually using `Alt + \`
	"github.copilot.enable": {
		"*": true,
		"plaintext": false,
		"markdown": false,
		"scminput": false
	},

	// The currently selected completion model ID. To select from a list of available models, use the __"Change Completions Model"__ command or open the model picker (from the Copilot menu in the VS Code title bar, select __"Configure Code Completions"__ then __"Change Completions Model"__. The value must be a valid model ID. An empty value indicates that the default model will be used.
	"github.copilot.selectedCompletionModel": "",

	// 편집된 파일에 대한 진단을 자동으로 수정합니다.
	"github.copilot.chat.agent.autoFix": true,

	// '.github/copilot-instructions.md'의 코드 명령이 Copilot 요청에 추가되는지 여부를 제어합니다.
	// 
	// 참고: 명령은 짧고 간결하게 유지하세요. 잘못된 명령은 Copilot의 품질과 성능을 저하시킬 수 있습니다. Copilot 사용자 지정에 관해 [자세히 알아보세요](https://aka.ms/github-copilot-custom-instructions).
	"github.copilot.chat.codeGeneration.useInstructionFiles": true,

	// 활성화하면 사용자 지정 지침과 모드 지침이 사용자 메시지 대신 시스템 메시지에 추가됩니다.
	"github.copilot.chat.customInstructionsInSystemMessage": true,

	// Copilot이 응답해야 하는 로캘(예: 'en' 또는 'fr')을 지정합니다. 기본적으로 Copilot은 VS Code의 구성된 표시 언어 로캘을 사용하여 응답합니다.
	//  - auto: Use VS Code's configured display language
	//  - en: English
	//  - fr: français
	//  - it: italiano
	//  - de: Deutsch
	//  - es: español
	//  - ru: русский
	//  - zh-CN: 中文(简体)
	//  - zh-TW: 中文(繁體)
	//  - ja: 日本語
	//  - ko: 한국어
	//  - cs: čeština
	//  - pt-br: português
	//  - tr: Türkçe
	//  - pl: polski
	"github.copilot.chat.localeOverride": "auto",

	// 사용자가 '/explain'을 사용하고 활성 편집기에 선택 항목이 없는 경우 사용자에게 특정 기호 범위를 선택하라는 메시지를 표시할지 여부를 지정합니다.
	"github.copilot.chat.scopeSelection": false,

	// 터미널에서 채팅 쿼리를 열어야 하는 위치를 제어합니다.
	//  - chatView: 채팅 보기를 엽니다.
	//  - quickChat: 빠른 채팅을 엽니다.
	//  - terminal: 터미널 인라인 채팅 열기
	"github.copilot.chat.terminalChatLocation": "chatView",

	// '/new'를 사용할 때 관련 GitHub 프로젝트를 시작 프로젝트로 사용
	"github.copilot.chat.useProjectTemplates": true,

	// 사용 가능한 경우 Copilot 명령이 코드 작업으로 표시되는지 제어합니다.
	"github.copilot.editor.enableCodeActions": true,

	// 다음 NES(편집 제안)에서 공백 전용 변경을 허용할지 여부를 제어합니다.
	"github.copilot.nextEditSuggestions.allowWhitespaceOnlyChanges": true,

	// NES(다음 편집 제안)를 사용할지 여부입니다.
	// 
	// NES는 최근 변경 사항에 따라 다음 편집을 제안할 수 있습니다. 다음 편집 제안에 대해 [자세히 알아보세요](https://aka.ms/vscode-nes).
	"github.copilot.nextEditSuggestions.enabled": false,

	// NES(다음 편집 제안)를 통해 진단에 대한 수정 사항을 제공할지 여부입니다.
	"github.copilot.nextEditSuggestions.fixes": true,

	// Copilot이 이름 바꾸기에 대한 제안을 생성하는지 여부를 제어합니다.
	"github.copilot.renameSuggestions.triggerAutomatically": true,

	// Bring Your Own Key를 통해 액세스할 때 Ollama에 사용할 엔드포인트입니다. 기본값은 localhost입니다.
	"github.copilot.chat.byok.ollamaEndpoint": "http://localhost:11434",

	// '#codebase'를 사용할 때 에이전트 codesearch를 활성화할지 여부입니다.
	"github.copilot.chat.codesearch.enabled": false,

	// 터미널에서 'copilot-debug' 명령이 사용하도록 설정되었는지 여부입니다.
	"github.copilot.chat.copilotDebugCommand.enabled": true,

	// 코드 검토 에이전트를 활성화합니다.
	"github.copilot.chat.reviewAgent.enabled": true,

	// 현재 선택 항목에 대한 코드 검토를 활성화합니다.
	"github.copilot.chat.reviewSelection.enabled": true,

	// 현재 선택 항목에 대한 코드 검토를 제공하는 Copilot 요청에 추가될 명령 집합입니다.
	// 명령은 다음을 통해 제공될 수 있습니다. 
	// - 작업 영역의 파일: `{ "file": "fileName" }`
	// - 자연어 텍스트: `{ "text": "Use underscore for field names." }`
	// 
	// 참고: 지침을 짧고 명확하게 유지합니다. 잘못된 지침은 Copilot의 효율성을 저하할 수 있습니다.
	"github.copilot.chat.reviewSelection.instructions": [],

	// 패널 채팅에서 '/startDebugging' 의도를 사용하도록 설정합니다. 쿼리(있는 경우), 프로젝트 구조 등과 일치하도록 시작 구성을 생성하거나 찾습니다.
	"github.copilot.chat.startDebugging.enabled": true,

	// 활성화하면 Copilot은 에이전트 모드의 컨텍스트에 현재 활성 편집기의 이름을 포함합니다.
	"github.copilot.chat.agent.currentEditorContext.enabled": true,

	// Copilot이 에이전트 모드에서 응답을 생성하기 전에 요청에 대해 깊이 생각할 수 있는 사고 도구를 지원합니다.
	"github.copilot.chat.agent.thinkingTool": false,

	// 기본 프롬프트 대신 GPT 모델에 대한 실험적인 대체 프롬프트를 활성화합니다.
	"github.copilot.chat.alternateGptPrompt.enabled": false,

	// Configure custom Azure OpenAI models. Each key should be a unique model ID, and the value should be an object with model configuration including name, url, toolCalling, vision, maxInputTokens, and maxOutputTokens properties.
	"github.copilot.chat.azureModels": {},

	// 대신 지침 파일을 사용하세요. 자세한 내용은 https://aka.ms/vscode-ghcp-custom-instructions를 참조하세요.
	// 코드를 생성하는 Copilot 요청에 추가할 명령 집합입니다.
	// 명령은 다음에서 가져올 수 있습니다. 
	// - 작업 영역의 파일: '{ "file": "fileName" }'
	// - 자연어 텍스트: `{ "text": "Use underscore for field names." }`
	// 
	// 참고: 지침을 짧고 정확하게 유지합니다. 잘못된 지침은 Copilot의 품질과 성능을 저하시킬 수 있습니다.
	"github.copilot.chat.codeGeneration.instructions": [],

	// 커밋 메시지를 생성하는 Copilot 요청에 추가될 일련의 지침입니다.
	// 명령은 다음을 통해 제공될 수 있습니다. 
	// - 작업 영역의 파일: `{ "file": "fileName" }`
	// - 자연어 텍스트: `{ "text": "Use conventional commit message format." }`
	// 
	// 참고: 지침을 짧고 명확하게 유지합니다. 잘못된 지침은 Copilot의 품질과 성능을 저하시킬 수 있습니다.
	"github.copilot.chat.commitMessageGeneration.instructions": [],

	// Configure custom OpenAI-compatible models. Each key should be a unique model ID, and the value should be an object with model configuration including name, url, toolCalling, vision, maxInputTokens, and maxOutputTokens properties.
	"github.copilot.chat.customOAIModels": {},

	// 인라인 채팅 요청을 할 때 Copilot 요청과 함께 최근에 보고 편집한 파일을 포함할지 여부를 지정합니다.
	"github.copilot.chat.editor.temporalContext.enabled": false,

	// Copilot 편집 작업 집합에 대한 테스트 파일의 소스 파일을 제안할지 여부입니다.
	"github.copilot.chat.edits.suggestRelatedFilesForTests": true,

	// Copilot 편집 작업 집합에 대한 git 기록의 관련 파일을 제안할지 여부입니다.
	"github.copilot.chat.edits.suggestRelatedFilesFromGitHistory": true,

	// 편집할 때 Copilot 요청과 함께 최근에 보고 편집한 파일을 포함할지 여부를 요청합니다.
	"github.copilot.chat.edits.temporalContext.enabled": false,

	// 현재 테스트 검사 정보에서 다루지 않는 기호에 대한 '테스트 생성' 코드 렌즈를 표시합니다.
	"github.copilot.chat.generateTests.codeLens": false,

	// GPT-5 모델에 사용할 실험적인 대체 프롬프트를 지정합니다.
	"github.copilot.chat.gpt5AlternatePrompt": "default",

	// Grok Code 모델에 사용할 실험적 대체 프롬프트를 지정합니다.
	"github.copilot.chat.grokCodeAlternatePrompt": "default",

	// /fix 명령을 위해 TypeScript 언어 컨텍스트 공급자를 활성화합니다.
	"github.copilot.chat.languageContext.fix.typescript.enabled": false,

	// 인라인 채팅(생성 및 편집 모두)에 대해 TypeScript 언어 컨텍스트 공급자를 활성화합니다.
	"github.copilot.chat.languageContext.inline.typescript.enabled": false,

	// TypeScript 언어 컨텍스트 공급자에 대한 캐시 채우기 시간 제한(밀리초)입니다. 기본값은 500밀리초입니다.
	"github.copilot.chat.languageContext.typescript.cacheTimeout": 500,

	// 인라인 완성을 위해 TypeScript 언어 컨텍스트 공급자를 활성화합니다.
	"github.copilot.chat.languageContext.typescript.enabled": false,

	// 새 작업 영역 생성을 위해 [Context7](command:github.copilot.mcp.viewContext7) 도구를 사용하여 프로젝트를 스캐폴드할지 여부입니다.
	"github.copilot.chat.newWorkspace.useContext7": false,

	// 새 에이전트 작업 영역 생성을 활성화할지 여부입니다.
	"github.copilot.chat.newWorkspaceCreation.enabled": true,

	// Notebook 셀에서 다음 편집 제안을 생성하기 위해 향상된 접근 방식을 사용할지 여부를 제어합니다.
	"github.copilot.chat.notebook.enhancedNextEditSuggestions.enabled": false,

	// Copilot에서 실행 시 현재 실행 중인 셀을 뷰포트에 표시할지 여부를 제어합니다.
	"github.copilot.chat.notebook.followCellExecution.enabled": false,

	// 끌어오기 요청 제목 및 설명을 생성하는 Copilot 요청에 추가될 명령 집합입니다.
	// 명령은 다음을 통해 제공될 수 있습니다. 
	// - 작업 영역의 파일: `{ "file": "fileName" }`
	// - 자연어 텍스트: `{ "text": "Always include a list of key changes." }`
	// 
	// 참고: 명령은 짧고 간결하게 유지합니다. 잘못된 명령은 Copilot의 품질과 성능을 저하시킬 수 있습니다.
	"github.copilot.chat.pullRequestDescriptionGeneration.instructions": [],

	// 응답 API에 사용되는 추론 작업을 설정합니다. '#github.copilot.chat.useResponsesApi#'이 필요합니다.
	"github.copilot.chat.responsesApiReasoningEffort": "default",

	// 응답 API에 사용되는 추론 요약 스타일을 설정합니다. '#github.copilot.chat.useResponsesApi#'이 필요합니다.
	"github.copilot.chat.responsesApiReasoningSummary": "detailed",

	// '/tests' 생성 시 '/setupTests' 의도 및 프롬프트를 사용하도록 설정합니다.
	"github.copilot.chat.setupTests.enabled": true,

	// 컨텍스트 창이 채워질 경우 에이전트 대화 기록을 자동으로 요약할지 여부입니다.
	"github.copilot.chat.summarizeAgentConversationHistory.enabled": true,

	// 대신 지침 파일을 사용하세요. 자세한 내용은 https://aka.ms/vscode-ghcp-custom-instructions를 참조하세요.
	// 테스트를 생성하는 Copilot 요청에 추가할 명령 집합입니다.
	// 명령은 다음에서 가져올 수 있습니다. 
	// - 작업 영역의 파일: '{ "file": "fileName" }'
	// - 자연어 텍스트: `{ "text": "Use underscore for field names." }`
	// 
	// 참고: 지침을 짧고 정확하게 유지합니다. 잘못된 지침은 Copilot의 품질과 성능을 저하시킬 수 있습니다.
	"github.copilot.chat.testGeneration.instructions": [],

	// 지원되는 경우 채팅 완료 API 대신 응답 API를 사용합니다. 추론 및 추론 요약을 사용하도록 설정합니다.
	// 
	// **참고**: 일부 사용자에 대해 아직 활성화되지 않은 실험적 기능입니다.
	"github.copilot.chat.useResponsesApi": true,

	// 이 설정은 가상 도구를 사용해야 하는 도구 개수를 정의합니다. 가상 도구는 비슷한 도구 집합을 함께 그룹화하여 모델이 필요할 때 활성화할 수 있도록 합니다. 특정 도구 그룹은 낙관적으로 사전 활성화됩니다. 이 기능은 적극적으로 개발 중이며, 임곗값에 도달하면 도구 호출 성능이 저하될 수 있습니다.
	// 
	// 가상 도구를 비활성화하려면 '0'으로 설정하세요.
	"github.copilot.chat.virtualTools.threshold": 128,

	// 업스트림 리포지토리에서 주기적으로 가져올지를 지정합니다.
	"githubRepositories.autoFetch.enabled": true,

	// 업스트림 리포지토리에서 주기적으로 가져오는 간격(초)을 지정합니다.
	"githubRepositories.autoFetch.interval": 60,

	// 파일 시스템 작업에 tar 파일을 사용할지를 지정합니다.
	//  - always: 항상 tar 파일 사용
	//  - ifAvailable: 사용 가능한 경우 tar 파일 사용
	//  - never: tar 파일 사용 안 함
	"githubRepositories.experimental.fs.useTars": "ifAvailable",

	// 성능 테스트를 위해 트리 로드 프리페치를 시도할지를 지정합니다.
	"githubRepositories.experimental.prefetch": true,

	// 리포지토리당 캐시되는 최대 리포지토리 인덱스 수를 지정합니다. 각 참조에는 별도의 검색 인덱스가 필요합니다.
	"githubRepositories.indexing.cacheRepoLimit": 4,

	// 리포지토리 인덱스 캐시의 크기(MB)를 지정합니다. 검색 캐시는 확장의 전역 저장소 폴더에 있습니다.
	"githubRepositories.indexing.cacheSizeLimit": 100,

	// 명시적 요청 없이 다운로드할 리포지토리 인덱스 콘텐츠의 최대 크기(MB)입니다. 리포지토리 인덱스 콘텐츠를 자동으로 다운로드하지 않으려면 'null'/empty로 설정하고, 리포지토리 인덱스 콘텐츠를 다운로드하기 전에 항상 확인하려면 0으로 설정합니다.
	"githubRepositories.indexing.maxIndexSize": 50,

	// 인덱스 다운로드 진행률과 함께 팝업 알림을 표시할지 여부입니다. 비활성화할 경우 다운로드 진행률이 상태 표시줄에 표시됩니다.
	"githubRepositories.indexing.verboseDownloadNotification": true,

	// GitHub의 LFS 서버에서 Git LFS를 통해 추적된 파일을 확인할지 여부를 제어합니다.
	"githubRepositories.lfs.read.enabled": true,

	// Git LFS를 통해 추적된 파일을 GitHub의 LFS 서버에 커밋할지 여부를 제어합니다.
	"githubRepositories.lfs.write.enabled": true,

	// 이 설정은 사용되지 않습니다. 대신 'Developer: Set Log Level' 명령을 사용하여 로그 수준을 설정할 수 있습니다.
	// 
	"githubRepositories.logLevel": null,

	// The name of the repository's git remote that points to GitHub
	"github-actions.remote-name": "origin",

	// If this is set to true, use the auth provider for the GitHub Enterprise URL configured in `github-enterprise.uri`
	"github-actions.use-enterprise": false,

	// Auto-refresh pinned workflows. Note: this uses polling and counts against your GitHub API rate limit
	"github-actions.workflows.pinned.refresh.enabled": false,

	// Time to wait between calls to update pinned workflows in seconds
	"github-actions.workflows.pinned.refresh.interval": 30,

	// Workflows to show in the status bar, identified by their paths
	"github-actions.workflows.pinned.workflows": [],

	// Add line indentation around brackets(`{}`, `<>`, `[]`) in request body when pressing enter.
	"rest-client.addRequestBodyLineIndentationAroundBrackets": true,

	// Certificate paths for different hosts. The path can be absolute path or relative path(relative to workspace or current http file)
	"rest-client.certificates": {},

	// Decode escaped unicode characters in response body.
	"rest-client.decodeEscapedUnicodeCharacters": false,

	// If particular headers are omitted in request headers, these will be added as headers for each request.
	"rest-client.defaultHeaders": {
		"User-Agent": "vscode-restclient"
	},

	// Controls whether to add href link in previewed response for response whose size is larger than limit specified by `rest-client.largeResponseSizeLimitInMB`
	"rest-client.disableAddingHrefLinkForLargeResponse": true,

	// Controls whether to highlight response body for response whose size is larger than limit specified by `rest-client.largeResponseSizeLimitInMB`
	"rest-client.disableHighlightResonseBodyForLargeResponse": true,

	// Enable/disable custom variable references CodeLens in request file
	"rest-client.enableCustomVariableReferencesCodeLens": true,

	// Enable/disable sending request CodeLens in request file
	"rest-client.enableSendRequestCodeLens": true,

	// Send out anonymous usage data
	"rest-client.enableTelemetry": true,

	// Sets the environments and custom variables belongs to it, especially the special environment name '$shared' is used to create variables shared across all the individual environments (e.g., `{"$shared": {"version": "v1"}, "production": {"host": "api.example.com"}, "sandbox":{"host":"sandbox.api.example.com"}}`)
	"rest-client.environmentVariables": {
		"$shared": {}
	},

	// Excluded hosts when using using proxy settings
	"rest-client.excludeHostsForProxy": [],

	// Follow HTTP 3xx responses as redirects.
	"rest-client.followredirect": true,

	// Controls the font family used in the response preview
	"rest-client.fontFamily": null,

	// Controls the font size in pixels used in the response preview. When set to `0`, the value of `editor.fontSize` is used.
	"rest-client.fontSize": 0,

	// Controls the font weight used in the response preview
	"rest-client.fontWeight": "",

	// Form param encoding strategy for request body of `x-www-form-urlencoded`.
	//  - automatic: Detecting encoding or not automatically and do the encoding job if necessary
	//  - never: Treat provided request body as is, no encoding job will be applied
	//  - always: Use for the scenario that `automatic` option not working properly, e.g., some special characters(`+`) are not encoded correctly
	"rest-client.formParamEncodingStrategy": "automatic",

	// Set the response body size threshold of MB to identify whether a response is a so-called 'large response', only used when `rest-client.disableHighlightResonseBodyForLargeResponse` and/or `rest-client.disableAddingHrefLinkForLargeResponse` is set to true
	"rest-client.largeResponseBodySizeLimitInMB": 5,

	// The verbosity of logging in the REST output panel
	"rest-client.logLevel": "error",

	// Sets the custom mapping of mime type and file extension of saved response body (e.g., `{"application/atom+xml": "xml"}`)
	"rest-client.mimeAndFileExtensionMapping": {},

	// Response preview column option
	//  - current: Preview in the column of current request file
	//  - beside: previewing at the side of the current active column and the side direction depends on `workbench.editor.openSideBySideDirection` setting, either right or below the current editor column
	"rest-client.previewColumn": "beside",

	// Response preview output option
	//  - full: Response headers, body and status line
	//  - headers: Response headers and status line
	//  - body: Response body only
	//  - exchange: Whole HTTP exchange including both request and response
	"rest-client.previewOption": "full",

	// Preview response in untitled document if set to true, otherwise displayed in html view
	"rest-client.previewResponseInUntitledDocument": false,

	// Preview response panel will take focus after receiving response.
	"rest-client.previewResponsePanelTakeFocus": true,

	// Remember cookies for subsequent requests
	"rest-client.rememberCookiesForSubsequentRequests": true,

	// Show request name as the response tab title
	"rest-client.requestNameAsResponseTabTitle": false,

	// Show response in different tab
	"rest-client.showResponseInDifferentTab": false,

	// Suppress response body content type validation
	"rest-client.suppressResponseBodyContentTypeValidationWarning": false,

	// Timeout in milliseconds. 0 for infinity
	"rest-client.timeoutinmilliseconds": 0,

	// Enable/disable using filename from 'content-disposition' header, when saving response body
	"rest-client.useContentDispositionFilename": true,

	// Where to place commas for SELECT and GROUP BY clauses
	//  - before: Comma preceding each column
	//  - after: Comma following each column
	//  - tabular: Comma right-aligned to longest column line
	"Prettier-SQL.commaPosition": "after",

	// Strip whitespace around operators such as + or >=
	"Prettier-SQL.denseOperators": false,

	// Number of characters allowed in each line before breaking
	"Prettier-SQL.expressionWidth": 50,

	// Ignore user and workplace settings for `tabSize` and `insertSpaces` (uses `Prettier-SQL.tabSizeOverride#` and `#Prettier-SQL.insertSpacesOverride`)?
	"Prettier-SQL.ignoreTabSettings": false,

	// Where to place keywords
	//  - standard: Standard SQL format, with cascading indents
	//  - tabularLeft: Maintain space column between keyword and args, aligning keywords to left
	//  - tabularRight: Maintain space column between keyword and args, aligning keywords to right
	"Prettier-SQL.indentStyle": "standard",

	// Override for `insertSpaces` if `Prettier-SQL.ignoreTabSettings` is active
	"Prettier-SQL.insertSpacesOverride": true,

	// Whether to print keywords in ALL CAPS, lowercase, or preserve existing
	"Prettier-SQL.keywordCase": "preserve",

	// How many newlines to place between each query / statement
	"Prettier-SQL.linesBetweenQueries": 1,

	// Whether to break before or after AND and OR
	"Prettier-SQL.logicalOperatorNewline": "before",

	// Whether to place semicolon on its own line or on previous line
	"Prettier-SQL.newlineBeforeSemicolon": false,

	// Formats `sql` files in another SQL Flavour when no VSCode Language exists, such as the Microsoft PostgreSQL & MSSQL Extensions
	"Prettier-SQL.SQLFlavourOverride": "sql",

	// Override for `tabSize` if `Prettier-SQL.ignoreTabSettings` is active
	"Prettier-SQL.tabSizeOverride": 2,

	// Whether to right-align aliases to the longest line in the SELECT clause
	"Prettier-SQL.tabulateAlias": false,

	// Custom elements completion action as simple like `<feTurbulence />`, one item to one name
	"svg.completion.elementsActionAsSimple": [],

	// Indicates whether the Completion List of Emmet-styles is enabled.
	"svg.completion.emmet": false,

	// Specifies whether advanced items that are not commonly used are displayed in the AutoComplete list.
	"svg.completion.showAdvanced": false,

	// Specifies whether advanced items that are deprecated are displayed in the AutoComplete list.
	"svg.completion.showDeprecated": false,

	// adds attributes to an outer <svg> element (disabled by default)
	"svg.minify.addAttributesToSVGElement": false,

	// add classnames to an outer <svg> element (disabled by default)
	"svg.minify.addClassesToSVGElement": false,

	// cleanup attributes from newlines, trailing, and repeating spaces
	"svg.minify.cleanupAttrs": true,

	// remove or cleanup enable-background attribute when possible
	"svg.minify.cleanupEnableBackground": true,

	// remove unused and minify used IDs
	"svg.minify.cleanupIDs": true,

	// round numeric values in attributes that take a list of numbers (like viewBox or enable-background)
	"svg.minify.cleanupListOfValues": true,

	// round numeric values to the fixed precision, remove default px units
	"svg.minify.cleanupNumericValues": true,

	// collapse useless groups
	"svg.minify.collapseGroups": true,

	// convert colors (from rgb() to #rrggbb, from #rrggbb to #rgb)
	"svg.minify.convertColors": true,

	// convert non-eccentric <ellipse> to <circle>
	"svg.minify.convertEllipseToCircle": true,

	// convert Path data to relative or absolute (whichever is shorter), convert one segment to another, trim useless delimiters, smart rounding, and much more
	"svg.minify.convertPathData": true,

	// convert some basic shapes to <path>
	"svg.minify.convertShapeToPath": true,

	// convert styles into attributes
	"svg.minify.convertStyleToAttrs": true,

	// collapse multiple transforms into one, convert matrices to the short aliases, and much more
	"svg.minify.convertTransform": true,

	// move and merge styles from <style> elements to element style attributes
	"svg.minify.inlineStyles": true,

	// merge multiple Paths into one
	"svg.minify.mergePaths": true,

	// minify <style> elements content with CSSO
	"svg.minify.minifyStyles": true,

	// move elements' attributes to their enclosing group
	"svg.minify.moveElemsAttrsToGroup": true,

	// move some group attributes to the contained elements
	"svg.minify.moveGroupAttrsToElems": true,

	// prefix IDs and classes with the SVG filename or an arbitrary string
	"svg.minify.prefixIds": true,

	// removes attributes of elements that match a css selector (disabled by default)
	"svg.minify.removeAttributesBySelector": false,

	// remove attributes by pattern (disabled by default)
	"svg.minify.removeAttrs": false,

	// remove comments
	"svg.minify.removeComments": true,

	// remove <desc>
	"svg.minify.removeDesc": true,

	// remove width/height and add viewBox if it's missing (opposite to removeViewBox, disable it first) (disabled by default)
	"svg.minify.removeDimensions": false,

	// remove doctype declaration
	"svg.minify.removeDoctype": true,

	// remove editors namespaces, elements, and attributes
	"svg.minify.removeEditorsNSData": true,

	// remove arbitrary elements by ID or className (disabled by default)
	"svg.minify.removeElementsByAttr": false,

	// remove empty attributes
	"svg.minify.removeEmptyAttrs": true,

	// remove empty Container elements
	"svg.minify.removeEmptyContainers": true,

	// remove empty Text elements
	"svg.minify.removeEmptyText": true,

	// remove hidden elements
	"svg.minify.removeHiddenElems": true,

	// remove <metadata>
	"svg.minify.removeMetadata": true,

	// remove non-inheritable group's "presentation" attributes
	"svg.minify.removeNonInheritableGroupAttrs": true,

	// removes elements that are drawn outside of the viewbox (disabled by default)
	"svg.minify.removeOffCanvasPaths": false,

	// remove raster images (disabled by default)
	"svg.minify.removeRasterImages": false,

	// remove <script> elements (disabled by default)
	"svg.minify.removeScriptElement": false,

	// remove <style> elements (disabled by default)
	"svg.minify.removeStyleElement": false,

	// remove <title>
	"svg.minify.removeTitle": true,

	// remove unknown elements content and attributes, remove attrs with default values
	"svg.minify.removeUnknownsAndDefaults": true,

	// remove unused namespaces declaration
	"svg.minify.removeUnusedNS": true,

	// remove elements of <defs> without id
	"svg.minify.removeUselessDefs": true,

	// remove useless stroke and fill attrs
	"svg.minify.removeUselessStrokeAndFill": true,

	// remove viewBox attribute when possible
	"svg.minify.removeViewBox": true,

	// removes xmlns attribute (for inline svg, disabled by default)
	"svg.minify.removeXMLNS": false,

	// remove XML processing instructions
	"svg.minify.removeXMLProcInst": true,

	// Find duplicated elements and replace them with links (disabled by default)
	"svg.minify.reusePaths": false,

	// sort element attributes for epic readability (disabled by default)
	"svg.minify.sortAttrs": false,

	// sort children of <defs> in order to improve compression
	"svg.minify.sortDefsChildren": true,

	// Show Grammar Highlight in path data
	"svg.pathDataHighlight": true,

	// Preview show fit mode at startup
	"svg.preview.autoFit": true,

	// Auto show preview on side when a SVG document open
	"svg.preview.autoShow": false,

	// Specifies the Svg Preview Background
	//  - editor: Editor Background
	//  - transparent: Transparent
	//  - dark-transparent: Dark Transparent
	//  - white: White
	//  - black: Black
	//  - custom: Custom
	"svg.preview.background": "editor",

	// Specifies the Svg Preview Custom Background
	"svg.preview.backgroundCustom": "#eee",

	// When you change the background color in the preview view, the new settings store the location
	//  - Global: Save new background in your global scope
	//  - Workspace: Save new background in your workspace
	//  - NoSave: Only temporarily changed, configuration will not be saved
	"svg.preview.backgroundSaveTo": "Workspace",

	// If you just want use other previewer
	"svg.preview.disable": false,

	// How show svg content in preview view
	//  - svg: SVG embedded in HTML
	//  - img: Show SVG in IMG element
	"svg.preview.mode": "svg",

	// The scale of change of the zoom operation
	"svg.preview.scaleZoom": 2,

	// Preview show cross line (will hide mouse pointer) by default, you can switch it from toolbar
	"svg.preview.showCrossLine": false,

	// Preview show ruler by default, you can switch it from toolbar
	"svg.preview.showRuler": false,

	// This SVG preview toolbar size
	"svg.preview.toolbarSize": "middle",

	// Svg Preview Auto Translate the external address to the Data URI, This option let Preview can show CROS content, but will not change real situation.
	"svg.preview.translateExternalAddress": false,

	// How the previewer interacts with the user
	//  - onlyOne: Only one preview window will be displayed
	//  - oneByOne: Each SVG document corresponds to a separate preview window
	"svg.preview.viewMode": "onlyOne",

	// Zoom select dropdown options
	"svg.preview.zoomOptions": [
		"25%",
		"50%",
		"100%",
		"200%",
		"400%",
		"800%"
	],

	// Exclude Glob pattern for `Preview All Svg`
	"svg.previewAll.exclude": "**​/node_modules/**",

	// When creating a hanging indent, do not put the closing bracket on its own line.
	"pythonIndent.keepHangingBracketOnLine": false,

	// Trims lines that contain only whitespace after pressing Enter on them.
	"pythonIndent.trimLinesWithOnlyWhitespace": false,

	// After creating a hanging indent, press tab to leave the indented section and go to the ending bracket.
	"pythonIndent.useTabOnHangingIndent": false,

	// Depreciated: This setting has been renamed to `git-graph.commitDetailsView.autoCenter`
	// Automatically center the commit details view when it is opened.
	"git-graph.autoCenterCommitDetailsView": true,

	// Depreciated: This setting has been renamed to `git-graph.referenceLabels.combineLocalAndRemoteBranchLabels`
	// Combine local and remote branch labels if they refer to the same branch, and are on the same commit.
	"git-graph.combineLocalAndRemoteBranchLabels": true,

	// Automatically center the Commit Details View when it is opened.
	"git-graph.commitDetailsView.autoCenter": true,

	// Render the File Tree in the Commit Details View in a compacted form, such that folders with a single child folder are compressed into a single combined folder element.
	"git-graph.commitDetailsView.fileView.fileTree.compactFolders": true,

	// Sets the default type of File View used in the Commit Details View. This can be overridden per repository using the controls on the right side of the Commit Details View.
	//  - File Tree: Display files in a tree structure.
	//  - File List: Display files in a list (useful for repositories with deep folder structures).
	"git-graph.commitDetailsView.fileView.type": "File Tree",

	// Specifies where the Commit Details View is rendered in the Git Graph View.
	//  - Inline: Show the Commit Details View inline with the graph & commits.
	//  - Docked to Bottom: Show the Commit Details View docked to the bottom of the Git Graph View.
	"git-graph.commitDetailsView.location": "Inline",

	// Depreciated: This setting has been renamed to `git-graph.commitDetailsView.fileView.fileTree.compactFolders`
	// Render the File Tree in the Commit Details / Comparison View in a compacted form, such that folders with a single child folder are compressed into a single combined folder element.
	"git-graph.commitDetailsViewFileTreeCompactFolders": true,

	// Depreciated: This setting has been renamed to `git-graph.commitDetailsView.location`
	// Specifies where the Commit Details View is rendered in the Git Graph view.
	//  - Inline: Show the Commit Details View inline with the graph
	//  - Docked to Bottom: Show the Commit Details View docked to the bottom of the Git Graph view
	"git-graph.commitDetailsViewLocation": "Inline",

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.order`
	// Specifies the order of commits on the Git Graph view. See [git log](https://git-scm.com/docs/git-log#_commit_ordering) for more information on each order option.
	//  - date: Show commits in the commit timestamp order.
	//  - author-date: Show commits in the author timestamp order.
	//  - topo: Avoid showing commits on multiple lines of history intermixed.
	"git-graph.commitOrdering": "date",

	// Customise which context menu actions are visible. For example, if you want to hide the rebase action from the branch context menu, a suitable value for this setting is `{ "branch": { "rebase": false } }`. For more information of how to configure this setting, view the documentation [here](https://github.com/mhutchie/vscode-git-graph/wiki/Extension-Settings#context-menu-actions-visibility).
	"git-graph.contextMenuActionsVisibility": {},

	// An array of Custom Branch Glob Patterns to be shown in the 'Branches' dropdown. Example: [{"name": "Feature Requests", "glob": "heads/feature/*"}]
	"git-graph.customBranchGlobPatterns": [],

	// An array of custom Emoji Shortcode mappings. Example: [{"shortcode": ":sparkles:", "emoji":"✨"}]
	"git-graph.customEmojiShortcodeMappings": [],

	// An array of custom Pull Request providers that can be used in the "Pull Request Creation" Integration. For information on how to configure this setting, see the documentation [here](https://github.com/mhutchie/vscode-git-graph/wiki/Configuring-a-custom-Pull-Request-Provider).
	"git-graph.customPullRequestProviders": [],

	// Specifies the date format to be used in the "Date" column on the Git Graph View.
	//  - Date & Time: Show the date and time (e.g. "24 Mar 2019 21:34")
	//  - Date Only: Show the date only (e.g. "24 Mar 2019")
	//  - ISO Date & Time: Show the ISO date and time (e.g. "2019-03-24 21:34")
	//  - ISO Date Only: Show the ISO date only (e.g. "2019-03-24")
	//  - Relative: Show relative times (e.g. "5 minutes ago")
	"git-graph.date.format": "Date & Time",

	// Specifies the date type to be displayed in the "Date" column on the Git Graph View.
	//  - Author Date: Use the author date of a commit.
	//  - Commit Date: Use the committer date of a commit.
	"git-graph.date.type": "Author Date",

	// Depreciated: This setting has been renamed to `git-graph.date.format`
	// Specifies the date format to be used in the "Date" column on the Git Graph View.
	//  - Date & Time: Show the date and time, for example "24 Mar 2019 21:34"
	//  - Date Only: Show the date only, for example "24 Mar 2019"
	//  - ISO Date & Time: Show the ISO date and time, for example "2019-03-24 21:34"
	//  - ISO Date Only: Show the ISO date only, for example "2019-03-24"
	//  - Relative: Show relative times, for example "5 minutes ago"
	"git-graph.dateFormat": "Date & Time",

	// Depreciated: This setting has been renamed to `git-graph.date.type`
	// Specifies the date type to be displayed in the "Date" column on the Git Graph View.
	//  - Author Date: Use the author date of a commit
	//  - Commit Date: Use the committer date of a commit
	"git-graph.dateType": "Author Date",

	// An object specifying the default visibility of the Date, Author & Commit columns. Example: {"Date": true, "Author": true, "Commit": true}
	"git-graph.defaultColumnVisibility": {
		"Date": true,
		"Author": true,
		"Commit": true
	},

	// Depreciated: This setting has been renamed to `git-graph.commitDetailsView.fileView.type`
	// Sets the default type of File View used in the Commit Details / Comparison Views. This can be overridden per repository using the controls on the right side of the Commit Details / Comparison Views.
	//  - File Tree: Display files in a tree structure
	//  - File List: Display files in a list (useful for repositories with deep folder structures)
	"git-graph.defaultFileViewType": "File Tree",

	// Default state of the field indicating whether the tag should be pushed to a remote once it is added.
	"git-graph.dialog.addTag.pushToRemote": false,

	// Default type of the tag being added.
	"git-graph.dialog.addTag.type": "Annotated",

	// Default state of the "Reinstate Index" checkbox.
	"git-graph.dialog.applyStash.reinstateIndex": false,

	// Default state of the "No Commit" checkbox.
	"git-graph.dialog.cherryPick.noCommit": false,

	// Default state of the "Record Origin" checkbox.
	"git-graph.dialog.cherryPick.recordOrigin": false,

	// Default state of the "Check out" checkbox.
	"git-graph.dialog.createBranch.checkOut": false,

	// Default state of the "Force Delete" checkbox.
	"git-graph.dialog.deleteBranch.forceDelete": false,

	// Default state of the "Force Fetch" checkbox.
	"git-graph.dialog.fetchIntoLocalBranch.forceFetch": false,

	// Default state of the "Prune" checkbox.
	"git-graph.dialog.fetchRemote.prune": false,

	// Default state of the "Prune Tags" checkbox.
	"git-graph.dialog.fetchRemote.pruneTags": false,

	// Specifies a substitution that is automatically performed when space characters are entered or pasted into reference inputs on dialogs (e.g. Create Branch, Add Tag, etc.).
	//  - None: Don't replace spaces.
	//  - Hyphen: Replace space characters with hyphens, for example: "new branch" -> "new-branch".
	//  - Underscore: Replace space characters with underscores, for example: "new branch" -> "new_branch".
	"git-graph.dialog.general.referenceInputSpaceSubstitution": "None",

	// Default state of the "No Commit" checkbox.
	"git-graph.dialog.merge.noCommit": false,

	// Default state of the "Create a new commit even if fast-forward is possible" checkbox.
	"git-graph.dialog.merge.noFastForward": true,

	// Default state of the "Squash Commits" checkbox.
	"git-graph.dialog.merge.squashCommits": false,

	// Specifies the message format used for the squashed commit (when the "Squash Commits" option is selected).
	//  - Default: Use the squash message generated by Git Graph.
	//  - Git SQUASH_MSG: Use the detailed squash message generated by Git (stored in .git/SQUASH_MSG).
	"git-graph.dialog.merge.squashMessageFormat": "Default",

	// Default state of the "Reinstate Index" checkbox.
	"git-graph.dialog.popStash.reinstateIndex": false,

	// Default state of the "Create a new commit even if fast-forward is possible" checkbox.
	"git-graph.dialog.pullBranch.noFastForward": false,

	// Default state of the "Squash Commits" checkbox.
	"git-graph.dialog.pullBranch.squashCommits": false,

	// Specifies the message format used for the squashed commit (when the "Squash Commits" option is selected).
	//  - Default: Use the squash message generated by Git Graph.
	//  - Git SQUASH_MSG: Use the detailed squash message generated by Git (stored in .git/SQUASH_MSG).
	"git-graph.dialog.pullBranch.squashMessageFormat": "Default",

	// Default state of the "Ignore Date (non-interactive rebase only)" checkbox.
	"git-graph.dialog.rebase.ignoreDate": true,

	// Default state of the "Launch Interactive Rebase in new Terminal" checkbox.
	"git-graph.dialog.rebase.launchInteractiveRebase": false,

	// Default mode to be used for the reset action.
	//  - Soft: Soft - Keep all changes, but reset head
	//  - Mixed: Mixed - Keep working tree, but reset index
	//  - Hard: Hard - Discard all changes
	"git-graph.dialog.resetCurrentBranchToCommit.mode": "Mixed",

	// Default mode to be used for the reset action.
	//  - Mixed: Mixed - Keep working tree, but reset index
	//  - Hard: Hard - Discard all changes
	"git-graph.dialog.resetUncommittedChanges.mode": "Mixed",

	// Default state of the "Include Untracked" checkbox.
	"git-graph.dialog.stashUncommittedChanges.includeUntracked": true,

	// Visual file change A|M|D|R|U indicators in the Commit Details View for users with colour blindness. In the future, this setting will enable any additional accessibility related features of Git Graph that aren't enabled by default.
	"git-graph.enhancedAccessibility": false,

	// Depreciated: This setting has been renamed to `git-graph.repository.fetchAndPrune`
	// Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any remote-tracking references that no longer exist on the remote(s).
	"git-graph.fetchAndPrune": false,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.fetchAvatars`
	// Fetch avatars of commit authors and committers. By enabling this setting, you consent to commit author and committer email addresses being sent GitHub, GitLab or Gravatar, depending on the repositories remote origin.
	"git-graph.fetchAvatars": false,

	// The character set encoding used when retrieving a specific version of repository files (e.g. in the Diff View). A list of all supported encodings can be found [here](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings).
	"git-graph.fileEncoding": "utf8",

	// Specifies the colours used on the graph.
	"git-graph.graph.colours": [
		"#0085d9",
		"#d9008f",
		"#00d90a",
		"#d98500",
		"#a300d9",
		"#ff0000",
		"#00d9cc",
		"#e138e8",
		"#85d900",
		"#dc5b23",
		"#6f24d6",
		"#ffcc00"
	],

	// Specifies the style of the graph.
	//  - rounded: Use smooth curves when transitioning between branches on the graph.
	//  - angular: Use angular lines when transitioning between branches on the graph.
	"git-graph.graph.style": "rounded",

	// Specifies how the Uncommitted Changes are displayed on the graph.
	//  - Open Circle at the Uncommitted Changes: Display the Uncommitted Changes as a grey open circle, connected to the commit referenced by HEAD with a solid grey line. The current file system's state is therefore always displayed as an open circle.
	//  - Open Circle at the Checked Out Commit: Display the Uncommitted Changes as a grey closed circle, connected to the commit referenced by HEAD with a dotted grey line. The commit referenced by HEAD is therefore always displayed as an open circle.
	"git-graph.graph.uncommittedChanges": "Open Circle at the Uncommitted Changes",

	// Depreciated: This setting has been renamed to `git-graph.graph.colours`
	// Specifies the colours used on the graph.
	"git-graph.graphColours": [
		"#0085d9",
		"#d9008f",
		"#00d90a",
		"#d98500",
		"#a300d9",
		"#ff0000",
		"#00d9cc",
		"#e138e8",
		"#85d900",
		"#dc5b23",
		"#6f24d6",
		"#ffcc00"
	],

	// Depreciated: This setting has been renamed to `git-graph.graph.style`
	// Specifies the style of the graph.
	//  - rounded: Use smooth curves when transitioning between branches on the graph
	//  - angular: Use angular lines when transitioning between branches on the graph
	"git-graph.graphStyle": "rounded",

	// Depreciated: This setting has been renamed to `git-graph.repository.includeCommitsMentionedByReflogs`
	// Include commits only mentioned by reflogs in the Git Graph View (only applies when showing all branches). This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.includeCommitsMentionedByReflogs": false,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.initialLoad`
	// Specifies the number of commits to initially load.
	"git-graph.initialLoadCommits": 300,

	// Specifies the path and filename of the Shell executable to be used by the Visual Studio Code Integrated Terminal, when it is opened by Git Graph. For example, to use Git Bash on Windows this setting would commonly be set to "C:\Program Files\Git\bin\bash.exe". If this setting is left blank, the default Shell is used.
	"git-graph.integratedTerminalShell": "",

	// The keybinding for the keyboard shortcut that opens the Find Widget in the Git Graph View.
	"git-graph.keyboardShortcut.find": "CTRL/CMD + F",

	// The keybinding for the keyboard shortcut that refreshes the Git Graph View.
	"git-graph.keyboardShortcut.refresh": "CTRL/CMD + R",

	// The keybinding for the keyboard shortcut that scrolls the Git Graph View to be centered on the commit referenced by HEAD.
	"git-graph.keyboardShortcut.scrollToHead": "CTRL/CMD + H",

	// The keybinding for the keyboard shortcut that scrolls the Git Graph View to the first (or next) stash in the loaded commits. The Shift Key Modifier can be applied to this keybinding to scroll the Git Graph View to the last (or previous) stash in the loaded commits.
	"git-graph.keyboardShortcut.scrollToStash": "CTRL/CMD + S",

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.loadMore`
	// Specifies the number of additional commits to load when the "Load More Commits" button is pressed, or more commits are automatically loaded.
	"git-graph.loadMoreCommits": 100,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.loadMoreAutomatically`
	// When the view has been scrolled to the bottom, automatically load more commits if they exist (instead of having to press the "Load More Commits" button).
	"git-graph.loadMoreCommitsAutomatically": true,

	// Parse and render a frequently used subset of inline Markdown formatting rules in commit messages and tag details (bold, italics, bold & italics, and inline code blocks).
	"git-graph.markdown": true,

	// Specifies the maximum depth of subfolders to search when discovering repositories in the workspace. Note: Sub-repos are not automatically detected when searching subfolders, however they can be manually added by running the command "Git Graph: Add Git Repository" in the Command Palette.
	"git-graph.maxDepthOfRepoSearch": 0,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead`
	// Display commits that aren't ancestors of the checked-out branch / commit with a muted text color. Muting will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
	"git-graph.muteCommitsThatAreNotAncestorsOfHead": false,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.mute.mergeCommits`
	// Display merge commits with a muted text color.
	"git-graph.muteMergeCommits": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.onlyFollowFirstParent`
	// Only follow the first parent of commits when discovering the commits to load in the Git Graph View. See [--first-parent](https://git-scm.com/docs/git-log#Documentation/git-log.txt---first-parent) to find out more about this setting.
	"git-graph.onlyFollowFirstParent": false,

	// Depreciated: This setting has been renamed to `git-graph.openNewTabEditorGroup`
	// Specifies which Editor Group the Visual Studio Code Diff View is opened in.
	//  - Active: Open the Visual Studio Code Diff View in the Active Editor Group.
	//  - Beside: Open the Visual Studio Code Diff View beside the Active Editor Group.
	//  - One: Open the Visual Studio Code Diff View in the First Editor Group.
	//  - Two: Open the Visual Studio Code Diff View in the Second Editor Group.
	//  - Three: Open the Visual Studio Code Diff View in the Third Editor Group.
	//  - Four: Open the Visual Studio Code Diff View in the Fourth Editor Group.
	//  - Five: Open the Visual Studio Code Diff View in the Fifth Editor Group.
	//  - Six: Open the Visual Studio Code Diff View in the Sixth Editor Group.
	//  - Seven: Open the Visual Studio Code Diff View in the Seventh Editor Group.
	//  - Eight: Open the Visual Studio Code Diff View in the Eighth Editor Group.
	//  - Nine: Open the Visual Studio Code Diff View in the Ninth Editor Group.
	"git-graph.openDiffTabLocation": "Active",

	// Specifies the Editor Group where Git Graph should open new tabs, when performing the following actions from the Git Graph View: Viewing the Visual Studio Code Diff View, Opening a File, Viewing a File at a Specific Revision.
	//  - Active: Open the new tab in the Active Editor Group.
	//  - Beside: Open the new tab beside the Active Editor Group.
	//  - One: Open the new tab in the First Editor Group.
	//  - Two: Open the new tab in the Second Editor Group.
	//  - Three: Open the new tab in the Third Editor Group.
	//  - Four: Open the new tab in the Fourth Editor Group.
	//  - Five: Open the new tab in the Fifth Editor Group.
	//  - Six: Open the new tab in the Sixth Editor Group.
	//  - Seven: Open the new tab in the Seventh Editor Group.
	//  - Eight: Open the new tab in the Eighth Editor Group.
	//  - Nine: Open the new tab in the Ninth Editor Group.
	"git-graph.openNewTabEditorGroup": "Active",

	// Depreciated: This setting has been renamed to `git-graph.repository.onLoad.scrollToHead`
	// When opening or switching repositories in the Git Graph View, automatically scroll the view to be centered on the commit referenced by HEAD. This will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
	"git-graph.openRepoToHead": false,

	// Open the Git Graph View to the repository containing the active Text Editor document.
	"git-graph.openToTheRepoOfTheActiveTextEditorDocument": false,

	// Depreciated: This setting has been renamed to `git-graph.referenceLabels.alignment`
	// Specifies how branch and tag reference labels are aligned for each commit.
	//  - Normal: Show branch & tag labels on the left of the commit message in the 'Description' column.
	//  - Branches (on the left) & Tags (on the right): Show branch labels on the left of the commit message in the 'Description' column, and tag labels on the right.
	//  - Branches (aligned to the graph) & Tags (on the right): Show branch labels aligned to the graph in the 'Graph' column, and tag labels on the right in the 'Description' column.
	"git-graph.referenceLabelAlignment": "Normal",

	// Specifies how branch and tag reference labels are aligned for each commit.
	//  - Normal: Show branch & tag labels on the left of the commit message in the 'Description' column.
	//  - Branches (on the left) & Tags (on the right): Show branch labels on the left of the commit message in the 'Description' column, and tag labels on the right.
	//  - Branches (aligned to the graph) & Tags (on the right): Show branch labels aligned to the graph in the 'Graph' column, and tag labels on the right in the 'Description' column.
	"git-graph.referenceLabels.alignment": "Normal",

	// Combine local and remote branch labels if they refer to the same branch, and are on the same commit.
	"git-graph.referenceLabels.combineLocalAndRemoteBranchLabels": true,

	// Fetch avatars of commit authors and committers. By enabling this setting, you consent to commit author and committer email addresses being sent GitHub, GitLab or Gravatar, depending on the repositories remote origin.
	"git-graph.repository.commits.fetchAvatars": false,

	// Specifies the number of commits to initially load.
	"git-graph.repository.commits.initialLoad": 300,

	// Specifies the number of additional commits to load when the "Load More Commits" button is pressed, or more commits are automatically loaded.
	"git-graph.repository.commits.loadMore": 100,

	// When the view has been scrolled to the bottom, automatically load more commits if they exist (instead of having to press the "Load More Commits" button).
	"git-graph.repository.commits.loadMoreAutomatically": true,

	// Display commits that aren't ancestors of the checked-out branch / commit with a muted text color. Muting will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
	"git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead": false,

	// Display merge commits with a muted text color.
	"git-graph.repository.commits.mute.mergeCommits": true,

	// Specifies the order of commits on the Git Graph View. See [git log](https://git-scm.com/docs/git-log#_commit_ordering) for more information on each order option. This can be overridden per repository via the Git Graph View's Column Header Context Menu.
	//  - date: Show commits in the commit timestamp order.
	//  - author-date: Show commits in the author timestamp order.
	//  - topo: Avoid showing commits on multiple lines of history intermixed.
	"git-graph.repository.commits.order": "date",

	// Show the commit's signature status to the right of the Committer in the Commit Details View (only for signed commits). Hovering over the signature icon displays a tooltip with the signature details. Requires Git (>= 2.4.0) & GPG (or equivalent) to be installed on the same machine that is running Visual Studio Code.
	"git-graph.repository.commits.showSignatureStatus": false,

	// Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any remote-tracking references that no longer exist on the remote(s).
	"git-graph.repository.fetchAndPrune": false,

	// Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any local tags that no longer exist on the remote(s). Requires Git >= 2.17.0, and the "Repository: Fetch And Prune" setting to be enabled. Caution: If you work in repositories that have multiple remotes, it is not recommended to use this setting (instead you can prune tags for a specific remote via "Fetch Remote" Dialog from the Repository Settings Widget on the Git Graph View).
	"git-graph.repository.fetchAndPruneTags": false,

	// Include commits only mentioned by reflogs in the Git Graph View (only applies when showing all branches). This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.repository.includeCommitsMentionedByReflogs": false,

	// Automatically scroll the Git Graph View to be centered on the commit referenced by HEAD. This will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
	"git-graph.repository.onLoad.scrollToHead": false,

	// Show the checked out branch when a repository is loaded in the Git Graph View. This setting can be used in conjunction with "Repository > On Load: Show Specific Branches". Default: false (show all branches)
	"git-graph.repository.onLoad.showCheckedOutBranch": false,

	// Show specific branches when a repository is loaded in the Git Graph View. Branches can be specified as follows: A local branch name (e.g. `master`), a remote-tracking branch name prefixed with "remotes/" (e.g. `remotes/origin/master`), or a glob pattern defined in `git-graph.customBranchGlobPatterns` prefixed with "--glob=" (e.g. `--glob=heads/feature/*`). This setting can be used in conjunction with "Repository > On Load: Show Checked Out Branch". Default: [] (show all branches)
	"git-graph.repository.onLoad.showSpecificBranches": [],

	// Only follow the first parent of commits when discovering the commits to load in the Git Graph View. See [--first-parent](https://git-scm.com/docs/git-log#Documentation/git-log.txt---first-parent) to find out more about this setting. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.repository.onlyFollowFirstParent": false,

	// Show Commits that are only referenced by tags in Git Graph.
	"git-graph.repository.showCommitsOnlyReferencedByTags": true,

	// Show Remote Branches in Git Graph by default. This can be overridden per repository from the Git Graph View's Control Bar.
	"git-graph.repository.showRemoteBranches": true,

	// Show Remote HEAD Symbolic References in Git Graph (e.g. "origin/HEAD").
	"git-graph.repository.showRemoteHeads": true,

	// Show Stashes in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.repository.showStashes": true,

	// Show Tags in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.repository.showTags": true,

	// Show uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
	"git-graph.repository.showUncommittedChanges": true,

	// Show untracked files when viewing the uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
	"git-graph.repository.showUntrackedFiles": true,

	// Enables commit signing with GPG or X.509.
	"git-graph.repository.sign.commits": false,

	// Enables tag signing with GPG or X.509.
	"git-graph.repository.sign.tags": false,

	// Respect [.mailmap](https://git-scm.com/docs/git-check-mailmap#_mapping_authors) files when displaying author & committer names and email addresses.
	"git-graph.repository.useMailmap": false,

	// Specifies the order that repositories are sorted in the repository dropdown on the Git Graph View (only visible when more than one repository exists in the current Visual Studio Code Workspace).
	//  - Full Path: Sort repositories alphabetically by the full path of the repository.
	//  - Name: Sort repositories alphabetically by the name of the repository.
	//  - Workspace Full Path: Sort repositories according to the Visual Studio Code Workspace Folder order, then alphabetically by the full path of the repository.
	"git-graph.repositoryDropdownOrder": "Workspace Full Path",

	// Specifies if the Git Graph View's Visual Studio Code context is kept when the panel is no longer visible (e.g. moved to background tab). Enabling this setting will make Git Graph load significantly faster when switching back to the Git Graph tab, however has a higher memory overhead.
	"git-graph.retainContextWhenHidden": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.showCommitsOnlyReferencedByTags`
	// Show commits that are only referenced by tags in Git Graph.
	"git-graph.showCommitsOnlyReferencedByTags": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.onLoad.showCheckedOutBranch`
	// Show the current branch by default when Git Graph is opened. Default: false (show all branches)
	"git-graph.showCurrentBranchByDefault": false,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.showSignatureStatus`
	// Show the commit's signature status to the right of the Committer in the Commit Details View (only for signed commits). Hovering over the signature icon displays a tooltip with the signature details. Requires Git (>= 2.4.0) & GPG (or equivalent) to be installed on the same machine that is running Visual Studio Code.
	"git-graph.showSignatureStatus": false,

	// Show a Status Bar Item that opens the Git Graph View when clicked.
	"git-graph.showStatusBarItem": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.showTags`
	// Show Tags in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.showTags": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.showUncommittedChanges`
	// Show uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
	"git-graph.showUncommittedChanges": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.showUntrackedFiles`
	// Show untracked files when viewing the uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
	"git-graph.showUntrackedFiles": true,

	// Specifies where the "View Git Graph" action appears on the title of SCM Providers.
	//  - Inline: Show the 'View Git Graph' action on the title of SCM Providers
	//  - More Actions: Show the 'View Git Graph' action in the 'More Actions...' menu on the title of SCM Providers
	"git-graph.sourceCodeProviderIntegrationLocation": "Inline",

	// Specifies the colour theme of the icon displayed on the Git Graph tab.
	//  - colour: Show a colour icon which suits most Visual Studio Code colour themes
	//  - grey: Show a grey icon which suits Visual Studio Code colour themes that are predominantly grayscale
	"git-graph.tabIconColourTheme": "colour",

	// Depreciated: This setting has been renamed to `git-graph.repository.useMailmap`
	// Respect [.mailmap](https://git-scm.com/docs/git-check-mailmap#_mapping_authors) files when displaying author & committer names and email addresses.
	"git-graph.useMailmap": false,

	// 
	"http.client": {},

	// Command templates for container attach commands.
	"containers.commands.attach": "${containerCommand} exec -it ${containerId} ${shellCommand}",

	// Command template(s) for container build commands.
	"containers.commands.build": "${containerCommand} build --pull --rm -f \"${dockerfile}\" -t ${tag} \"${context}\"",

	// Command templates for compose down commands.
	"containers.commands.composeDown": [
		{
			"label": "Compose Down",
			"template": "${composeCommand} ${configurationFile} down"
		}
	],

	// Command templates for compose down (subset) commands.
	"containers.commands.composeDownSubset": [
		{
			"label": "Compose Down",
			"template": "${composeCommand} ${profileList} ${configurationFile} down ${serviceList}"
		}
	],

	// Command templates for compose up commands.
	"containers.commands.composeUp": [
		{
			"label": "Compose Up",
			"template": "${composeCommand} ${configurationFile} up ${detached} ${build}"
		}
	],

	// Command templates for compose up (subset) commands.
	"containers.commands.composeUpSubset": [
		{
			"label": "Compose Up",
			"template": "${composeCommand} ${profileList} ${configurationFile} up ${detached} ${build} ${serviceList}"
		}
	],

	// Command templates for container logs commands.
	"containers.commands.logs": "${containerCommand} logs --tail 1000 -f ${containerId}",

	// Command templates for container run commands.
	"containers.commands.run": "${containerCommand} run --rm -d ${exposedPorts} ${tag}",

	// Command templates for container run (interactive) commands.
	"containers.commands.runInteractive": "${containerCommand} run --rm -it ${exposedPorts} ${tag}",

	// Set to true to include --build option when compose command is invoked
	"containers.composeBuild": true,

	// Command to use for compose actions (e.g. `docker-compose`, `docker compose`, etc. command). If the executable path contains whitespace, it needs to be quoted appropriately. If unset, the extension will attempt to auto-detect the command to use.
	"containers.composeCommand": "",

	// Set to true to include --d (detached) option when compose command is invoked
	"containers.composeDetached": true,

	// Which container client to use. If not specified, Docker will be used. Changing requires a restart to take effect.
	"containers.containerClient": "",

	// Command to use for container actions (e.g. `docker` command). If the executable path contains whitespace, it needs to be quoted appropriately. If unset, the extension will attempt to auto-detect the command to use.
	"containers.containerCommand": "",

	// Any secondary properties to display for a container (an array). Possible elements include: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, RegistryAndPath, Repository, RepositoryName, RepositoryNameShort, RepositoryNameAndTag, State, Status, and Tag
	"containers.containers.description": [
		"ContainerName",
		"Status"
	],

	// The property to use to group containers in Containers view: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, RegistryAndPath, Repository, RepositoryName, RepositoryNameShort, RepositoryNameAndTag, State, Status, Tag, or None
	"containers.containers.groupBy": "Compose Project Name",

	// The items will be grouped by the value of this container label (e.g. `com.microsoft.created-by`)
	"containers.containers.groupByLabel": "",

	// The primary property to display for a container: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, RegistryAndPath, Repository, RepositoryName, RepositoryNameShort, RepositoryNameAndTag, State, Status, or Tag
	"containers.containers.label": "FullTag",

	// The property to use to sort containers in the Containers view: CreatedTime or Label
	"containers.containers.sortBy": "CreatedTime",

	// Any secondary properties to display for a Docker context (an array). Possible elements include: Name, Description and DockerEndpoint
	"containers.contexts.description": [
		"Description"
	],

	// The primary property to display for a Docker context: Name, Description or DockerEndpoint
	"containers.contexts.label": "Name",

	// Show current Docker context in the status bar
	"containers.contexts.showInStatusBar": false,

	// Whether or not to enable the Compose Language Service. Changing requires a restart to take effect.
	"containers.enableComposeLanguageService": true,

	// Environment variables that will be applied to all VS Code terminals and to all background processes started by the Container Tools extension. Use for variables like `DOCKER_HOST`, etc.
	"containers.environment": {},

	// Build context PATH to pass to container build command.
	"containers.imageBuildContextPath": "",

	// Check for outdated base images once per Visual Studio Code session
	"containers.images.checkForOutdatedImages": true,

	// Any secondary properties to display for a container image (an array). Possible elements include: CreatedTime, FullTag, ImageId, Registry, RegistryAndPath, Repository, RepositoryName, RepositoryNameShort, RepositoryNameAndTag, Tag, and Size
	"containers.images.description": [
		"CreatedTime"
	],

	// The property to use to group images in Container Images view: CreatedTime, FullTag, ImageId, None, Registry, RegistryAndPath, Repository, RepositoryName, RepositoryNameShort, RepositoryNameAndTag, or Tag
	"containers.images.groupBy": "Repository",

	// The primary property to display for a image: CreatedTime, FullTag, ImageId, Registry, RegistryAndPath, Repository, RepositoryName, RepositoryNameShort, RepositoryNameAndTag, Tag, or Size
	"containers.images.label": "Tag",

	// The property to use to sort images in Container Images view: CreatedTime, Label, or Size
	"containers.images.sortBy": "CreatedTime",

	// Any secondary properties to display for a container network (an array). Possible elements include CreatedTime, NetworkDriver, NetworkId, and NetworkName
	"containers.networks.description": [
		"NetworkDriver",
		"CreatedTime"
	],

	// The property to use to group networks in Container Networks view: CreatedTime, NetworkDriver, NetworkId, NetworkName, or None
	"containers.networks.groupBy": "None",

	// The primary property to display for a container network: CreatedTime, NetworkDriver, NetworkId, or NetworkName
	"containers.networks.label": "NetworkName",

	// Show the built-in networks in the explorer.
	"containers.networks.showBuiltInNetworks": true,

	// The property to use to sort networks in Container Networks view: CreatedTime or Label
	"containers.networks.sortBy": "CreatedTime",

	// Which container orchestrator client to use. If not specified, Docker Compose will be used. Changing requires a restart to take effect.
	"containers.orchestratorClient": "",

	// Prompt for registry selection if the image is not explicitly tagged.
	"containers.promptForRegistryWhenPushingImages": true,

	// The path to use for scaffolding templates.
	"containers.scaffolding.templatePath": "",

	// Set to true to prompt to switch from "UI" extension mode to "Workspace" extension mode if an operation is not supported in UI mode.
	"containers.showRemoteWorkspaceWarning": true,

	// Set to true to truncate long image and container registry paths in Container Images view
	"containers.truncateLongRegistryPaths": false,

	// Maximum length of a registry paths displayed in Container Images view, including ellipsis. The truncateLongRegistryPaths setting must be set to true for truncateMaxLength setting to be effective.
	"containers.truncateMaxLength": 10,

	// Any secondary properties to display for a container volume (an array). Possible values include CreatedTime and VolumeName
	"containers.volumes.description": [
		"CreatedTime"
	],

	// The property to use to group volumes in Container Volumes view: CreatedTime, VolumeName, or None
	"containers.volumes.groupBy": "None",

	// The primary property to display for a container volume: CreatedTime or VolumeName
	"containers.volumes.label": "VolumeName",

	// The property to use to sort volumes in the Container Volumes view: CreatedTime or Label
	"containers.volumes.sortBy": "CreatedTime",

	// Controls the diagnostic severity for the deprecated MAINTAINER instruction
	"docker.languageserver.diagnostics.deprecatedMaintainer": "warning",

	// Controls the diagnostic severity for parser directives that are not written in lowercase
	"docker.languageserver.diagnostics.directiveCasing": "warning",

	// Controls the diagnostic severity for flagging empty continuation lines found in instructions that span multiple lines
	"docker.languageserver.diagnostics.emptyContinuationLine": "warning",

	// Controls the diagnostic severity for instructions that are not written in uppercase
	"docker.languageserver.diagnostics.instructionCasing": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple CMD instructions
	"docker.languageserver.diagnostics.instructionCmdMultiple": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple ENTRYPOINT instructions
	"docker.languageserver.diagnostics.instructionEntrypointMultiple": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple HEALTHCHECK instructions
	"docker.languageserver.diagnostics.instructionHealthcheckMultiple": "warning",

	// Controls the diagnostic severity for JSON instructions that are written incorrectly with single quotes
	"docker.languageserver.diagnostics.instructionJSONInSingleQuotes": "warning",

	// Controls the diagnostic severity for WORKDIR instructions that do not point to an absolute path
	"docker.languageserver.diagnostics.instructionWorkdirRelative": "warning",

	// Controls whether the Dockerfile formatter should ignore instructions that span multiple lines when formatting
	"docker.languageserver.formatter.ignoreMultilineInstructions": false,

	// Launch Microsoft Edge with specified args. (requires relaunching Visual Studio Code)
	"vscode-edge-devtools.browserArgs": [],

	// 
	//  - Default: Microsoft Edge Tools for VS Code will try to open the Microsoft Edge flavors in the following order: Stable, Beta, Dev and Canary
	//  - Stable: Microsoft Edge Tools for VS Code will use Microsoft Edge Stable version
	//  - Beta: Microsoft Edge Tools for VS Code will use Microsoft Edge Beta version
	//  - Dev: Microsoft Edge Tools for VS Code will use Microsoft Edge Dev version
	//  - Canary: Microsoft Edge Tools for VS Code will use Microsoft Edge Canary version
	"vscode-edge-devtools.browserFlavor": "",

	// The default entrypoint into your webpage. Used to resolve debugging urls without a pathname
	"vscode-edge-devtools.defaultEntrypoint": "index.html",

	// The default url to open when launching the browser without a target
	"vscode-edge-devtools.defaultUrl": "",

	// Launch Microsoft Edge in headless mode. (requires relaunching Visual Studio Code)
	"vscode-edge-devtools.headless": true,

	// The hostname on which to search for remote debuggable instances
	"vscode-edge-devtools.hostname": "localhost",

	// A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk
	"vscode-edge-devtools.pathMapping": {
		"/": "${workspaceFolder}"
	},

	// The port on which to search for remote debuggable instances
	"vscode-edge-devtools.port": 9222,

	// Show service and shared workers in the target list.
	"vscode-edge-devtools.showWorkers": false,

	// A set of mappings to override the locations of source map files.
	"vscode-edge-devtools.sourceMapPathOverrides": {
		"webpack:///./*": "${webRoot}/*",
		"webpack:///src/*": "${webRoot}/*",
		"webpack:///*": "*",
		"webpack:///./~/*": "${webRoot}/node_modules/*",
		"webpack://*": "${webRoot}/*",
		"meteor://💻app/*": "${webRoot}/*"
	},

	// Use JavaScript source maps (if they exist)
	"vscode-edge-devtools.sourceMaps": true,

	// The number of milliseconds that the Microsoft Edge Tools will keep trying to attach the browser before timing out
	"vscode-edge-devtools.timeout": 10000,

	// Should we request the remote target list using https rather than http
	"vscode-edge-devtools.useHttps": false,

	// By default, Microsoft Edge is launched with a separate user profile in a temp folder. Use this option to override the path. You can also set to false to launch with your default user profile instead.
	"vscode-edge-devtools.userDataDir": true,

	// Enable feedback from webhint on source files to improve accessibility, compatibility, security and more.
	"vscode-edge-devtools.webhint": true,

	// Turn off notification for webhint installation failures.
	"vscode-edge-devtools.webhintInstallNotification": false,

	// The absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk
	"vscode-edge-devtools.webRoot": "${workspaceFolder}",

	// Python 파일의 서식을 지정하기 위해 Black에 전달된 인수입니다. 각 인수는 배열에서 별도의 문자열로 제공되어야 합니다. 
	//  예: 
	//  `"black-formatter.args" = ["--config", "<file>"]`
	"black-formatter.args": [],

	// Python 파일의 서식을 Black으로 지정하는 데 사용되는 현재 작업 디렉터리를 설정합니다. 기본적으로 '${workspaceFolder}' 작업 영역의 루트 디렉터리를 사용합니다. '${fileDirname}'(으)로 설정하여 Black의 작업 디렉터리로 서식이 지정되는 파일의 부모 폴더를 사용할 수 있습니다.
	"black-formatter.cwd": "${workspaceFolder}",

	// Python 파일의 서식을 지정하는 데 사용할 Black 포맷터 이진을 정의합니다. 'useBundled'로 설정하면 확장은 확장과 함께 제공되는 Black 포맷터 이진을 사용합니다. 'fromEnvironment'로 설정하면 확장에서 현재 선택한 환경에서 사용할 수 있는 모든 종속성과 Black 포맷터 이진을 사용하려고 합니다. **참고**: 확장이 선택한 환경에서 유효한 Black 포맷터 이진을 찾을 수 없는 경우 확장과 함께 제공되는 이진을 사용하는 것으로 대체됩니다. 'black-formatter.path' 설정이 우선적으로 적용되고 'black-formatter.importStrategy'의 동작을 재정의합니다.
	//  - fromEnvironment: 선택한 Python 환경에서 Black 이진을 사용합니다. 확장이 유효한 Black 이진을 찾지 못하면 번들 버전의 Black을 사용하도록 대체됩니다.
	//  - useBundled: Python 파일의 서식을 지정하려면 항상 번들 버전의 Black을 사용하십시오.
	"black-formatter.importStrategy": "useBundled",

	// Black 서버 및 모든 하위 프로세스를 시작하는 데 사용할 Python 실행 파일 또는 명령의 경로입니다. 단일 또는 여러 문자열의 배열을 허용합니다. '[]'로 설정하면 확장에서 선택한 Python 인터프리터로의 경로를 사용합니다. 명령을 전달하는 경우 각 인수는 배열에서 별도의 문자열로 제공되어야 합니다.
	"black-formatter.interpreter": [],

	// 확장에서 Python 파일의 서식을 Black으로 지정하는 데 사용할 경로 또는 명령입니다. 단일 또는 여러 문자열의 배열을 허용합니다. 명령을 전달하는 경우 각 인수는 배열에서 별도의 문자열로 제공되어야 합니다. '["black"]'으로 설정하면 'PATH' 환경 변수에서 사용할 수 있는 Black 버전을 사용합니다. 참고: 이 옵션을 사용하면 서식 지정이 느려질 수 있습니다. 
	//   예: 
	//   - `["~/global_env/black"]` 
	//   - `["conda", "run", "-n", "lint_env", "python", "-m", "black"]`
	"black-formatter.path": [],

	// Black 서버에서 사용할 전송 프로토콜을 선택합니다. 'stdio'로 설정하면 확장에서 표준 입출력 스트림을 사용하여 Black 서버와 통신합니다. 'pipe'로 설정하면 확장에서 명명된 파이프(Windows) 또는 Unix 도메인 소켓(Linux/Mac)을 사용하여 Black 서버와 통신합니다. 'stdio' 전송 프로토콜은 대부분의 사용자에게 기본 및 권장 옵션입니다.
	//  - stdio: 표준 입출력 스트림을 사용하여 Black 서버와 통신합니다.
	//  - pipe: 명명된 파이프(Windows)와 Unix 도메인 소켓(Linux/Mac)을 사용하여 Black 서버와 통신합니다.
	"black-formatter.serverTransport": "stdio",

	// 이 확장에서 알림을 표시하는 시기를 제어합니다.
	//  - always: Python 파일의 서식을 지정할 때 서버에서 표시하도록 선택한 모든 항목에 대한 알림이 표시됩니다.
	//  - off: 모든 알림이 꺼져 있으며 Python 파일 서식을 지정할 때 발생하는 오류 또는 경고는 로그에서 계속 사용할 수 있습니다.
	//  - onError: 알림은 Python 파일의 서식을 지정할 때 오류가 발생한 경우에만 표시됩니다.
	//  - onWarning: Python 파일의 서식을 지정할 때 오류 및 경고에 대한 알림이 표시됩니다.
	"black-formatter.showNotifications": "off",

	// 디버깅할 때 사용자가 작성한 코드만 단계별로 실행합니다. 라이브러리 코드를 한 단계씩 실행할 수 있게 하려면 이 기능을 비활성화하세요.
	"debugpy.debugJustMyCode": true,

	// 디버깅하는 동안 편집기에서 인라인 값을 표시할지 여부를 지정합니다.
	"debugpy.showPythonInlineValues": false,

	// ActiveState 런타임(버전 0.36 이상)에 대한 상태 도구 실행 파일의 경로입니다.
	"python.activeStateToolPath": "state",

	// 자동 완성 엔진에서 가져와야 하는 라이브러리 등의 경로 목록입니다. 예를 들어 Google App SDK를 사용할 때 경로가 시스템 경로에 없으므로 이 목록에 추가해야 합니다.
	"python.autoComplete.extraPaths": [],

	// 활성화에 사용할 conda 실행 파일의 경로입니다(버전 4.4 이상).
	"python.condaPath": "",

	// 'requirements.txt' 또는 기타 종속성 파일의 편집기에서 환경 만들기 버튼을 표시하거나 숨깁니다.
	"python.createEnvironment.contentButton": "hide",

	// 현재 프로젝트에 환경 만들기가 필요한지 검색
	"python.createEnvironment.trigger": "prompt",

	// 확장이 처음 로드될 때 사용할 기본 Python의 경로이며, 작업 영역에 대한 인터프리터가 선택되면 더 이상 사용되지 않습니다. 언제 사용되는지 알아보려면 [여기](https://aka.ms/AAfekmf)를 참조하세요.
	"python.defaultInterpreterPath": "python",

	// 환경 변수 정의를 포함하는 파일의 절대 경로입니다.
	"python.envFile": "${workspaceFolder}/.env",

	// Python 확장에서 A/B 테스트 실험을 활성화합니다. 활성화하면 제안된 개선 사항 및/또는 기능에 포함될 수 있습니다.
	"python.experiments.enabled": true,

	// 선택할 실험 ​​목록입니다. 비어 있으면 사용자에게 기본 실험 그룹이 할당됩니다. 자세한 내용은 [here](https://github.com/microsoft/vscode-python/wiki/AB-Experiments)를 참조하세요.
	"python.experiments.optInto": [],

	// 선택 해제할 실험 목록입니다. 비어 있으면 사용자에게 기본 실험 그룹이 할당됩니다. 자세한 내용은 [here](https://github.com/microsoft/vscode-python/wiki/AB-Experiments)를 참조하세요.
	"python.experiments.optOutFrom": [],

	// 환경을 사용하지 않을 때 전역적으로 Python 모듈을 설치할지 여부입니다.
	"python.globalModuleInstallation": false,

	// 상태 표시줄에 선택한 인터프리터의 정보를 표시하는 경우를 제어합니다.
	//  - never: 정보를 표시하지 않습니다.
	//  - onPythonRelated: Python 관련 파일이 열려 있는 경우에만 정보를 표시합니다.
	//  - always: 항상 정보를 표시합니다.
	"python.interpreter.infoVisibility": "onPythonRelated",

	// 언어 서버의 유형을 정의합니다.
	//  - Default: 자동으로 언어 서버 선택: Pylance가 설치되어 있고 사용 가능한 경우, 그렇지 않으면 Jedi로 대체합니다.
	//  - Jedi: 언어 서버로 LSP(Language Server Protocol) 뒤에서 Jedi를 사용합니다.
	//  - Pylance: Pylance를 언어 서버로 사용하세요.
	//  - None: 언어 서버 기능을 비활성화합니다.
	"python.languageServer": "Default",

	// [실험적] 환경 로케이터의 구현을 선택합니다. 네이티브 환경 위치를 테스트하는 동안 실험적 설정입니다.
	"python.locator": "native",

	// 이 설정은 더 이상 사용되지 않습니다. 'Developer: Set Log Level...' 명령을 사용하여 로깅 수준을 설정하세요.
	// 확장 프로그램이 기록하는 로깅 수준, 기본값은 '오류'입니다.
	"python.logging.level": "error",

	// requirements.txt 또는 pyproject.toml에서 누락된 패키지의 심각도 설정
	"python.missingPackage.severity": "Hint",

	// 활성화에 사용할 pipenv 실행 파일의 경로입니다.
	"python.pipenvPath": "pipenv",

	// pixi 실행 파일의 경로입니다.
	"python.pixiToolPath": "pixi",

	// 시 실행 파일의 경로입니다.
	"python.poetryPath": "poetry",

	// Python REPL의 스마트 보내기를 토글합니다. 스마트 보내기를 사용하면 Shift+Enter로 실행 가능한 가장 작은 코드 블록을 REPL로 보낼 수 있으며 그에 따라 커서를 이동합니다.
	"python.REPL.enableREPLSmartSend": true,

	// 네이티브 REPL의 REPL 변수 뷰에 대한 변수를 제공하려면 토글합니다.
	"python.REPL.provideVariables": true,

	// 실행 시 터미널 대신 Python REPL로 코드를 보내도록 토글합니다. 이 기능을 켜면 상황에 맞는 메뉴에서 스마트 보내기 및 실행 선택/줄의 동작이 변경됩니다.
	"python.REPL.sendToNativeREPL": false,

	// 확장을 로드할 때 현재 터미널에서 Python 환경을 활성화합니다.
	"python.terminal.activateEnvInCurrentTerminal": false,

	// 만든 모든 터미널에서 Python 환경을 활성화합니다.
	"python.terminal.activateEnvironment": true,

	// 터미널에서 파일을 실행할 때 현재 열려 있는 폴더 대신 파일의 디렉터리에서 실행을 사용할지 여부입니다.
	"python.terminal.executeInFileDir": false,

	// Python 터미널을 시작할 때 터미널에 커서를 집중할지 여부를 지정합니다.
	"python.terminal.focusAfterLaunch": false,

	// 터미널에서 파일을 실행할 때 사용할 Python 시작 인수입니다.
	"python.terminal.launchArgs": [],

	// python을 실행하는 터미널에서 [셸 통합](https://code.visualstudio.com/docs/terminal/shell-integration)을 사용하도록 설정합니다. 셸 통합은 명령 장식 활성화, 최근 명령 실행, 접근성 향상 등으로 터미널 경험을 개선합니다. 참고: 셸 통합을 활성화하면 커서 들여쓰기 문제를 방지하기 위해 PyREPL(파이썬 3.13 이상에서 사용 가능)이 자동으로 비활성화됩니다.
	"python.terminal.shellIntegration.enabled": true,

	// 테스트 파일을 저장할 때 자동 실행 테스트 검색을 활성화합니다.
	"python.testing.autoTestDiscoverOnSaveEnabled": true,

	// autoTestDiscoverOnSaveEnabled에서 사용되는 파일을 결정하는 데 사용되는 Glob 패턴입니다.
	"python.testing.autoTestDiscoverOnSavePattern": "**/*.py",

	// 테스트를 위한 선택적 작업 디렉터리입니다.
	"python.testing.cwd": null,

	// 테스트 디버깅에 사용되는 포트 번호입니다.
	"python.testing.debugPort": 3000,

	// 잠재적인 테스트 디렉터리가 발견되면 테스트 프레임워크를 구성하라는 메시지를 표시합니다.
	"python.testing.promptToConfigure": true,

	// 전달된 인수입니다. 각 인수는 배열의 개별 항목입니다.
	"python.testing.pytestArgs": [],

	// pytest를 사용하여 테스트를 활성화합니다.
	"python.testing.pytestEnabled": false,

	// pytest의 경로. 전체 경로를 포함하도록 이 설정을 수정하여 사용자 지정 버전의 pytest를 사용할 수 있습니다.
	"python.testing.pytestPath": "pytest",

	// 전달된 인수입니다. 각 인수는 배열의 개별 항목입니다.
	"python.testing.unittestArgs": [
		"-v",
		"-s",
		".",
		"-p",
		"*test*.py"
	],

	// unittest를 사용하여 테스트를 활성화합니다.
	"python.testing.unittestEnabled": false,

	// Python 환경 확장을 활성화합니다. 변경 시 창을 다시 로드해야 합니다.
	"python.useEnvironmentsExtension": false,

	// 가상 환경을 조사할 홈 디렉터리의 폴더(기본적으로 pyenv, direnv 및 virtualenvwrapper 지원).
	"python.venvFolders": [],

	// 가상 환경 목록이 있는 폴더 경로(예: ~/.pyenv, ~/Envs, ~/.virtualenvs).
	"python.venvPath": "",

	// AI 지원 코드 작업을 활성화/비활성화합니다. Copilot Chat 확장 프로그램을 활성화해야 합니다.
	"python.analysis.aiCodeActions": {
		"implementAbstractClasses": true,
		"generateSymbol": true,
		"convertFormatString": true
	},

	// Enable/disable AI assistance to show copilot-generated summaries in the hover tooltip. This feature requires a GitHub Copilot Pro or Pro+ subscription.
	"python.analysis.aiHoverSummaries": false,

	// When typing a `{` in a string, automatically prefix the string with an `f`.
	"python.analysis.autoFormatStrings": false,

	// 자동 가져오기 완료를 사용하도록 설정합니다.
	"python.analysis.autoImportCompletions": false,

	// Python 코드를 입력할 때 언어 의미 체계에 따라 들여쓰기를 자동으로 조정합니다.
	"python.analysis.autoIndent": true,

	// `src`와 같은 일반 검색 경로를 자동으로 추가합니다.
	"python.analysis.autoSearchPaths": true,

	// 문자열을 분할할 때 따옴표 및 줄 연속 문자를 자동으로 추가합니다.
	"python.analysis.autoSplitStrings": true,

	// 빠른 완료를 위해 LSP 데이터를 캐시합니다. 
	// 
	// [실험적]으로 인해 Pylance의 작동이 중지될 수 있습니다.
	"python.analysis.cacheLSPData": false,

	// 함수 완성에 괄호를 추가합니다.
	"python.analysis.completeFunctionParens": false,

	// 진단을 표시하기 위한 분석 범위입니다.
	//  - openFilesOnly: Analyzes and reports errors on only open files.
	//  - workspace: Analyzes and reports errors on all files in the workspace.
	"python.analysis.diagnosticMode": "openFilesOnly",

	// 사용자가 개별 진단의 심각도 수준을 재정의할 수 있습니다. 
	// 
	// 규칙 이름을 키로 사용하고 `error`, `warning`, `information`, `none`, `true`(`error`의 별칭) 또는 `false`(`none`의 별칭) 중 하나를 값으로 사용합니다. 각 진단에 대해 표시되는 기본값은 `python.analysis.typeCheckingMode`가 `off`로 설정된 경우 기본값입니다. 각 형식 검사 모드(`off`, `basic` 및 `strict`)의 기본값은 [여기](https://github.com/microsoft/pyright/blob/main/docs/configuration.md#diagnostic-rule-defaults)를 참조하세요.
	"python.analysis.diagnosticSeverityOverrides": {},

	// 진단에 사용할 다른 언어 서버를 지정할 수 있습니다. Pylance는 결과를 이 다른 서버와 결합합니다.
	//  - Pylance: 진단에 Pylance를 사용합니다. (기본값)
	//  - Pyright: 진단에 Pyright를 사용합니다. Pylance 확장과 함께 제공되는 것과는 다른 Pyright를 실행할 수 있습니다.
	"python.analysis.diagnosticsSource": "Pylance",

	// 회색으로 표시된 텍스트 또는 취소선 텍스트에 특수 힌트를 사용하여 힌트 진단을 비활성화합니다.
	"python.analysis.disableTaggedHints": false,

	// VS Code 표시 언어와 관계없이 영어로 진단을 표시합니다.
	"python.analysis.displayEnglishDiagnostics": false,

	// 내부 형식 서버와의 비동기 통신을 활성화 또는 비활성화합니다. 내부용인 경우에 한해 Pylance의 작동이 중지될 수 있습니다.
	"python.analysis.enableAsyncProgram": false,

	// Enable/disable color picker in the editor for '#RRGGBB' and '#RRGGBBAA' strings.
	"python.analysis.enableColorPicker": true,

	// Python 3.13 이상을 사용하는 경우 [PEP 660](https://peps.python.org/pep-0660/) 설명된 대로 패키지의 편집 가능한 설치에 대한 지원을 사용하도록 설정합니다. 
	// 
	// [Experimental]. 내부에서만 사용하려면 Pylance가 작동하지 않을 수 있습니다.
	"python.analysis.enableEditableInstalls": true,

	// 원격 분석이 VS Code 사용하도록 설정된 경우 내부 성능 원격 분석을 사용하도록 설정합니다.
	"python.analysis.enablePerfTelemetry": false,

	// Enable/disable experimental precompute context. For internal use only, may cause Pylance to stop working.
	"python.analysis.enablePrecomputeContext": false,

	// Pylance에서 pytest 지원을 사용하도록 설정합니다.
	"python.analysis.enablePytestSupport": true,

	// 누락된 가져오기 문제를 해결하기 위해 빠른 수정 사용하거나 사용하지 않도록 설정합니다. 이 빠른 수정 Python 환경 확장을 설치하고 사용하도록 설정해야 합니다.
	"python.analysis.enableTroubleshootMissingImports": false,

	// 포함해서는 안 되는 디렉터리 또는 파일의 경로입니다. 이러한 디렉터리는 포함 디렉터리를 재정의하여 특정 하위 디렉터리를 제외할 수 있도록 합니다. 
	// 
	// 제외 경로의 파일은 제외되지 않은 원본 파일에서 참조(가져오기)되는 경우 분석에 계속 포함될 수 있습니다. 
	// 
	// 경로에는 와일드카드 문자 `**`(디렉터리 또는 여러 수준의 디렉터리), `*`(0개 이상의 문자 시퀀스) 또는 `?`가 포함될 수 있습니다. 
	// 
	// 제외 경로를 지정하지 않으면 Pylance는 `**/node_modules`, `**/__pycache__`, `.git` 및 모든 가상 환경 디렉터리를 자동으로 제외합니다. 경로에 `${workspaceFolder:<workspaceName>}` 변수가 포함된 경우 glob 패턴은 다중 루트 작업 영역 환경의 해당 작업 영역에만 적용됩니다.
	"python.analysis.exclude": [],

	// 해당하는 경우 '.', '('를 커밋 문자로 사용할 수 있습니다.
	"python.analysis.extraCommitChars": false,

	// 추가 가져오기 검색 확인 경로
	"python.analysis.extraPaths": [],

	// 모든 수정 사항에서 실행할 소스 수정 사항입니다.
	"python.analysis.fixAll": [],

	// 코드를 생성할 때 형식 주석을 추가합니다. 기본값은 형식 검사 모드 'off'의 경우 'false'이고 다른 모드의 경우 'true'로 설정됩니다.
	"python.analysis.generateWithTypeAnnotation": false,

	// 모듈 이름처럼 보이는 문자열 리터럴의 경우 정의로 이동하여 모듈로 이동할 수 있습니다.
	"python.analysis.gotoDefinitionInStringLiteral": true,

	// 포함된 파일이거나 포함된 파일의 전이적 닫기 내에 있더라도 진단 출력(오류 및 경고)을 표시하지 않아야 하는 디렉터리 또는 파일의 경로입니다. 
	// 
	// 경로에는 와일드카드 문자 `**`(디렉터리 또는 여러 수준의 디렉터리), `*`(0개 이상의 문자 시퀀스) 또는 `?`가 포함될 수 있습니다. 
	// 
	// 경로에 `${workspaceFolder:<workspaceName>}` 변수가 포함된 경우 glob 패턴은 다중 루트 작업 영역 환경의 해당 작업 영역에만 적용됩니다.
	"python.analysis.ignore": [],

	// 모듈을 가져오기 위한 기본 형식을 정의합니다.
	//  - absolute: Use absolute import format when creating new import statement.
	//  - relative: Use relative import format when creating new import statement.
	"python.analysis.importFormat": "absolute",

	// 포함해야 하는 디렉터리 또는 파일의 경로입니다. 경로를 지정하지 않으면 Pylance는 기본적으로 작업 영역 루트 디렉터리로 설정됩니다. 
	// 
	// 경로에는 와일드카드 문자 `**`(디렉터리 또는 여러 수준의 디렉터리), `*`(0개 이상의 문자 시퀀스) 또는 `?`가 포함될 수 있습니다. 
	// 
	// 경로에 `${workspaceFolder:<workspaceName>}` 변수가 포함된 경우 glob 패턴은 다중 루트 작업 영역 환경의 해당 작업 영역에만 적용됩니다.
	"python.analysis.include": [],

	// 사용자 파일의 별칭 기호를 포함합니다. 이렇게 하면 별칭 기호가 '가져오기 추가', '자동 가져오기'와 같은 기능에 표시됩니다.
	"python.analysis.includeAliasesFromUserFiles": false,

	// 자동 가져오기, 가져오기 추가, 작업 영역 기호 등과 같은 언어 기능에 대해 설치된 타사 라이브러리 및 사용자 파일의 인덱싱을 사용하도록 설정합니다.
	"python.analysis.indexing": true,

	// 호출 인수 이름에 대한 인레이 힌트를 사용하거나 사용하지 않도록 설정합니다:
	// ```python
	// datetime('year='2019, 'month='10, 'day='27)
	// ```
	// 
	//  - off: Disable inlay hints for call argument names.
	//  - partial: Enable inlay hints for positional-or-keyword arguments while ignoring positional-only and keyword-only.
	//  - all: Enable inlay hints for positional-or-keyword and positional-only arguments while ignoring keyword-only.
	"python.analysis.inlayHints.callArgumentNames": "off",

	// 함수 반환 형식에 대한 인레이 힌트를 사용하거나 사용하지 않도록 설정합니다:
	// ```python
	// def foo(x:int) '-> int':
	// 	return x
	// ```
	// 
	"python.analysis.inlayHints.functionReturnTypes": false,

	// pytest 함수 매개 변수 형식에 대한 인레이 힌트를 사용하거나 사용하지 않도록 설정합니다:
	// ```python
	// def test_foo(my_fixture: 'str'):
	// 	assert(my_fixture == 'foo')
	// ```
	// 
	"python.analysis.inlayHints.pytestParameters": false,

	// 변수 형식에 대한 인레이 힌트를 활성화/비활성화합니다. 리터럴 또는 상수 할당에 대한 힌트가 표시되지 않습니다:
	// ```python
	// foo':list[str]' = ["a"]
	//  
	// ```
	// 
	"python.analysis.inlayHints.variableTypes": false,

	// 설정에 대해 미리 정의된 값의 집합을 선택합니다. 자세한 내용은 [이 링크](https://aka.ms/languageserver-mode)를 확인하세요.
	//  - light: Pylance를 필수 작업만 수행하도록 설정해 경량으로 만듭니다. 어떤 설정이 어떤 값으로 설정되는지 정확히 알아보려면 설명의 링크를 참조하세요.
	//  - default: Pylance를 기본 설정으로 그대로 둡니다.
	//  - full: 기본적으로 Pylance 기능을 대부분 사용하도록 설정합니다. 어떤 설정이 어떤 값으로 설정되는지 정확히 알아보려면 설명의 링크를 참조하세요.
	"python.analysis.languageServerMode": "default",

	// 출력 패널에 대한 로깅 수준을 지정합니다.
	"python.analysis.logLevel": "Information",

	// 'python.analysis.nodeExecutable'이 설정되었을 때 언어 서버를 실행하는 데 사용할 Node.js 실행 파일에 전달할 추가 인수입니다. 기본값은 '--max_old_space_size=8192'입니다.
	"python.analysis.nodeArguments": [
		"--max-old-space-size=8192"
	],

	// 언어 서버를 실행하는 데 사용할 Node.js 실행 파일의 경로입니다. 지정하지 않으면 언어 서버는 VS Code와 함께 제공된 Node.js 실행 파일을 사용합니다. "자동"으로 설정하면 [nodejs](https://nodejs.org/dist/)에서 버전을 자동으로 다운로드합니다. Pylance에 메모리가 부족한 경우 이 옵션을 설정하세요. 자세한 내용은 [여기](https://aka.ms/AApf7ox)를 참조하세요.
	"python.analysis.nodeExecutable": "",

	// 설치된 패키지에서 패키지별로 인덱싱할 수준 수를 재정의하는 데 사용되었습니다. 기본적으로 최상위 모듈만 인덱싱됩니다(depth = 1). 하위 모듈을 인덱싱하려면 인덱싱하려는 하위 모듈의 각 수준에 대해 depth를 1씩 늘입니다. 허용되는 값은 다음과 같습니다.
	// ```JSON
	// {"name": "package name (str)",
	//  "depth": "depth to scan (int)",
	//  "includeAllSymbols": "whether to include all symbols (bool)"}
	// 
	// ```
	// 'includeAllSymbols'가 'false'로 설정된 경우 각 패키지의 '__all__'에 있는 기호만 포함됩니다. 'true'로 설정하면 Pylance는 파일의 모든 모듈/최상위 기호 선언을 인덱싱합니다.  
	//   
	// 사용 예제: 
	// ```JSON
	// [
	// 	{"name": "sklearn", "depth": 2, "includeAllSymbols": true},
	// 	{"name": "matplotlib", "depth": 3, "includeAllSymbols": false}
	// ]
	// 
	// ```
	// 
	"python.analysis.packageIndexDepths": [
		{
			"name": "sklearn",
			"depth": 2
		},
		{
			"name": "matplotlib",
			"depth": 2
		},
		{
			"name": "scipy",
			"depth": 2
		},
		{
			"name": "django",
			"depth": 2
		},
		{
			"name": "flask",
			"depth": 2
		},
		{
			"name": "fastapi",
			"depth": 2
		},
		{
			"name": "cuda",
			"depth": 3,
			"includeAllSymbols": true
		}
	],

	// 모든 타사 라이브러리에 대한 인덱스는 디스크에 유지됩니다.
	"python.analysis.persistAllIndices": true,

	// 진단에 사용할 Pyright 버전을 지정합니다. 허용되는 최소값은 1.1.397입니다. 이 설정은 'python.analysis.diagnosticsSource'가 'Ight'로 설정된 경우에만 사용됩니다. 
	// 
	// 이 값은 다음 중 하나일 수 있습니다.
	// - 버전 문자열 = 예: 1.1.397
	// - 로컬 pyright-langserver.js 파일에 대한 경로(1.1.397 이상에서 가져온 것이어야 함).
	"python.analysis.pyrightVersion": "",

	// 모든 Python 버전에 대해 공유 stdlib.json 인덱스에 의존하는 대신 각 작업 영역의 특정 Python 버전 및 플랫폼에 맞게 조정된 고유한 인덱스를 생성합니다. 이 다시 생성 프로세스는 미리 빌드된 stdlib 인덱스를 사용하는 것과 달리 성능에 영향을 줍니다.
	"python.analysis.regenerateStdLibIndices": false,

	// 추가 원격 분석 보고 [실험적]. 내부용으로만 Pylance 속도가 느려질 수 있습니다.
	"python.analysis.reportExtraTelemetry": false,

	// '자동 가져오기' 제안(있는 경우)에서 'requirements.txt' 또는 'pyproject.toml'에 선언된 직접 종속성만 표시합니다. 이는 완료를 위한 '자동 가져오기'에만 영향을 미칩니다. '가져오기 추가' 코드 작업은 가능한 모든 가져오기를 계속 표시합니다.
	"python.analysis.showOnlyDirectDependenciesInAutoImport": false,

	// 사용자 지정 형식 스텁 파일을 포함하는 디렉터리의 경로입니다.
	"python.analysis.stubPath": "typings",

	// Enable/disable reStructuredText docstring generation. Templates appear after typing opening triple quotes or via code action inside empty docstrings.
	"python.analysis.supportDocstringTemplate": false,

	// docstrings에서 reStructuredText 지원을 활성화/비활성화합니다.
	"python.analysis.supportRestructuredText": true,

	// 유형 검사 모드: Basic, Standard 및 Strict
	// 
	// | 기능                                   | Basic | Standard | Strict |
	// |------------------------------------------|:-----:|:--------:|:------:|
	// | 변수 형식 불일치                      |   ✅   |    ✅     |   ✅   |
	// | 함수 반환 형식 검사                   |   ✅   |    ✅     |   ✅   |
	// | 형식 축소 적용                        |       |    ✅     |   ✅   |
	// | `Any` 유형 확인                       |       |    ✅     |   ✅   |
	// | 개인/보호된 액세스 검사               |       |    ✅     |   ✅   |
	// | 더 엄격한 제네릭 사용법 적용          |       |    ✅     |   ✅   |
	// | 누락된 모든 형식 주석 보고         |       |          |   ✅   |
	// | `Any` 형식 사용 금지                  |       |          |   ✅   |
	// | 엄격한 형식 호환성 필요                |       |          |   ✅   |
	// | 완전한 형식 적용 범위 적용              |       |          |   ✅   |
	// 
	// 자세한 내용은 [Pyright documentation](https://microsoft.github.io/pyright/#/configuration?id=type-check-diagnostics-settings)를 확인하세요.
	//  - off: 잘못된 구문, 확인되지 않은 가져오기, 정의되지 않은 변수에 대한 진단을 표시합니다.
	//  - basic: `off` + `basic` 유형 검사 규칙의 모든 규칙입니다.
	//  - standard: `basic` + `standard` 유형 검사 규칙의 모든 규칙입니다.
	//  - strict: `standard` + `strict` 유형 검사 규칙의 모든 규칙입니다.
	"python.analysis.typeCheckingMode": "off",

	// 입력 매개 변수나 반환 형식에 대한 형식 주석이 없는 함수 및 메서드의 오류를 분석하고 보고합니다. 이 설정의 기본값은 'true'입니다.
	"python.analysis.typeEvaluation.analyzeUnannotatedFunctions": true,

	// [PEP 585](https://peps.python.org/pep-0585)는 제네릭을 지원하기 위해서만 도입된 표준 컬렉션의 형에 대한 별칭이 Python 3.9부터 더 이상 사용되지 않음을 나타냅니다. 이 스위치는 이러한 별칭을 더 이상 사용되지 않는 것으로 취급할지 여부를 제어합니다. 이는 pythonVersion이 3.9 이상인 경우에만 적용됩니다. 이 설정의 기본값은 'false'이지만 나중에 'true'로 전환될 수 있습니다.
	"python.analysis.typeEvaluation.deprecateTypingAliases": false,

	// `bytearray` 및 `memoryview`가 `bytes`의 하위 유형으로 간주되는 레거시 동작을 비활성화합니다. [PEP 688](https://peps.python.org/pep-0688/#no-special-meaning-for-bytes)에서 이 동작은 더 이상 사용되지 않지만 이전 동작을 복원하기 위해 이 스위치가 제공됩니다. 이 설정의 기본값은 'false'입니다.
	"python.analysis.typeEvaluation.disableBytesTypePromotions": false,

	// Python 입력 표준에 대한 제안 또는 탐색적 변경에 해당하는 실험적(대부분 문서화되지 않은) 기능 집합을 활성화합니다. 이러한 기능은 변경되거나 제거될 가능성이 있으므로 실험 목적 외에는 사용해서는 안 됩니다. 이 설정의 기본값은 `false`입니다.
	"python.analysis.typeEvaluation.enableExperimentalFeatures": false,

	// 활성화하면 형식 분석에서 도달할 수 없는 것으로 판단되는 코드가 태그가 지정된 힌트를 사용하여 보고됩니다. 이 설정은 형식 분석에 관계없이 연결할 수 없는 것으로 판단되는 코드에는 영향을 미치지 않으며, 이러한 코드는 항상 연결할 수 없는 것으로 보고됩니다. 이 설정은 연결할 수 없는 코드에 대해 태그가 지정된 힌트를 표시하지 않으므로 명령줄 버전의 pyright를 사용할 때도 적용되지 않습니다.
	"python.analysis.typeEvaluation.enableReachabilityAnalysis": false,

	// [PEP 484](https://peps.python.org/pep-0484)는 `# type: ignore` 주석에 대한 지원을 정의합니다. 이 스위치는 이러한 댓글에 대한 지원을 활성화 또는 비활성화합니다. 이 설정의 기본값은 `true`입니다. 이것은 `# pyright: ignore` 주석에는 영향을 미치지 않습니다.
	"python.analysis.typeEvaluation.enableTypeIgnoreComments": true,

	// 사전의 키와 값의 형식을 추론할 때는 엄격한 형식 가정을 사용하세요. 예를 들어 식 
	// 
	// ```python
	// {'a': 1, 'b': 'a'}
	// ```
	//  'dict[str, Any]' 또는 'dict[str, int | str]' 형식으로 유추될 수 있습니다. 이 설정이 true이면 후자(엄격한) 형식을 사용합니다. 이 설정의 기본값은 'false'입니다.
	"python.analysis.typeEvaluation.strictDictionaryInference": false,

	// When inferring the type of a list, use strict type assumptions. For example, the expression 
	// 
	// ```python
	// [1, 'a', 3.4]
	// ```
	//  could be inferred to be of type `list[Any]` or `list[int | str | float]`. If this setting is true, it will use the latter (stricter) type. The default value for this setting is `false`.
	"python.analysis.typeEvaluation.strictListInference": false,

	// [PEP 484](https://peps.python.org/pep-0484)는 함수 매개 변수에 기본값이 None으로 할당된 경우 명시적 형식이 아니더라도 해당 형식이 암시적으로 Optional이어야 함을 나타냅니다. 이 규칙을 활성화하면 이 경우 매개 변수 형식 주석이 Optional을 명시적으로 사용해야 합니다. 이 설정의 기본값은 `true`입니다.
	"python.analysis.typeEvaluation.strictParameterNoneValue": true,

	// When inferring the type of a set, use strict type assumptions. For example, the expression 
	// 
	// ```python
	// {1, 'a', 3.4}
	// ```
	//  could be inferred to be of type `set[Any]` or `set[int | str | float]`. If this setting is true, it will use the latter (stricter) type. The default value for this setting is `false`.
	"python.analysis.typeEvaluation.strictSetInference": false,

	// Arguments to pass to the type server. For internal use only, may cause Pylance to stop working.
	"python.analysis.typeServerArguments": [],

	// Path to a custom type server. For internal use only, may cause Pylance to stop working.
	"python.analysis.typeServerExecutable": "",

	// Paths to look for typeshed modules.
	"python.analysis.typeshedPaths": [],

	// 형식 스텁이 없는 경우 라이브러리 구현을 사용하여 형식 정보를 추출합니다.
	"python.analysis.useLibraryCodeForTypes": true,

	// 작업 영역에서 인덱싱할 최대 사용자 파일 수입니다. 파일 인덱싱은 성능 집약적인 작업입니다. 인덱싱할 파일 수를 제한하려면 이 설정을 사용하세요. -1을 입력하면 모든 파일을 인덱싱합니다.
	"python.analysis.userFileIndexingLimit": 2000,

	// 환경을 만들고 관리하기 위한 기본 환경 관리자입니다.
	"python-envs.defaultEnvManager": "ms-python.python:venv",

	// 환경에 패키지를 설치하기 위한 기본 패키지 관리자입니다.
	"python-envs.defaultPackageManager": "ms-python.python:pip",

	// Python 프로젝트 목록입니다.
	"python-envs.pythonProjects": [],

	// 확장이 터미널에서 환경을 활성화할 수 있는 방법을 지정합니다.
	// 
	// 셸 시작을 활용하려면 셸 스크립트 파일을 변경해야 하며 zsh, fsh, pwsh, bash, cmd 셸에 대해서만 사용하도록 설정됩니다. 'command'로 설정하면 모든 셸을 활성화할 수 있습니다.
	// 
	// 이 설정은 레거시 `python.terminal.activateEnvironment` 설정보다 우선 적용됩니다. 이 설정이 명시적으로 설정되지 않고 `python.terminal.activateEnvironment`가 false로 설정된 경우, 기본 설정을 유지하기 위해 이 설정은 자동으로 'off'로 설정됩니다.
	// 
	// 이 설정은 터미널이 생성될 때만 적용되므로 적용하려면 터미널을 다시 시작해야 합니다.
	// 
	// shellStartup 중에 변경한 내용을 되돌리려면 'Python Envs: 셸 시작 스크립트 변경 내용 되돌리기'를 실행합니다.
	//  - command: 터미널에서 명령을 실행하여 활성화합니다.
	//  - shellStartup: 터미널 셸 시작 스크립트를 수정하여 활성화합니다. 이 기능을 사용하려면 셸 시작 스크립트를 수정해야 합니다.
	//  - off: 환경의 자동 활성화가 없습니다.
	"python-envs.terminal.autoActivationType": "command",

	// 터미널 메뉴에 '활성화' 단추를 표시할지 여부
	"python-envs.terminal.showActivateButton": false,

	// 터미널에 .env 파일과 python.envFile 설정의 환경 변수를 주입할지 여부를 제어합니다.
	"python.terminal.useEnvFile": false,

	// 유효한 인증서가 없는 https Jupyter 서버에 대화형 창을 연결할 수 있도록 허용합니다. 이는 보안 위험이 될 수 있으므로 알려진 서버와 신뢰할 수 있는 서버에만 사용합니다.
	"jupyter.allowUnauthorizedRemoteConnection": false,

	// 커널을 다시 시작하기 전에 사용자에게 경고합니다.
	"jupyter.askForKernelRestart": true,

	// 매우 큰 데이터 프레임을 열기 전에 사용자에게 경고합니다.
	"jupyter.askForLargeDataFrames": true,

	// Jupyter 커널 언어로 자동 완성을 트리거하는 문자 매핑입니다. 다음은 rust 및 julia 커널 언어에 대한 트리거 문자의 예입니다.
	// ```json 
	// {
	//   "julia": ["."],
	//   "rust": [".",":"] 
	// }
	// ```
	"jupyter.completionTriggerCharacters": {
		"bash": [
			"$",
			"{"
		],
		"java": [
			".",
			"@",
			"#"
		],
		"javascript": [
			".",
			"\"",
			"'",
			"/",
			"@"
		],
		"python": [
			".",
			"%",
			"'",
			"\""
		],
		"julia": [
			"."
		],
		"r": [
			"[",
			"(",
			",",
			"$",
			"@",
			"\"",
			"'"
		],
		"rust": [
			".",
			":"
		],
		"scala": [
			"."
		],
		"typescript": [
			".",
			"\"",
			"'",
			"/",
			"@",
			"<"
		]
	},

	// 디버깅할 때 사용자가 작성한 코드만 단계별로 진행합니다. 라이브러리 코드를 한 단계씩 실행할 수 있게 하려면 이 기능을 비활성화하세요.
	"jupyter.debugJustMyCode": true,

	// 셀 디버깅을 위한 debugpy 비트의 경로입니다.
	"jupyter.debugpyDistPath": "",

	// true이면 Jupyter가 자동으로 시작되지 않도록 설정합니다. 대신 셀을 실행하여 Jupyter를 시작해야 합니다.
	"jupyter.disableJupyterAutoStart": false,

	// 이 설정은 jupyter.enableExtendedPythonKernelCompletions를 위해 사용되지 않습니다.
	// Python용 Python Jupyter 커널을 실행할 때 확장된 IntelliSense 완성을 위한 Jedi 지원을 사용하도록 설정합니다(이 [설정](https://ipython.readthedocs.io/en/stable/config/options/terminal.html?highlight=use_jedi#configtrait-Completer.use_jedi) 참조). 이 경우 Notebook 셀 실행 성능에 큰 영향을 미칠 수 있습니다. 주의해서 사용하세요.
	"jupyter.enableExtendedKernelCompletions": false,

	// Python용 Python Jupyter 커널을 실행할 때 확장된 IntelliSense 완성을 위한 Jedi 지원을 사용하도록 설정합니다(이 [설정](https://ipython.readthedocs.io/en/stable/config/options/terminal.html?highlight=use_jedi#configtrait-Completer.use_jedi) 참조). 이 경우 Notebook 셀 실행 성능에 큰 영향을 미칠 수 있습니다. 주의해서 사용하세요.
	"jupyter.enableExtendedPythonKernelCompletions": false,

	// 연결된 Jupyter 커널의 결과를 사용하여 Notebook 및 대화형 Windows에서 코드 완성을 사용하도록 설정합니다.
	"jupyter.enableKernelCompletions": true,

	// 시작하기 전에 커널에 PYTHONNOUSERSITE를 추가합니다. 이렇게 하면 전역/사용자 사이트 패키지가 커널의 PYTHONPATH에서 사용되지 않습니다.
	"jupyter.excludeUserSitePackages": false,

	// Experimental feature to enable execution analysis in notebooks
	"jupyter.executionAnalysis.enabled": false,

	// A/B 테스트를 사용하거나 사용하지 않도록 설정합니다.
	"jupyter.experiments.enabled": true,

	// 옵트인할 실험 목록입니다. 비어 있으면 사용자에게 기본 실험 그룹이 할당됩니다. [자세한 정보](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
	"jupyter.experiments.optInto": [],

	// 옵트아웃할 실험 목록입니다. 비어 있으면 사용자에게 기본 실험 그룹이 할당됩니다. [자세한 정보](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
	"jupyter.experiments.optOutFrom": [],

	// Python 파일을 Jupyter Notebook으로 내보낼 수 있도록 설정하고 이 작업을 수행할 때 모든 셀을 실행합니다.
	"jupyter.exportWithOutputEnabled": false,

	// 이 설정은 더 이상 사용되지 않으며 이후 릴리스에서 제거될 예정입니다.
	// 스택 프레임 링크를 전자 필기장의 저장된 추적 복구에 삽입합니다.
	"jupyter.formatStackTraces": false,

	// 코드 셀을 식별하는 데 사용되는 정규식입니다. 다음 일치까지의 모든 코드는 이 셀의 일부로 간주됩니다.
	"jupyter.interactiveWindow.cellMarker.codeRegex": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",

	// Python 파일에서 현재 활성 셀 또는 모든 셀 뒤에 강조 표시를 그립니다.
	"jupyter.interactiveWindow.cellMarker.decorateCells": "currentCell",

	// Python 파일에서 셀을 구분하는 데 사용되는 셀 표식입니다.
	"jupyter.interactiveWindow.cellMarker.default": "# %%",

	// markdown 셀을 식별하는 데 사용되는 정규식입니다. 이 식 뒤의 모든 주석은 markdown의 일부로 간주됩니다.
	"jupyter.interactiveWindow.cellMarker.markdownRegex": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",

	// 셀 위에 코드 렌즈로 배치할 명령 집합입니다.
	"jupyter.interactiveWindow.codeLens.commands": "jupyter.runcell, jupyter.runallcellsabove, jupyter.debugcell",

	// 디버깅하는 동안 셀 위에 코드 렌즈로 배치할 디버그 명령 집합입니다.
	"jupyter.interactiveWindow.codeLens.debugCommands": "jupyter.debugcontinue, jupyter.debugstop, jupyter.debugstepover",

	// Python 파일에서 '셀'에 대한 코드 렌즈를 사용하도록 설정합니다.
	"jupyter.interactiveWindow.codeLens.enable": true,

	// 셀을 실행한 후 셀에 'Goto' 코드 렌즈를 추가합니다. 모든 코드 렌즈를 사용하지 않도록 설정하면 이 코드 렌즈도 사용하지 않도록 설정됩니다.
	"jupyter.interactiveWindow.codeLens.enableGotoCell": true,

	// 대화형 창의 동작입니다. 'perFile'은 셀을 실행하는 모든 파일에 대해 새 대화형 창을 만듭니다. 'single'은 단일 창을 허용합니다. 'multiple'를 사용하면 다중 항목을 만들 수 있습니다.
	"jupyter.interactiveWindow.creationMode": "multiple",

	// 실험적. 대화형 창은 Notebook을 편집기 모델로 사용합니다.
	"jupyter.interactiveWindow.notebookRepl": false,

	// 대화형 창에서 실행되는 파일은 개별 셀이 있는 경우 해당 셀에서 실행됩니다.
	"jupyter.interactiveWindow.splitRunFileIntoCells": true,

	// 현재 마지막 셀을 실행할 때 대화형 창 파일에 빈 셀을 새로 추가합니다.
	"jupyter.interactiveWindow.textEditor.autoAddNewCell": true,

	// '셀 실행' 코드 렌즈를 클릭할 때 다음 셀로 이동할 수 있습니다.
	"jupyter.interactiveWindow.textEditor.autoMoveToNextCell": true,

	// Python 파일의 코드 셀에 폴딩 영역을 사용하도록 설정합니다. 이 설정을 사용하려면 VS Code를 다시 로드해야 합니다.
	"jupyter.interactiveWindow.textEditor.cellFolding": true,

	// Shift+Enter를 누르면 Python 파일에서 선택한 코드를 Python 터미널이 아닌 Jupyter 대화형 창으로 보냅니다.
	"jupyter.interactiveWindow.textEditor.executeSelection": false,

	// 코드 셀을 구문 분석할 때 주석 처리 셸 할당(#!), 선 매직(#!%) 및 셀 매직(#!%%)을 제거합니다.
	"jupyter.interactiveWindow.textEditor.magicCommandsAsComments": false,

	// 선택한 텍스트는 대화형 창에서 실행되기 전에 정규화됩니다.
	"jupyter.interactiveWindow.textEditor.normalizeSelection": false,

	// Python 파일과 연결되지 않은 대화형 창을 여는 위치입니다. 'beside'를 선택하면 활성 편집기의 오른쪽에 대화형 창이 열립니다. 'active'를 선택하면 활성 편집기 대신 대화형 창이 열립니다. 'secondGroup'을 선택하면 두 번째 편집기 그룹에서 대화형 창이 열립니다.
	"jupyter.interactiveWindow.viewColumn": "secondGroup",

	// Jupyter 서버가 시작되면 이러한 인수가 Jupyter Notebook CLI에 전달됩니다. 기본적으로 이 목록은 Jupyter 확장에 의해 생성됩니다.
	"jupyter.jupyterCommandLineArguments": [],

	// Jupyter 커널을 다시 시작하도록 요청하기 전에 인터럽트를 기다리는 시간(밀리초)입니다.
	"jupyter.jupyterInterruptTimeout": 10000,

	// Jupyter Notebook 연결을 시도하는 횟수
	"jupyter.jupyterLaunchRetries": 3,

	// Jupyter Notebook 서버가 시작될 때까지 기다리는 시간(밀리초)입니다.
	"jupyter.jupyterLaunchTimeout": 60000,

	// 커널 선택기에서 제외할 Python 환경 목록입니다.
	"jupyter.kernels.excludePythonEnvironments": [],

	// 신뢰할 수 있는 커널 사양 파일의 정규화된 경로를 입력합니다. 예: 'C:\Program Data\Jupyter\kernels\python3\kernel.json'.  
	// **참고**: 커널은 사용자 권한으로 코드를 실행할 수 있습니다. 자세한 내용은 [여기](https://aka.ms/JupyterTrustedKernelPaths)를 클릭하세요.
	"jupyter.kernels.trusted": [],

	// 확장 로그의 로깅 수준입니다.
	//  - off: 이 수준으로 기록된 메시지가 없습니다.
	//  - error: 오류 메시지만 이 수준으로 기록됩니다.
	//  - warn: 경고 및 오류 메시지가 이 수준으로 기록됩니다.
	//  - info: 정보, 경고 및 오류 메시지는 이 수준으로 기록됩니다.
	//  - debug: 디버그 및 심각도가 높은 메시지는 이 수준으로 기록됩니다.
	//  - trace: 모든 메시지는 이 수준으로 기록됩니다.
	"jupyter.logging.level": "info",

	// 커널/Jupyter 서버 콘솔 출력에 대한 별도의 출력 패널을 만듭니다.
	"jupyter.logKernelOutputSeparately": false,

	// Jupyter Notebook 및 대화형 창의 루트 디렉터리를 로컬에서 실행하도록 설정합니다.  
	// 
	// **참고:** 원격 Jupyter 커널에는 적용되지 않습니다.
	"jupyter.notebookFileRoot": "${fileDirname}",

	// 이 설정은 jupyter.completionTriggerCharacters를 위해 사용되지 않습니다.
	// Python Jupyter 커널에서 자동 완성을 트리거하는 문자입니다.
	"jupyter.pythonCompletionTriggerCharacters": ".%'\"",

	// Notebook을 Python 파일로 내보낼 때 사용할 메서드입니다. 'direct'는 코드를 있는 그대로 직접 복사합니다. 'commentMagics'는 선 매직(%), 셀 매직(%%) 및 셸 명령(!)으로 시작하는 줄을 주석 처리합니다. 'nbconvert'는 iPython 구문을 Python 구문으로 변환할 수 있는 변환에 대해 이 값을 사용하여 설치합니다.
	"jupyter.pythonExportMethod": "direct",

	// 일련의 Python 명령 또는 iPython 매직 명령입니다. 문자열 배열 또는 명령이 '\n'으로 구분된 단일 문자열일 수 있습니다. Jupyter 커널이 시작되거나 다시 시작될 때마다 명령이 자동으로 실행됩니다. 예를 들어, 이 명령을 '%load_ext autoreload'로 설정하고
	// %autoreload 2'을(를) 사용하면 Jupyter 커널을 다시 시작하지 않고도 가져온 파일에 대한 변경 사항을 자동으로 다시 로드할 수 있습니다.
	"jupyter.runStartupCommands": "",

	// Jupyter Notebook 도구 모음에 개요 단추를 표시합니다.
	"jupyter.showOutlineButtonInNotebookToolbar": true,

	// 실행 기준 세션을 시작할 때 변수 뷰를 표시합니다.
	"jupyter.showVariableViewWhenDebugging": false,

	// 셀을 디버깅할 때 첫 번째 줄에서 중지합니다.
	"jupyter.stopOnFirstLineWhileDebugging": true,

	// 대화형 창 및 Notebook 편집기 테마에서 matplotlib 출력은 VS Code 편집기 테마와 일치합니다.
	"jupyter.themeMatplotlibPlots": false,

	// Jupyter를 로컬로 실행하는 경우 빈 기본 Jupyter 구성을 만듭니다.
	"jupyter.useDefaultConfigForJupyter": true,

	// 대화형 변수 탐색기에 표시되지 않도록 제외할 형식
	"jupyter.variableExplorerExclude": "module;function;builtin_function_or_method;ABCMeta;type;ModelMetaclass",

	// 위젯에 대한 스크립트 파일이 다운로드되는 원본의 위치와 순서를 정의합니다(예: ipywidgets, bqplot, beakerx, ipyleaflet 등). 위젯을 선택하지 않으면 위젯이 제대로 렌더링되거나 작동하지 않을 수 있습니다. 자세한 내용은 [여기](https://aka.ms/PVSCIPyWidgets)를 참조하세요. 업데이트되면 커널을 다시 시작해야 합니다. 사용자 지정 값은 URL 템플릿으로 해석되며, 여기서는 다음과 같은 작업이 이뤄집니다. 
	// - `${packageName}`이 패키지 이름으로 대체됩니다. 
	// - `{fileName}`이 파일 이름으로 대체됩니다. 
	// - `${fileNameWithExt}`가 `.js` 확장명을 포함한 파일 이름으로 대체됩니다. 
	// - `${moduleVersion}`이 정확한 모듈 버전으로 대체됩니다. 
	// - `${moduleVersionSpec}`이 호환 가능한 버전 범위를 나타내기 위해 `^`를 포함할 수 있는 모듈 버전 지정자로 대체됩니다.
	"jupyter.widgetScriptSources": [],

	// The AAD authentication scope to use while requesting the bearer token
	"azureML - Remote.authenticationScope": "Default",

	// Prefer Jupyter terminal (if available) over Common Runtime terminal for connecting to Interactive Jobs
	"azureML - Remote.interactiveJobs.preferJupyterTerminal": true,

	// Ports to forward during connection to compute instance
	"azureML - Remote.portsToForward": [],

	// Experimental: Use VS Code Exec server for Compute instance connection
	"azureML-Remote.useExecServer": false,

	// Level of help to provide
	"jupyter.contextualHelp.detailLevel": "normal",

	// Enable the contextual help feature.
	"jupyter.contextualHelp.enabled": true,

	// Provides the ability to inspect messages sent to and from the kernel.
	"jupyter.inspectKernelMessages.enabled": false,

	// Enable the Kernel Management feature providing ability to start/stop/interrupt kernels.
	"jupyter.kernelManagement.enabled": true,

	// Enable the notebook run groups feature to provide commands to run groups of notebook cells.
	"jupyter.notebookRunGroups.enabled": true,

	// Count of run groups to show (0-3).
	"jupyter.notebookRunGroups.groupCount": 2,

	// Display group run icons in the cell execute dropdown.
	"jupyter.notebookRunGroups.runIconsInExecute": true,

	// Display group run icons on each cell toolbar.
	"jupyter.notebookRunGroups.runIconsOnCell": false,

	// Display group run icons on the global notebook editor toolbar.
	"jupyter.notebookRunGroups.runIconsOnEditorToolbar": true,

	// VS Code 서버와 확장을 캐시하는 데 Docker 볼륨을 사용해야 하는지 여부를 제어합니다.
	"dev.containers.cacheVolume": true,

	// Git 구성(`~/.gitconfig`)을 컨테이너에 복사할지 여부를 제어합니다. 이 작업은 `dotfiles.repository`를 설치한 후에 수행되며 기존 Git 구성 파일을 덮어쓰지 않습니다.
	"dev.containers.copyGitConfig": true,

	// 컨테이너를 생성하는 동안 항상 설치할 확장 목록을 구성합니다.
	"dev.containers.defaultExtensions": [],

	// 컨테이너를 생성하는 동안 항상 설치할 기능 목록을 구성합니다.
	"dev.containers.defaultFeatures": {},

	// Docker Compose 실행 파일 이름 또는 경로입니다.
	"dev.containers.dockerComposePath": "docker-compose",

	// 자격 증명 도우미가 dev 컨테이너의 Docker 구성(`~/.docker/config.json`)에서 `credStore`로 등록되어야 하는지 여부를 제어합니다. 이 작업은 구성 파일의 기존 `credStore` 항목을 덮어쓰지 않습니다.
	"dev.containers.dockerCredentialHelper": true,

	// Docker(또는 Podman) 실행 파일 이름 또는 경로입니다.
	"dev.containers.dockerPath": "docker",

	// Docker 소켓 경로입니다. 예를 들어 Docker 볼륨의 devcontainer.json을 사용하여 Dev 컨테이너에 연결할 때 사용됩니다.
	"dev.containers.dockerSocketPath": "/var/run/docker.sock",

	// CLI 명령이 항상 WSL에서 실행되어야 하는지 여부를 제어합니다. 기본값은 WSL의 작업 영역 폴더에 대해서만 WSL에서 실행하는 것입니다. 이 설정은 Windows 이외의 다른 플랫폼에는 영향을 주지 않습니다.
	"dev.containers.executeInWSL": false,

	// WSL 폴더를 다시 열지 않을 때 사용할 WSL 배포판입니다. 기본값은 기본 WSL 배포판을 사용하는 것입니다(`wsl -l` 참조). 이 설정은 `dev.containers.executeInWSL`이 활성화되지 않았거나 Windows 이외의 다른 플랫폼에 있는 경우에는 적용되지 않습니다.
	"dev.containers.executeInWSLDistro": "",

	// **실험적:** Apple 컨테이너화 컨테이너에 연결하기 위한 지원 활성화 macOS에서 `컨테이너` 명령을 사용할 수 있어야 합니다.
	"dev.containers.experimentalAppleContainerSupport": false,

	// 실험적인 devcontainer-lock.json을 작성해야 하는지 여부를 제어합니다. 이 기능은 실험적이며 향후 변경될 수 있습니다.
	"dev.containers.experimentalLockfile": false,

	// WSL의 서비스(SSH 에이전트, GPG 에이전트, X 디스플레이, Wayland 디스플레이)를 컨테이너로 전달할지 여부를 제어합니다. 이 설정은 Windows 이외의 다른 플랫폼에는 영향을 주지 않습니다.
	"dev.containers.forwardWSLServices": true,

	// Git 자격 증명 도우미에 대한 구성을 작성하는 위치입니다.
	//  - system: 시스템 구성에 쓰기(`/etc/gitconfig`, 루트 액세스 필요).
	//  - global: 사용자 구성(`~/.gitconfig`)에 씁니다.
	//  - none: 자격 증명 도우미를 설정하지 마세요.
	"dev.containers.gitCredentialHelperConfigLocation": "global",

	// 개발자 컨테이너에서 로컬 GitHub CLI의 토큰을 사용한 GitHub CLI 로그인을 활성화할지 여부를 제어합니다.
	"dev.containers.githubCLILoginWithToken": false,

	// 개발 컨테이너에 필요한 GPU의 가용성입니다.
	//  - all: 모든 GPU를 사용할 수 있습니다. 이 경우 호스트에 GPU가 있어야 합니다.
	//  - detect: 가용성은 자동으로 검색되어야 합니다.
	//  - none: 사용할 수 있는 GPU가 없습니다.
	"dev.containers.gpuAvailability": "detect",

	// 확장의 로그 수준입니다.
	"dev.containers.logLevel": "debug",

	// Wayland 소켓(있는 경우)을 개발 컨테이너에 탑재할지 여부를 제어합니다.
	"dev.containers.mountWaylandSocket": true,

	// 디먼이 아직 실행되고 있지 않은 경우 Docker 시작을 낙관적으로 시도합니다.
	"dev.containers.optimisticallyLaunchDocker": true,

	// [리포지토리 구성](https://code.visualstudio.com/docs/devcontainers/create-dev-container#_alternative-repository-configuration-folders)을 검색할 추가 경로 목록입니다.
	"dev.containers.repositoryConfigurationPaths": [],

	// 작업 영역 탑재에 사용되는 일관성 수준입니다(적용하려면 기존 컨테이너를 다시 빌드해야 함).
	//  - consistent: 완벽한 일관성.
	//  - cached: 호스트의 보기는 신뢰할 수 있습니다.
	//  - delegated: 컨테이너 뷰에 권한이 있습니다.
	"dev.containers.workspaceMountConsistency": "cached",

	// dotfiles 리포지토리를 복제한 후 실행할 명령입니다. 기본적으로 dotfiles 리포지토리의 루트 폴더에 있는 `install.sh`, `install`, `bootstrap.sh`, `bootstrap`, `setup.sh` 및 `setup`의 첫 번째 파일을 실행합니다.
	"dotfiles.installCommand": "",

	// dotfiles Git 리포지토리의 URL(예: https://github.com/owner/repository.git) 또는 GitHub 리포지토리의 소유자/리포지토리입니다.
	"dotfiles.repository": "",

	// dotfiles 리포지토리를 복제할 경로입니다. 기본값은 `~/dotfiles`입니다.
	"dotfiles.targetPath": "~/dotfiles",

	// 대신 `dev.containers.cacheVolume`을 사용하세요.
	// 
	"remote.containers.cacheVolume": null,

	// 대신 `dev.containers.copyGitConfig`를 사용하세요.
	// 
	"remote.containers.copyGitConfig": null,

	// 대신 `dev.containers.defaultExtensions`를 사용하세요.
	// 
	"remote.containers.defaultExtensions": null,

	// 대신 `dev.containers.dockerComposePath`를 사용하세요.
	// 
	"remote.containers.dockerComposePath": null,

	// 대신 `dev.containers.dockerPath`를 사용하세요.
	// 
	"remote.containers.dockerPath": null,

	// 대신 `dotfiles.installCommand`을 사용하세요.
	// 
	"remote.containers.dotfiles.installCommand": null,

	// 대신 `dotfiles.repository`을 사용하세요.
	// 
	"remote.containers.dotfiles.repository": null,

	// 대신 `dotfiles.targetPath`를 사용하세요.
	// 
	"remote.containers.dotfiles.targetPath": null,

	// 대신 `dev.containers.executeInWSL`을 사용하세요.
	// 
	"remote.containers.executeInWSL": null,

	// 대신 `dev.containers.executeInWSLDistro`을 사용하세요.
	// 
	"remote.containers.executeInWSLDistro": null,

	// 대신 `dev.containers.gitCredentialHelperConfigLocation`을 사용하세요.
	// 
	"remote.containers.gitCredentialHelperConfigLocation": null,

	// 대신 `dev.containers.logLevel`을 사용하세요.
	// 
	"remote.containers.logLevel": null,

	// 대신 `dev.containers.repositoryConfigurationPaths`를 사용하세요.
	// 
	"remote.containers.repositoryConfigurationPaths": null,

	// 대신 `dev.containers.workspaceMountConsistency`를 사용하세요.
	// 
	"remote.containers.workspaceMountConsistency": null,

	// 사용되지 않는 항목입니다. `remote.SSH.localServerDownload`를 사용하세요.
	// 호스트에서 VS Code 서버를 다운로드하지 못하면 확장이 클라이언트에서 다운로드하고 scp를 사용하여 호스트로 전송하도록 합니다.
	"remote.SSH.allowLocalServerDownload": true,

	// VS Code 서버가 원격 서버에서 바인딩할 호스트를 구성합니다. 기본값은 IPv4 localhost이며 고급 사례에서만 수정해야 합니다.
	"remote.SSH.bindHost": {},

	// 사용자 지정 SSH 구성 파일의 절대 파일 경로입니다.
	"remote.SSH.configFile": "",

	// 원격에 연결하는 SSH 명령에 사용되는 시간 제한(초)을 지정합니다.
	"remote.SSH.connectTimeout": 15,

	// 모든 SSH 호스트에 자동으로 설치될 확장 목록입니다.
	"remote.SSH.defaultExtensions": [],

	// 연결이 설정될 때 전달할 포트 목록입니다.
	"remote.SSH.defaultForwardedPorts": [],

	// 'ForwardAgent' SSH 구성 옵션이 VS Code의 원격 확장 호스트에서 예상대로 적용되도록 원격 환경 수정을 활성화합니다.
	"remote.SSH.enableAgentForwarding": true,

	// SSH 동적 전달을 사용하여 기존 SSH 연결을 통해 새 포트 터널을 설정하도록 허용할지를 지정합니다. 이 설정을 사용하는 경우 각 원격 창의 암호는 한 번만 입력하면 됩니다.
	"remote.SSH.enableDynamicForwarding": true,

	// **실험적:** ssh 구성 항목에서 RemoteCommands를 활성화합니다. `remote.SSH.useLocalServer#`가 활성화되어 있고, 연결하려는 원격이 `#remote.SSH.remotePlatform` 설정 아래에 없는 경우에만 활성화합니다.
	"remote.SSH.enableRemoteCommand": false,

	// 'ForwardX11' SSH 구성 옵션이 VS Code의 원격 확장 호스트에서 예상대로 적용되도록 원격 환경 수정을 활성화합니다.
	"remote.SSH.enableX11Forwarding": true,

	// 실험적 Copilot 채팅 참가자를 사용하도록 설정합니다.  자연어를 사용하여 원격 - SSH에 대해 알아보고 연결 문제를 진단합니다.  최상의 환경을 위해 VS Code 참가자를 사용하고 최신 Copilot 채팅 확장이 설치되어 있는지 확인합니다.
	"remote.SSH.experimental.chat": true,

	// 이전 세션에서 감지된 문제의 요약 테이블을 생성합니다.
	"remote.SSH.experimental.enhancedSessionLogs": true,

	// **실험:** 로컬 서버 모드에서(`remote.SSH.useLocalServer`로 활성화됨) 원격-SSH는 SSH_ASKPASS를 사용하여 VS Code를 인증 요청 처리를 위한 애플리케이션으로 설정합니다. 이렇게 하면 입력 확인 메시지가 VS Code 내부에 표시됩니다. 그러나 인증 처리 외부 애플리케이션이 있는 경우(예: YubiKey)에는 해당 애플리케이션에 SSH_ASKPASS를 설정하는 것이 좋습니다. 이 설정을 사용하면 원격-SSH가 기존 SSH_ASKPASS 값(있는 경우)을 재정의하지 않습니다.
	"remote.SSH.externalSSH_ASKPASS": false,

	// 'http_proxy' 환경 변수를 설정하세요.  이 변수는 원격 VS Code 서버의 설치와 시작에 사용됩니다. 모든 호스트에 설정할 문자열이나, 호스트당 구성이 있는 객체를 제공하세요. 이 설정을 적용하려면 원격의 기존 서버를 종료해야 합니다.
	"remote.SSH.httpProxy": "",

	// 'https_proxy' 환경 변수를 설정하세요.  이 변수는 원격 VS Code 서버의 설치와 시작에 사용됩니다. 모든 호스트에 설정할 문자열이나, 호스트당 구성이 있는 객체를 제공하세요. 이 설정을 적용하려면 원격의 기존 서버를 종료해야 합니다.
	"remote.SSH.httpsProxy": "",

	// 확장이 호스트에서 다운로드하는 대신 클라이언트에서 VS Code 서버를 다운로드하고 SCP를 사용하여 호스트로 전송할 수 있는지를 지정합니다.
	//  - auto: 서버가 먼저 호스트에서 다운로드되며, 서버 다운로드가 실패하면 로컬 다운로드로 대체됩니다.
	//  - always: 서버는 로컬로만 다운로드되고 호스트로 전송됩니다.
	//  - off: 서버는 호스트에서만 다운로드됩니다.
	"remote.SSH.localServerDownload": "auto",

	// 서버의 설치 폴더 대신 '/tmp'에 잠금 파일을 보관할지를 지정합니다. NFS 또는 다른 분산 파일 시스템을 사용하는 홈 디렉터리의 호스트와 같이 잠금에 문제가 있는 호스트에 연결하는 데 유용합니다.
	"remote.SSH.lockfilesInTmp": false,

	// 확장의 로그 수준입니다.
	"remote.SSH.logLevel": "debug",

	// 다시 연결을 시도하는 최대 횟수입니다. 다시 연결을 허용하지 않으려면 0을 사용하고, 최댓값인 8을 사용하려면 'null'을 사용합니다.
	"remote.SSH.maxReconnectionAttempts": null,

	// SSH 실행 파일의 절대 경로입니다. 비어 있는 경우 경로 또는 공통 설치 위치에서 "SSH"를 사용합니다.
	"remote.SSH.path": "",

	// 시스템이 '-T' SSH 연결 플래그를 생략하여 SSH 연결에 대해 가상 터미널을 할당할 수 있도록 허용합니다. 이 설정은 기본적으로 사용하지 않도록 설정되어 있으며 특정 사용 사례를 지원하도록 설정할 수 있습니다.
	"remote.SSH.permitPtyAllocation": false,

	// Execute the script at the provided path on **your local machine** before attempting an SSH connection. Provide a single string value to configure for all hosts, or provide an object with per-host configuration.  On Windows provide a **.ps1** script and on macOS/linux provide an executable **.sh** script.
	"remote.SSH.preconnect": "",

	// SSH 터널 연결에 사용할 기본 설정 **로컬** 포트 범위입니다. 범위에서 사용 가능한 포트를 찾을 수 없으면 오류가 발생합니다. 'number-number' 형식의 유효한 범위(예: '4000-5000')입니다. 첫 번째 숫자는 다음 숫자보다 작을 것으로 예상됩니다.
	"remote.SSH.preferredLocalPortRange": "",

	// 해당 원격의 플랫폼에 대한 원격 호스트 이름의 맵입니다. 호스트 이름에 와일드카드 일치에 대한 '*' 별이 포함될 수 있습니다. 유효한 값: 'linux', 'macOS', 'windows'. 참고 - `remote.SSH.useLocalServer`가 비활성화되면 곧 이 설정이 필요해집니다. 따라서 성공적인 연결을 위해 현재 자동으로 채우고 있지만 사용 중이진 않습니다.
	"remote.SSH.remotePlatform": {},

	// true인 경우 원격 VS Code 서버는 포트를 여는 대신 소켓 경로에서 수신 대기합니다. Linux 및 macOS 원격에만 유효합니다. 이 설정을 토글한 후 "호스트에서 VS Code 서버 종료..." 명령을 실행하여 적용합니다. OpenSSH 6.7 이상이 필요합니다. "로컬 서버" 연결 멀티플렉싱 모드를 비활성화합니다. SSH 서버에 'AllowStreamLocalForwarding'을 활성화해야 합니다.
	"remote.SSH.remoteServerListenOnSocket": false,

	// VS Code 서버가 설치될 절대 경로에 대한 원격 호스트의 맵입니다. 기본적으로 서버는 모든 원격의 홈 디렉터리에 설치됩니다. **참고**: 이 설정을 변경하면 구성한 경로에 없는 원격의 다른 `.vscode-server` 설치를 정리해야 할 수 있습니다.
	"remote.SSH.serverInstallPath": {},

	// **원격** 컴퓨터에서 시작할 때 서버에 연결하려는 포트 범위에 대한 원격 호스트 이름의 맵입니다. 범위에서 사용 가능한 포트를 찾을 수 없으면 오류가 발생합니다. 'number-number' 형식의 유효한 범위(예: '4000-5000')입니다. 첫 번째 숫자는 다음 숫자보다 작을 것으로 예상됩니다.
	"remote.SSH.serverPickPortsFromRange": {},

	// 항상 SSH 로그인 터미널을 표시합니다.
	"remote.SSH.showLoginTerminal": false,

	// Windows와 번들된 일부 SSH 클라이언트 버전의 암호 처리 버그로 인해 확장은 Git 번들과 같이 Windows가 아닌 SSH 클라이언트를 선호하며 다른 클라이언트를 찾을 수 없는 경우 경고를 표시합니다. 이 설정은 해당 경고를 사용하지 않도록 설정합니다.
	"remote.SSH.suppressWindowsSshWarning": false,

	// 원격 환경의 'curlrc' 및 'wgetrc' 파일(해당 기본 위치에 배치됨)의 구성을 준수합니다.  이 설정을 사용하도록 설정하면 특정한 경우(예: 프록시 구성)에 유용할 수 있지만 이 확장의 작업을 방해할 수 있습니다. 필요한 플래그(예: busybox)를 지원하지 않는 플랫폼에서는 설정이 무시될 수 있습니다.
	"remote.SSH.useCurlAndWgetConfigurationFiles": false,

	// 서버에 연결할 때 새 부트스트래핑 모드를 사용합니다. 연결 문제가 발생할 경우 해제할 수 있습니다.
	"remote.SSH.useExecServer": true,

	// 'ln' 대신 Linux 원격에서 잠금 파일을 만드는 데 'flock'을 사용할지를 지정합니다. 기본적으로 Linux 원격에서는 'flock'을 사용하고 macOS에서는 'ln'을 사용합니다.
	"remote.SSH.useFlock": true,

	// 창과 창 사이와 창 다시 로드 전체에서 단일 연결을 사용하는 연결 모드를 활성화합니다. 이렇게 하면 새 창을 더 빠르게 열 수 있으며 암호를 입력해야 하는 횟수가 줄어듭니다.
	"remote.SSH.useLocalServer": true,

	// 사용되지 않음: `remote.SSH.remotePlatorm`을 대신 사용하세요.
	// **사용되지 않음**: Windows 원격에 연결하는 데 실험적 지원을 사용합니다. 이 목록에 Windows 원격의 이름을 추가합니다.
	"remote.SSH.windowsRemotes": [],

	// 설정된 경우 WSL 로그의 출력에 디버그 정보가 표시됩니다.
	"remote.WSL.debug": false,

	// 설정하면 WSL 확장이 백그라운드에서 최신 서버 빌드를 다운로드합니다. 지난 2주 동안 사용된 모든 WSL 플랫폼에서 이 작업을 수행합니다.
	"remote.WSL.downloadInBackground": true,

	// 설정하면 WSL 확장에서 스크립트를 사용하여 WSL에서 서버를 시작하지 않습니다. 이는 interop이 비활성화된 배포판에서 실행할 수 있도록 하는 실험적 기능입니다.
	"remote.WSL.experimental.scriptLessStartup": false,

	// 설정된 경우 폴링이 WSL1 내에서 파일을 감시하는 데 사용됩니다. 폴링은 CPU를 많이 사용하지만 감시 중 폴더의 이름을 바꿀 수 없는 WSL1 문제를 해결합니다. 이 옵션을 적용하려면 다시 시작해야 합니다.
	"remote.WSL.fileWatcher.polling": false,

	// `remote.WSL.fileWatcher.polling`이 설정된 경우 WSL1 배포판 내에서 사용되는 파일 감시자 폴링 간격(밀리초)입니다.
	// 이 옵션을 적용하려면 다시 시작해야 합니다.
	"remote.WSL.fileWatcher.pollingInterval": 5000,

	// 설정된 경우 WSL 창이 창을 열었던 셸에서 환경을 가져옵니다.
	"remote.WSL.useShellEnvironment": true,

	// 더 이상 사용되지 않는 'wsl.exe'는 이제 항상 연결을 WSL로 전달하는 데 사용됩니다.
	// 
	"remote.WSL1.connectionMethod": "",

	// 더 이상 사용되지 않는 'wsl.exe'는 이제 항상 연결을 WSL로 전달하는 데 사용됩니다.
	// 
	"remote.WSL2.connectionMethod": "",

	// 업스트림 리포지토리에서 주기적으로 가져올지를 지정합니다.
	"azureRepos.autoFetch.enabled": true,

	// 업스트림 리포지토리에서 주기적으로 가져오는 간격(초)을 지정합니다.
	"azureRepos.autoFetch.interval": 60,

	// Azure Repos의 LFS 서버에서 Git LFS를 통해 추적된 파일을 확인할지 여부를 제어합니다.
	"azureRepos.lfs.read.enabled": true,

	// Git LFS를 통해 추적된 파일을 Azure Repos의 LFS 서버에 커밋할지 여부를 제어합니다.
	"azureRepos.lfs.write.enabled": true,

	// 이 설정은 사용되지 않습니다. 대신 'Developer: Set Log Level' 명령을 사용하여 로그 수준을 설정할 수 있습니다.
	// 
	"azureRepos.logLevel": null,

	// 미리 보기를 자동으로 새로고침하는 빈도입니다.
	"livePreview.autoRefreshPreview": "On All Changes in Editor",

	// 외부 브라우저에서 파일을 미리 볼 때 시작할 브라우저입니다. 일반 미리 보기(디버그 외)에서만 작동하고 데스크톱에서만 작동합니다.
	"livePreview.customExternalBrowser": "Default",

	// 외부 미리 보기 실행 시 JavaScript 디버거를 연결할지 여부입니다.
	"livePreview.debugOnExternalPreview": false,

	// 서버 시작 시 자동으로 표시할 파일입니다. 색인에서 열려면 비워 둡니다.
	"livePreview.defaultPreviewPath": "",

	// 파일을 호스팅할 로컬 IP 호스트 주소입니다.
	"livePreview.hostIP": "127.0.0.1",

	// 서버의 HTTP 응답에 설정해야 하는 추가 HTTP 헤더입니다.
	"livePreview.httpHeaders": {
		"Accept-Ranges": "bytes"
	},

	// 현재 열려 있는 작업 영역(또는 서버가 호스팅되는 작업 영역)의 일부가 아닌 파일에 대한 미리 보기를 열 때 사용자에게 알릴지 여부입니다.
	"livePreview.notifyOnOpenLooseFile": true,

	// 미리 보기의 기본 대상입니다.
	"livePreview.openPreviewTarget": "Embedded Preview",

	// 라이브 미리 보기의 서버가 처음에 시도해야 하는 로컬 포트입니다. 이 포트 번호가 작동하지 않으면 여유 포트를 찾을 때까지 포트 번호를 증가시킵니다.
	"livePreview.portNumber": 3000,

	// 미리 보기 업데이트를 디버그할 때 사용할 지연 시간(밀리초)입니다.
	"livePreview.previewDebounceDelay": 50,

	// 포함된 미리 보기를 닫은 후 서버를 종료할 시간(분)입니다. 서버가 무한정 켜져 있도록 하려면 0으로 설정하세요.
	"livePreview.serverKeepAliveAfterEmbeddedPreviewClose": 3,

	// 파일이 제공되는 작업 영역 루트의 상대 경로입니다. 작업 영역 루트가 이 상대 경로에 있는 것처럼 파일이 미리 보기됩니다. 이 디렉터리 경로가 작업 영역에 없는 경우 기본적으로 작업 영역 루트로 설정됩니다. 이 설정은 작업 영역이 열려 있는 경우에만 적용됩니다.
	"livePreview.serverRoot": "",

	// 서버 온/오프 상태 변경에 대한 정보 메시지를 표시할지 여부입니다.
	"livePreview.showServerStatusNotifications": false,

	// 외부 미리 보기 인스턴스를 자동 생성된 서버 작업과 페어링할지 여부입니다. 비활성화되면 서버도 자동으로 닫히지 않습니다(창이 닫힐 때까지).
	"livePreview.tasks.runTaskWithExternalPreview": false,

	// Collapse the recent folders under Remote targets in the Remote Explorer.
	"remote-explorer.collapseRecentFolders": false,

	// 원격 탐색기의 원격 대상 아래에 폴더를 표시할 순서를 지정합니다.
	//  - most recently used: 가장 최근에 연 순서대로 폴더 표시
	//  - alphabetical: 폴더를 사전순으로 표시
	"remote-explorer.foldersSortOrder": "most recently used",

	// 변경 내용이 원격 공급자(예: GitHub)에 직접 커밋될 것이라는 경고를 표시할지 여부를 지정합니다.
	//  - off: 커밋 경고 비활성화
	//  - auto: 첫 번째 커밋까지 경고
	//  - always: 항상 경고
	"remoteHub.commitDirectlyWarning": "always",

	// 최근에 연 리포지토리 목록을 동기화할지 여부를 제어합니다.
	"remoteHub.experimental.syncRecentList": false,

	// 파일 diff를 생성할 때 성능 향상을 위해 diff-match-patch 라이브러리를 사용할지 여부를 지정합니다.
	"remoteHub.experimental.useDiffMatchPatch": false,

	// 리포지토리를 복제하는 데 사용되는 프로토콜 제어
	"remoteHub.gitProtocol": "http",

	// 이 설정은 사용되지 않습니다. 대신 'Developer: Set Log Level' 명령을 사용하여 로그 수준을 설정할 수 있습니다.
	// 
	"remoteHub.logLevel": null,

	// 리포지토리가 인덱싱된 경우 풍부한 탐색을 활성화할지 여부를 지정합니다.
	"remoteHub.richNavigation.enabled": false,

	// 분기의 기본 인덱스 동작을 제어합니다.
	"remoteHub.richNavigation.indexMode": {},

	// 커밋하기 전에 변경 내용 스테이징을 활성화할지 여부를 지정합니다.
	"remoteHub.staging.enabled": true,

	// 변경 내용이 없는 경우 커밋하기 전에 모든 변경 내용을 자동으로 스테이징할지 여부를 지정합니다.
	"remoteHub.staging.smart": true,

	// 생성 후 새로 생성된 분기로 전환하라는 프롬프트를 표시할지 여부를 지정합니다.
	//  - always: 프롬프트 없이 항상 새로 생성된 분기로 전환
	//  - prompt: 새로 생성된 분기로 전환할지 묻는 메시지
	"remoteHub.switchToCreatedBranch": "prompt",

	// 커밋되지 않은 변경 내용이 이미 포함된 작업 영역에 다시 들어갈 때 수행할 작업을 지정합니다.
	//  - none: 프롬프트를 표시하지 않음
	//  - promptIfBehind: 수신 변경 내용과 커밋되지 않은 변경 내용이 있을 때 프롬프트 표시
	"remoteHub.uncommittedChangesOnEntry": "promptIfBehind",

	// 사용 가능한 업데이트가 있는 경우 항상 VS Code CLI를 업데이트합니다. CLI 업데이트를 사용하지 않도록 설정하려면 'never'로 설정합니다.
	"remote.tunnels.alwaysUpdateCLI": null,

	// 모든 터널 호스트에 자동으로 설치해야 하는 확장 목록입니다.
	"remote.tunnels.defaultExtensions": [],

	// 
	"remote.tunnels.tunnelCredentialCommand": null,

	// External CSS Files (Full paths, Comma separated)
	"live-tailwind-alpine-preview.externalCSS": "",

	// External Js Files (Full paths, Comma separated)
	"live-tailwind-alpine-preview.externalJs": "",

	// If enabled, other files in the workspace are searched when estimating types for a parameter. Disabling this will increase performance, but may reduce estimation accuracy.
	"workspace.searchEnabled": true,

	// The maximum number of files searched in a workspace search. Has no effect if workspace searching is disabled.
	"workspace.searchLimit": 10,

	// 특정 아이콘을 활성화하는 아이콘 팩 선택.
	//  - angular: Angular용 아이콘.
	//  - angular_ngrx: Angular 및 ngrx용 아이콘.
	//  - react: React용 아이콘.
	//  - react_redux: React 및 Redux용 아이콘.
	//  - roblox: Roblox용 아이콘.
	//  - qwik: Qwik용 아이콘.
	//  - vue: Vue용 아이콘.
	//  - vue_vuex: Vue 및 Vuex용 아이콘.
	//  - nest: NestJS용 아이콘.
	//  - bashly: Bashly용 아이콘.
	//  - none: 아이콘 팩 비활성화.
	"material-icon-theme.activeIconPack": "angular",

	// Enable logging to the output channel.
	"material-icon-theme.enableLogging": false,

	// 사용자 정의 파일 아이콘 설정.
	"material-icon-theme.files.associations": {},

	// 파일 아이콘의 색상 변경.
	"material-icon-theme.files.color": "#90a4ae",

	// Clone any existing icon and create a new one with custom colors and associations
	"material-icon-theme.files.customClones": [],

	// 사용자 정의 폴더 아이콘 설정.
	"material-icon-theme.folders.associations": {},

	// 폴더 아이콘의 색상 변경.
	"material-icon-theme.folders.color": "#90a4ae",

	// Clone any existing icon and create a new one with custom colors and associations
	"material-icon-theme.folders.customClones": [],

	// 폴더 아이콘의 유형 설정.
	//  - specific: 특정 폴더 아이콘 선택.
	//  - classic: 클래식 폴더 아이콘 선택.
	//  - none: 폴더 아이콘 없음.
	"material-icon-theme.folders.theme": "specific",

	// 파일 탐색기의 폴더 화살표 숨기기.
	"material-icon-theme.hidesExplorerArrows": false,

	// 사용자 정의 언어 아이콘 설정.
	"material-icon-theme.languages.associations": {},

	// Clone any existing icon and create a new one with custom colors and associations
	"material-icon-theme.languages.customClones": [],

	// Set the log level for output messages.
	"material-icon-theme.logLevel": "info",

	// 아이콘의 투명도 변경.
	"material-icon-theme.opacity": 1,

	// Set custom root folder icon associations.
	"material-icon-theme.rootFolders.associations": {},

	// Change the color of the root folder icons.
	"material-icon-theme.rootFolders.color": "#90a4ae",

	// 아이콘의 채도 변경.
	"material-icon-theme.saturation": 1,

	// 
	"prisma.enableCodeLens": true,

	// 
	"prisma.enableDiagnostics": true,

	// Enable, when checked, the File Watcher functionality for Prisma Client.
	"prisma.fileWatcher": true,

	// If you have a Prisma schema file in a custom path, you will need to provide said path `/path/to/your/schema.prisma` to run generate
	"prisma.schemaPath": "",

	// 
	"prisma.scriptRunner": "npx",

	// Setting for logging between the VS Code extension and the language server.
	"prisma.trace.server": "off",

	// 확장 프로그램이 로드하려고 시도하는 최대 파일 크기(MB)입니다. 제한을 비활성화하려면 0으로 설정하십시오. 내부 제한은 4GB이지만 플랫폼 제한은 더 일찍 적용될 수 있습니다.
	// 
	// __경고__: 큰 파일을 열면 성능 저하, 프리징 및 시스템 전체 메모리 문제가 발생할 수 있습니다.
	"sqliteViewer.maxFileSize": 200,

	// The default option for Active Environment selection is `Save To File`. The `Save To Local Memory` option will save the changes to the `Active Environment` in local memory
	"thunder-client.activeEnvironmentSelection": "Save To File",

	// Auto Run `cURL` request after import. If disabled, the `cURL` request will not be executed after import
	"thunder-client.autoRunCurl": false,

	// List of ssl certificates for hosts
	"thunder-client.certificates": [],

	// Automatically send `Content-Type` header when body is sent in request, If disabled, the `Content-Type` header will not be sent
	"thunder-client.contentType": true,

	// [[Subscription Required](https://www.thunderclient.com/pricing)] Enter full folder path to store requests data, `Suitable for storing all requests data in one fixed location`. Also supports home folder `$HOME/path`. for more details [visit here](https://docs.thunderclient.com/team)
	"thunder-client.customLocation": "",

	// Please enter Http Methods separated by comma e.g: `search,subscribe`. Close and Re-open Review View to see changes.
	"thunder-client.customMethods": "",

	// [[Subscription Required](https://www.thunderclient.com/pricing)] Provide values for Default Headers for the Request
	"thunder-client.defaultHeaders": [
		{
			"name": "Accept",
			"value": "*/*"
		},
		{
			"name": "User-Agent",
			"value": "Thunder Client (https://www.thunderclient.com)"
		}
	],

	// [[Subscription Required](https://www.thunderclient.com/pricing)] Please provide Default URL of the Request
	"thunder-client.defaultURL": "",

	// Thunder Client editor font size 
	//  - Use 0 to use default font size.
	//  - Use any other value to set custom font size.
	"thunder-client.editorFontSize": 0,

	// Thunder Client Request Body Editor environment variables highlight.
	"thunder-client.editorVariableHighlight": true,

	// Comma separated Host names to exclude from proxy e.g: `abc.com,xyz.com`
	"thunder-client.excludeProxyHostList": "",

	// Follow Redirects when running Requests
	"thunder-client.followRedirects": true,

	// The HTML Report Response Display Limit is in KB. The default is `100KB`. If set to `0KB`, the response will not be included in the report. If set to `-1`, responses will only be saved for `failed` requests.
	"thunder-client.htmlReportResponseLimit": 100,

	// The http library to use to send API requests.
	"thunder-client.httpLibrary": "got",

	// Http Version for making the request, default is HTTP/1.1
	"thunder-client.httpVersion": "HTTP/1.1",

	// Thunder Client UI Editors JSON format indentation, select 2 or 4 spaces, default is `2 spaces`
	"thunder-client.indentSize": 2,

	// Indent Size for JSON files generated by Thunder Client, default is `4 spaces`
	"thunder-client.jsonFileIndentSize": 4,

	// [[Subscription Required](https://www.thunderclient.com/pricing)] Mutile root workspace name to use to save requests data. This value is automatically set by the extension when you open `project.code-workspace` file.
	"thunder-client.multiRootWorkspaceName": "",

	// Preview features can be tested by enabling this option.
	"thunder-client.previewFeatures": false,

	// Select the request view layout for `request/response` sections. Please `close` request tab and `re-open` to apply new layout
	"thunder-client.requestLayout": "Left/Right",

	// Request Timeout in milliseconds, 0 means no timeout
	"thunder-client.requestTimeout": 0,

	// Response Display Limit in MB, Default is 2MB
	"thunder-client.responseLimit": 2,

	// Restore last opened tabs on vscode reload (only applies to request views).
	"thunder-client.restoreTabs": false,

	// `Save Request` when Send button is clicked in Collections. If disabled, the request will be sent without saving. Use shortcut `ctrl/cmd + s` to save the request explicitly
	"thunder-client.saveRequestOnSend": true,

	// Save OAuth 2 token based on environment, So this will allow to save `different access tokens` for `dev & prod` environments
	"thunder-client.saveTokenPerEnvironment": false,

	// [[Subscription Required](https://www.thunderclient.com/pricing)] Requests data will be saved and loaded automatically from current workspace folder, `Suitable for Teams with multiple projects`. The tests folder `thunder-tests` will be created at the root. for more details [visit here](https://docs.thunderclient.com/team)
	"thunder-client.saveToWorkspace": false,

	// Sidebar default active tab, default is `Activity`
	"thunder-client.sidebar.defaultTab": "Activity",

	// The default sidebar layout is `standard`. The `compact` layout will hide the request date section in `sidebar`
	"thunder-client.sidebar.layout": "standard",

	// Show Requests executed from collection in `Activity Tab`
	"thunder-client.sidebar.showActivityFromCollection": false,

	// Sidebar Collections tree indentation, `select 0` for default padding, `select 5 or 10` to add extra 5px or 10px padding
	"thunder-client.sidebar.treeIndentation": 0,

	// Please provide `Test Value` column width in `percentage`, The value should be between `10 to 50`. The default value is `30`
	"thunder-client.testValueColumnWidth": 30,

	// [[Subscription Required](https://www.thunderclient.com/pricing)] Relative path to the current workspace folder, where you like to save tests data, `Save To Workspace` setting needs to be enabled first. The tests folder `thunder-tests` will be created here. for more details [visit here](https://docs.thunderclient.com/team)
	"thunder-client.workspaceRelativePath": "",

	// Register XML catalog files. See how to configure [XML catalog with XSD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-catalog-with-xsd%22%7D%5D) or [XML catalog with DTD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-catalog-with-dtd%22%7D%5D) for more information.
	"xml.catalogs": [],

	// Enable/disable XML CodeLens. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22CodeLens%22%2C%22section%22%3A%22Code%20Lens%22%7D%5D) for information about CodeLens features
	"xml.codeLens.enabled": false,

	// Allows colors for the given file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Features/XMLColorsFeatures%22%2C%22section%22%3A%22xmlcolorsfeatures%22%7D%5D) for more information.
	"xml.colors": [],

	// Enable/disable the content of an element being removed when the element start tag is turned into a self-closing tag. The default setting is to remove the content. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22auto-close-removes-content%22%7D%5D) for more information.
	"xml.completion.autoCloseRemovesContent": true,

	// Enable/disable autoclosing of XML tags. Default is `true`. 
	// 
	// IMPORTANT: Turn off `editor.autoClosingTags` for this to work.
	"xml.completion.autoCloseTags": true,

	// Download external resources like referenced DTD, XSD. Default is `true`.
	"xml.downloadExternalResources.enabled": true,

	// An array of paths to JARs that should be contributed to the LemMinX classpath. The paths can include glob patterns. This is intended to be used as a tool for developing extensions to vscode-xml. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22extension-jars%22%7D%5D) for more information
	"xml.extension.jars": [],

	// Allows XML schemas/ DTD to be associated to file name patterns. Please refer to [XML file association with XSD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-file-association-with-xsd%22%7D%5D) or [XML file association with DTD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-file-association-with-dtd%22%7D%5D) for more information. 
	// 
	// Example:
	// ```json
	// [{
	//   "pattern": "file1.xml",
	//   "systemId": "path/to/file.xsd"
	// },
	// {
	//   "pattern": "**/*.xsd",
	//   "systemId": "http://www.w3.org/2001/XMLSchema.xsd"
	// }]
	// ```
	"xml.fileAssociations": [],

	// Allows file path for the given file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Features/XMLFilePathSupport%22%2C%22section%22%3A%22xmlfilepathsfeatures%22%7D%5D) for more information.
	"xml.filePathSupport.mappings": [],

	// Minimize the closing tag after folding. Default is `false`.
	"xml.foldings.includeClosingTagInFold": false,

	// The option to put a closing bracket on a newline when `xml.format.splitAttributes` is `true`. Default value is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatclosingbracketnewline%22%7D%5D) for more information.
	"xml.format.closingBracketNewLine": false,

	// Expand/collapse empty elements. Default is `ignore`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatemptyelements%22%7D%5D) for more information.
	"xml.format.emptyElements": "ignore",

	// Enable/disable ability to format document. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatenabled%22%7D%5D) for more information.
	"xml.format.enabled": true,

	// Enforce `preferred` quote style (set by `xml.preferences.quoteStyle`) or `ignore` quote style when formatting. Default is `ignore`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatenforcequotestyle%22%7D%5D) for more information.
	//  - preferred: Use preferred quote style set by `xml.preferences.quoteStyle` when formatting.
	//  - ignore: Ignore quote style formatting.
	"xml.format.enforceQuoteStyle": "ignore",

	// Use Schema/DTD grammar information while formatting. Default is `true`. Not supported by legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatgrammarawareformatting%22%7D%5D) for more information.
	"xml.format.grammarAwareFormatting": true,

	// Set to `true` to join lines in CDATA content during formatting. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincdatalines%22%7D%5D) for more information.
	"xml.format.joinCDATALines": false,

	// Join comment content on format. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincommentlines%22%7D%5D) for more information.
	"xml.format.joinCommentLines": false,

	// Normalize the whitespace of content inside an element. Newlines and excess whitespace are removed. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincontentlines%22%7D%5D) for more information.
	"xml.format.joinContentLines": false,

	// Enable/disable legacy formatter. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatlegacy%22%7D%5D) for more information.
	"xml.format.legacy": false,

	// Max line width. Set to `0` to disable this setting. Default is `100`. Not supported by legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatmaxlinewidth%22%7D%5D) for more information.
	"xml.format.maxLineWidth": 100,

	// Preserve line breaks that appear before and after attributes. This setting is overridden if `xml.format.splitAttributes` is set to `splitNewLine` or `alignWithFirstAttr`. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreserveattributelinebreaks%22%7D%5D) for more information.
	"xml.format.preserveAttributeLineBreaks": true,

	// Preserve new lines that separate tags. The value represents the maximum number of new lines per section. A value of 0 removes all new lines. Default is `2`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreservednewlines%22%7D%5D) for more information.
	"xml.format.preservedNewlines": 2,

	// Preserve empty content/whitespace in a tag. Default is `false`. Supported only with legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreserveemptycontent%22%7D%5D) for more information.
	"xml.format.preserveEmptyContent": false,

	// Element names for which spaces will be preserved. Not supported by legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreservespace%22%7D%5D) for more information.
	"xml.format.preserveSpace": [
		"xsl:text",
		"xsl:comment",
		"xsl:processing-instruction",
		"literallayout",
		"programlisting",
		"screen",
		"synopsis",
		"pre",
		"xd:pre"
	],

	// Insert space before end of self closing tag. 
	// Example:
	//   ```<tag/> -> <tag />```. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatspacebeforeemptyclosetag%22%7D%5D) for more information.
	"xml.format.spaceBeforeEmptyCloseTag": true,

	// Split multiple attributes each onto a new line or align attributes to the first. Default is `preserve`. Indicate level of indentation with `xml.format.splitAttributesIndentSize`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatsplitattributes%22%7D%5D) for more information.
	"xml.format.splitAttributes": "preserve",

	// How many levels to indent the attributes by when `xml.format.splitAttributes` is `true`. Default value is `2`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatsplitattributesindentsize%22%7D%5D) for more information
	"xml.format.splitAttributesIndentSize": 2,

	// Split `xsi:schemaLocation` content. Default is `onPair`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatxsischemalocationsplit%22%7D%5D) for more information
	//  - onElement: Put a new line after each namespace and URI, arranging them into one column.
	//  - onPair: Put a new line after each URI, arranging the content into pairs of namespace and URI.
	//  - none: Ignore `xsi:schemaLocation` content formatting.
	"xml.format.xsiSchemaLocationSplit": "onPair",

	// Specifies the folder path to the JDK (11 or more recent) used to launch the XML Language Server if the Java server is being run.
	// On Windows, backslashes must be escaped, i.e.
	// `"xml.java.home": "C:\\Program Files\\Java\\jdk11"`. For more information, please refer to [this document](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22java-home%22%7D%5D).
	"xml.java.home": null,

	// Enable/disable logging to the Output view. Default is `true`.
	"xml.logs.client": true,

	// Preferred quote style to use for completion: `single` quotes, `double` quotes. Default is `double`.
	"xml.preferences.quoteStyle": "double",

	// Specifies the source of the XML schema documentation displayed on hover and completion. Default is `all`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22documentation-type%22%7D%5D) for more information.
	//  - documentation: Documentation comes from the `xs:documentation` element.
	//  - appinfo: Documentation comes from the `xs:appinfo` element.
	//  - all: Documentation comes from the `xs:documentation` and `xs:appinfo` elements.
	//  - none: Displays no documentation.
	"xml.preferences.showSchemaDocumentationType": "all",

	// Allows references for the given file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Features/XMLReferencesFeatures%22%2C%22section%22%3A%22xmlreferencesfeatures%22%7D%5D) for more information.
	"xml.references": [],

	// Command line arguments to supply to the binary server when the binary server is being used. Takes into effect after relaunching VSCode. Please refer to [this website for the available options](https://www.graalvm.org/reference-manual/native-image/HostedvsRuntimeOptions/). For example, you can increase the maximum memory that the server can use to 1 GB by adding `-Xmx1g`
	"xml.server.binary.args": "",

	// Specify the path of a custom binary version of the XML server to use. A binary will be downloaded if this is not set.
	"xml.server.binary.path": "",

	// List of the SHA256 hashes of trusted copies of the lemminx (XML language server) binary. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22trusted-binary-hashes%22%7D%5D) for more information
	"xml.server.binary.trustedHashes": [],

	// By default, vscode-xml tries to run the Java version of the XML Language Server. If no Java is detected, vscode-xml runs the binary XML language server. When this setting is enabled, the binary will also be used even if Java is installed. If there are additions to the XML Language Server provided by other extensions, Java will be used (if available) even if this setting is enabled.
	"xml.server.preferBinary": false,

	// The XML Language server allows other VSCode extensions to extend its functionality. It requires Java-specific features in order to do this. If extensions to the XML language server are detected, but a binary XML language server is run, a warning will appear. This setting can be used to disable this warning.
	"xml.server.silenceExtensionWarning": false,

	// Specifies extra VM arguments used to launch the XML Language Server. Eg. use `-Xmx1G  -XX:+UseG1GC -XX:+UseStringDeduplication` to increase the heap size to 1GB and enable String deduplication with the G1 Garbage collector. Please refer to [this document](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22server-vm-arguments%22%7D%5D) for more information on the Java server arguments.
	"xml.server.vmargs": "-Xmx64M",

	// Set a custom folder path for cached XML Schemas. An absolute path is expected, although the `~` prefix (for the user home directory) is supported. Default is `~/.lemminx`. Please refer to the [cache documentation](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22server-cache-path%22%7D%5D) for more information.
	"xml.server.workDir": "~/.lemminx",

	// Enable/disable document symbols (Outline). Default is `true`. No symbols are given if `"xml.symbols.enabled": false`.
	"xml.symbols.enabled": true,

	// Disable document symbols (Outline) for the given file name patterns. Updating file name patterns does not automatically reload the Outline view for the relevant file(s). Each file must either be reopened or changed, in order to trigger an Outline view reload.
	// 
	// Example:
	// ```
	// [
	//  "**/*LargeFile.xml"
	// ]```.
	"xml.symbols.excluded": [],

	// Allows XML symbols filter to be associated to file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsfilters%22%7D%5D) for more information.. 
	// 
	// Example:
	// ```json
	// [
	//   {
	//     "pattern": "pom.xml",
	//     "expressions": [
	//       {
	//         "xpath": "//text()"
	//       }
	//     ]
	//   }
	// ]
	// ```
	"xml.symbols.filters": [],

	// The maximum number of outline symbols and folding regions computed (limited for performance reasons). Default is `5000`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsmaxitemscomputed%22%7D%5D) for more information.
	"xml.symbols.maxItemsComputed": 5000,

	// Show referenced grammars in the Outline. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsshowreferencedgrammars%22%7D%5D) for more information.
	"xml.symbols.showReferencedGrammars": true,

	// Traces the communication between VS Code and the XML language server in the Output view. Default is `off`.
	"xml.trace.server": "off",

	// Enable/disable if a fatal error is thrown if the incoming document contains a DOCTYPE declaration. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22disallow-doc-type-declarations%22%7D%5D) for more information
	"xml.validation.disallowDocTypeDecl": false,

	// Enable/disable all validation. Default is `true`.
	"xml.validation.enabled": true,

	// 
	"xml.validation.filters": [
		{
			"pattern": "**.exsd",
			"noGrammar": "ignore",
			"schema": {
				"enabled": "never"
			}
		},
		{
			"pattern": "**{.project,.classpath,plugin.xml,feature.xml,category.xml,.target,.product}",
			"noGrammar": "ignore"
		}
	],

	// Enable/disable namespaces validation. Default is `always`. Ignored if `xml.validation.enabled` is set to `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlnamespaceschemaenabled%22%7D%5D) for more information.
	//  - always: Enable namespaces validation.
	//  - never: Disable namespaces validation.
	//  - onNamespaceEncountered: Enable namespaces validation only when the root element declares an xmlns namespace.
	"xml.validation.namespaces.enabled": "always",

	// The message severity when a document has no associated grammar. Default is `hint`.
	"xml.validation.noGrammar": "hint",

	// Enable/disable resolve of external entities. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22resolve-external-entities%22%7D%5D) for more information. Disabled for untrusted workspaces
	"xml.validation.resolveExternalEntities": false,

	// Enable/disable schema based validation. Default is `always`. Ignored if `xml.validation.enabled` is set to `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlvalidationschemaenabled%22%7D%5D) for more information.
	//  - always: Enable schema based validation.
	//  - never: Disable schema based validation.
	//  - onValidSchema: Enable schema based validation only when the declared xsi:schemaLocation hint or xsi:noNamespaceSchemaLocation is valid for the root element.
	"xml.validation.schema.enabled": "always",

	// Enable/disable validation for `xi:include`. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlvalidationxincludeenabled%22%7D%5D) for more information.
	"xml.validation.xInclude.enabled": false,

	// Note: If it is not Null, It will override CustomBrowser and ChromeDebuggingAttachment settings.
	// 
	//  Examples : 
	// chrome --incognito --headless --remote-debugging-port=9222 
	//  C:\\Program Files\\Firefox Developer Edition\\firefox.exe --private-window
	"liveServer.settings.AdvanceCustomBrowserCmdLine": null,

	// Enable Chrome Debugging Attachment to Live Server at Debuging Port 9222.
	//  NOTE: You have to install 'Debugger for Chrome' 
	// If the value is true, Select 'Attach to Chrome' from Debug Window to start debugging. 
	// 
	//  CAUTION: If it is true, 'Launch Chrome against localhost' may not work.
	"liveServer.settings.ChromeDebuggingAttachment": false,

	// Specify custom browser settings for Live Server. 
	// By Default it will open your default favorite browser.
	"liveServer.settings.CustomBrowser": null,

	// To disable information pop up messages.
	"liveServer.settings.donotShowInfoMsg": false,

	// To turn off prompt warning message if body or head or other supporting tag is missing in your HTML.
	"liveServer.settings.donotVerifyTags": false,

	// When set, serve this file (server root relative) for every 404 (useful for single-page applications)
	"liveServer.settings.file": "",

	// By Default Live Server inject CSS changes without full reloading of browser. You can change this behavior by making this setting as `true`
	"liveServer.settings.fullReload": false,

	// To switch between localhost or 127.0.0.1 or anything else. Default is 127.0.0.1
	"liveServer.settings.host": "127.0.0.1",

	// Setup https configuration
	"liveServer.settings.https": {
		"enable": false,
		"cert": "",
		"key": "",
		"passphrase": ""
	},

	// To ignore specific file changes
	"liveServer.settings.ignoreFiles": [
		".vscode/**",
		"**/*.scss",
		"**/*.sass",
		"**/*.ts"
	],

	// Mount a directory to a route. Such as [['/components', './node_modules']]
	"liveServer.settings.mount": [],

	// This the entry point of server when you're in multiroot workspace
	"liveServer.settings.multiRootWorkspaceName": null,

	// If it is true live server will start without browser opened.
	"liveServer.settings.NoBrowser": false,

	// Set Custom Port Number of Live Server. Set 0 if you want random port.
	"liveServer.settings.port": 5500,

	// To Setup Proxy
	"liveServer.settings.proxy": {
		"enable": false,
		"baseUri": "/",
		"proxyUri": "http://127.0.0.1:80"
	},

	// Set Custom root of Live Server. 
	// To change root the the server to sub folder of workspace, use '/' and relative path from workspace. 
	// Example: /subfolder1/subfolder2
	"liveServer.settings.root": "/",

	// Change this to false if you don't want the button to show in the statusbar
	"liveServer.settings.showOnStatusbar": true,

	// Use local IP as host
	"liveServer.settings.useLocalIp": false,

	// You have to install a browser extension. That will be works for your dynamic pages (like PHP).
	"liveServer.settings.useWebExt": false,

	// Delay before live reloading. Value in milliseconds. Default is 100
	"liveServer.settings.wait": 100,

	// Always show backlinks in preview.
	"markdown-preview-enhanced.alwaysShowBacklinksInPreview": false,

	// Automatically show preview of markdown being edited.
	"markdown-preview-enhanced.automaticallyShowPreviewOfMarkdownBeingEdited": false,

	// In Markdown, a single newline character doesn't cause a line break in the generated HTML. In GitHub Flavored Markdown, that is not true. Enable this config option to insert line breaks in rendered HTML for single newlines in Markdown source.
	"markdown-preview-enhanced.breakOnSingleNewLine": true,

	// Chrome executable path, which is used for Puppeteer export. Leaving it empty means the path will be found automatically.
	"markdown-preview-enhanced.chromePath": "",

	// Code block theme. If `auto.css` is chosen, then the code block theme that best matches the current preview theme will be picked.
	"markdown-preview-enhanced.codeBlockTheme": "auto.css",

	// Restart is required after changes. The global configuration directory path. Leave it empty to use `$HOME/.crossnote` for Windows or `$XDG_CONFIG_HOME/.crossnote` or `$HOME/.local/state/crossnote` as the config path.
	"markdown-preview-enhanced.configPath": "",

	// A list of URI schemes (e.g., `vscode-notebook-cell`) to exclude from the `automaticallyShowPreviewOfMarkdownBeingEdited` feature. Files matching these schemes won't trigger the automatic preview.
	"markdown-preview-enhanced.disableAutoPreviewForUriSchemes": [
		"vscode-notebook-cell"
	],

	// Enable CriticMarkup syntax. Only works with markdown-it parser. Please check http://criticmarkup.com/users-guide.php for more information.
	"markdown-preview-enhanced.enableCriticMarkupSyntax": false,

	// Enable emoji & font-awesome plugin. This only works for markdown-it parser, but not pandoc parser.
	"markdown-preview-enhanced.enableEmojiSyntax": true,

	// Enable extended table syntax to support merging table cells.
	"markdown-preview-enhanced.enableExtendedTableSyntax": false,

	//  Enables transform audio video link to to html5 embed audio video tags.
	"markdown-preview-enhanced.enableHTML5Embed": false,

	// Enable or disable conversion of URL-like text to links in the markdown preview.
	"markdown-preview-enhanced.enableLinkify": true,

	// Enable this option will hide unnecessary UI elements in preview unless your mouse is over it.
	"markdown-preview-enhanced.enablePreviewZenMode": true,

	// Enables executing code chunks and importing javascript files.
	// ⚠️ Please use this feature with caution because it may put your security at risk! Your machine can get hacked if someone makes you open a markdown with malicious code while script execution is enabled.
	"markdown-preview-enhanced.enableScriptExecution": false,

	// Enable smartypants and other sweet transforms.
	"markdown-preview-enhanced.enableTypographer": false,

	// Enable Wiki Link syntax support. More information can be found at https://help.github.com/articles/adding-links-to-wikis/
	"markdown-preview-enhanced.enableWikiLinkSyntax": true,

	// Front matter rendering option
	"markdown-preview-enhanced.frontMatterRenderingOption": "none",

	// Hide the default VSCode markdown preview extension buttons. Restarting the editor is required to make this config take effect.
	"markdown-preview-enhanced.hideDefaultVSCodeMarkdownPreviewButtons": true,

	// HTML attributes to pass to audio tags.
	"markdown-preview-enhanced.HTML5EmbedAudioAttributes": "controls preload=\"metadata\" width=\"320\"",

	// When true embed media with http:// schema in URLs. When false ignore and don't embed them.
	"markdown-preview-enhanced.HTML5EmbedIsAllowedHttp": false,

	//  Enables video/audio embed with ![]() syntax (default).
	"markdown-preview-enhanced.HTML5EmbedUseImageSyntax": true,

	// Enables video/audio embed with []() syntax.
	"markdown-preview-enhanced.HTML5EmbedUseLinkSyntax": false,

	// HTML attributes to pass to video tags.
	"markdown-preview-enhanced.HTML5EmbedVideoAttributes": "controls preload=\"metadata\" width=\"320\" height=\"240\"",

	// When using Image Helper to copy images, by default images will be copied to root image folder path '/assets'
	"markdown-preview-enhanced.imageFolderPath": "/assets",

	// ImageMagick command line path. Should be either `magick` or `convert`. Leaving it empty means the path will be found automatically.
	"markdown-preview-enhanced.imageMagickPath": "",

	// You can choose different image uploader to upload image
	"markdown-preview-enhanced.imageUploader": "imgur",

	// jsDelivr CDN host. Example values: `cdn.jsdelivr.net`, `fastly.jsdelivr.net`, `gcore.jsdelivr.net`, `testingcf.jsdelivr.net`
	"markdown-preview-enhanced.jsdelivrCdnHost": "cdn.jsdelivr.net",

	// The URL of the Kroki server to use.  
	"markdown-preview-enhanced.krokiServer": "https://kroki.io",

	// Default latex engine for Pandoc export and latex code chunk.
	"markdown-preview-enhanced.latexEngine": "pdflatex",

	// Re-render the preview as the contents of the source changes, without requiring the source buffer to be saved. If disabled, the preview is re-rendered only when the buffer is saved to disk.
	"markdown-preview-enhanced.liveUpdate": true,

	// Debounce time in milliseconds for live updates. Higher values reduce CPU usage but may feel less responsive. Lower values provide more immediate feedback but may impact performance.
	"markdown-preview-enhanced.liveUpdateDebounceMs": 300,

	// Markdown file extensions. This is used to determine whether to show the preview button in the markdown file context menu.
	"markdown-preview-enhanced.markdownFileExtensions": [
		".md",
		".markdown",
		".mdown",
		".mkdn",
		".mkd",
		".rmd",
		".qmd",
		".mdx"
	],

	// Use customized Math expression block delimiters.
	"markdown-preview-enhanced.mathBlockDelimiters": [
		[
			"$$",
			"$$"
		],
		[
			"\\[",
			"\\]"
		]
	],

	// Use customized Math expression inline delimiters.
	"markdown-preview-enhanced.mathInlineDelimiters": [
		[
			"$",
			"$"
		],
		[
			"\\(",
			"\\)"
		]
	],

	// MathJax v3 script source. Leave it empty to use the default CDN.
	"markdown-preview-enhanced.mathjaxV3ScriptSrc": "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js",

	// Choose the Math expression rendering method option for GFM markdown export (Save as Markdown).
	"markdown-preview-enhanced.mathRenderingOnlineService": "https://latex.codecogs.com/gif.latex",

	// Choose the Math expression rendering method here. You can also disable math rendering if you want by choosing 'None'.
	"markdown-preview-enhanced.mathRenderingOption": "KaTeX",

	// Mermaid theme, you can choose one from ["mermaid.css", "mermaid.dark.css", "mermaid.forest.css"]
	"markdown-preview-enhanced.mermaidTheme": "default",

	// Args passed to pandoc command e.g. ["--smart", "--filter=/bin/exe"] Please use long argument names.
	"markdown-preview-enhanced.pandocArguments": [],

	// The pandoc markdown flavor you want
	"markdown-preview-enhanced.pandocMarkdownFlavor": "markdown-raw_tex+tex_math_single_backslash",

	// Pandoc executable path
	"markdown-preview-enhanced.pandocPath": "pandoc",

	// Absolute path to the plantuml.jar file (`java` is required in system path). You can download it from https://plantuml.com/download.
	"markdown-preview-enhanced.plantumlJarPath": "",

	// Render using PlantUML server instead of binary. Leave it empty to use the builtin plantuml.jar binary (`java` is required in system path). Eg: "http://localhost:8080/svg/"
	"markdown-preview-enhanced.plantumlServer": "",

	// 
	//  - selectedPreviewTheme: Use the `markdown-preview-enhanced.previewTheme` setting.
	//  - systemColorScheme: Follow system color scheme. If set to true, then the theme of markdown preview will automatically switch between light and dark when your system switch between light and dark. For example, if you set the current preview theme to `github-light.css`, then when your system is dark, the preview theme will be switched to `github-dark.css` automatically. If set to false, then the theme of markdown preview will not be changed automatically.
	//  - editorColorScheme: Use the same theme as the editor (light or dark). If set to true, then the theme of markdown preview will automatically switch between light and dark when you switch between vscode light and dark theme. For example, if you set the current preview theme to `github-light.css`, then when you switch to vscode dark theme, the preview theme will be switched to `github-dark.css` automatically. If set to false, then the theme of markdown preview will not be changed automatically.
	"markdown-preview-enhanced.previewColorScheme": "selectedPreviewTheme",

	// - **Single Preview**: Only one preview will be shown for all editors.
	// - **Multiple Previews**: Multiple previews will be shown. Each editor has its own preview.
	// - **Previews Only**: No editor will be shown. Only previews will be shown. You can use the in-preview editor to edit the markdown.
	// 
	// Restart is required after changes.
	"markdown-preview-enhanced.previewMode": "Single Preview",

	// Preview Theme
	//  - atom-dark.css: Atom Dark
	//  - atom-light.css: Atom Light
	//  - atom-material.css: Atom Material
	//  - github-dark.css: GitHub Dark
	//  - github-light.css: GitHub Light
	//  - gothic.css: Gothic
	//  - medium.css: Medium
	//  - monokai.css: Monokai
	//  - newsprint.css: Newsprint
	//  - night.css: Night
	//  - none.css: None
	//  - one-dark.css: One Dark
	//  - one-light.css: One Light
	//  - solarized-dark.css: Solarized Dark
	//  - solarized-light.css: Solarized Light
	//  - vue.css: Vue
	"markdown-preview-enhanced.previewTheme": "github-light.css",

	// Whether to print background for file export or not. If set to `false`, then `github-light` preview theme will be used. You can also set `print_background` in front-matter for individual files.
	"markdown-preview-enhanced.printBackground": false,

	// Accepted protocols for links.
	"markdown-preview-enhanced.protocolsWhiteList": "http://, https://, atom://, file://, mailto:, tel:",

	// Args passed to puppeteer.launch({args: $puppeteerArgs})
	"markdown-preview-enhanced.puppeteerArgs": [],

	// Puppeteer waits for a certain timeout in milliseconds before the document export.
	"markdown-preview-enhanced.puppeteerWaitForTimeout": 0,

	// Qiniu AccessKey
	"markdown-preview-enhanced.qiniuAccessKey": "",

	// Qiniu Bucket
	"markdown-preview-enhanced.qiniuBucket": "",

	// Qiniu Domain
	"markdown-preview-enhanced.qiniuDomain": "http://",

	// Qiniu SecretKey
	"markdown-preview-enhanced.qiniuSecretKey": "",

	// RevealJS Presentation Theme
	"markdown-preview-enhanced.revealjsTheme": "white.css",

	// Automatic scroll sync. This is now partially supported.
	"markdown-preview-enhanced.scrollSync": true,

	// If checked, we use GitHub style piped wiki links, i.e. [[linkText|wikiLink]]. Otherwise, we use [[wikiLink|linkText]] as the original Wikipedia style.
	"markdown-preview-enhanced.useGitHubStylePipedLink": false,

	// Enable this option will render markdown by pandoc instead of markdown-it.
	"markdown-preview-enhanced.usePandocParser": false,

	// The file extension for the link in wikilink if the link does not have an extension.
	"markdown-preview-enhanced.wikiLinkTargetFileExtension": ".md",

	// The case for the file name in wikilink. If the value is `none`, then the file name will not be changed. Otherwise, the file name will be transformed to the specified case. You can read https://www.npmjs.com/package/case-anything for more details.
	"markdown-preview-enhanced.wikiLinkTargetFileNameChangeCase": "none",

	// 콘솔의 로깅 수준
	"intellicodeApiExamples.loggingLevel": "INFO",

	// Python 파일에 대한 API 사용 예제 사용
	"intellicodeApiExamples.python.enabled": true,

	// Typescript/Javascript 파일에 대한 API 사용 예제 사용
	"intellicodeApiExamples.typescript.enabled": true,

	// Java용 Visual Studio IntelliCode 완성 사용
	"vsintellicode.java.completionsEnabled": true,

	// IntelliCode에서 제안한 완성 항목이 표시되지 않는 값('recentlyUsed')으로 설정된 경우 Visual Studio IntelliCode가 'editor.suggestSelection'을 수정할지 여부를 제어합니다.
	//  - enabled: IntelliCode가 사용자를 대신하여 editor.suggestSelection 설정을 수정할 수 있습니다.
	//  - disabled: IntelliCode에서 이 구성을 제어하도록 명시적으로 옵트아웃했습니다.
	//  - automaticallyOverrodeDefaultValue: (이 설정을 수동으로 설정하지 마세요.) IntelliCode에서 구성이 기본값을 재정의하도록 자동으로 수정되었음을 기록하도록 설정합니다.
	//  - choseToUpdateConfiguration: (이 설정을 수동으로 설정하지 마세요.) IntelliCode에서 IntelliCode가 명시적으로 설정된 값에서 구성을 변경할 수 있도록 선택했음을 기록하도록 설정합니다.
	"vsintellicode.modify.editor.suggestSelection": "enabled",

	// Python용 Visual Studio IntelliCode 완성 사용
	"vsintellicode.python.completionsEnabled": true,

	// MSSQL용 Visual Studio IntelliCode 완성 사용
	"vsintellicode.sql.completionsEnabled": true,

	// TypeScript 및 JavaScript용 Visual Studio IntelliCode 완성 사용
	"vsintellicode.typescript.completionsEnabled": true,

	// Enable tools over MCP server.
	"appmod.enableMcpServer": false,

	// Enable verbose logging for the extension. This will log more information to the **Output** tab and may help with troubleshooting issues.
	"appmod.enableVerboseLogging": true,

	// **Deprecated**. Please use `appmod.enableVerboseLogging` instead.
	// Enable verbose logging for the extension. This will log more information to the **Output** tab and may help with troubleshooting issues.
	"migrateJava.enableVerboseLogging": true,

	// Allow to run tasks in parallel, each running will create a new terminal. This configuration will override `gradle.reuseTerminals` and always create new task terminals when running or debugging a task.
	"gradle.allowParallelRun": false,

	// Controls whether Gradle tasks should be automatically detected
	"gradle.autoDetect": "on",

	// Show extra debug information in the output panel
	"gradle.debug": false,

	// Disable the warning confirm messages when performing batch actions
	"gradle.disableConfirmations": false,

	// Focus the task in the explorer when running a task
	"gradle.focusTaskInExplorer": true,

	// This setting will be removed in the future since the extension can automatically get debug tasks, for clean options, please see `gradle.javaDebug.cleanOutput`.
	// Java debug options
	"gradle.javaDebug": {
		"tasks": [
			"run",
			"runBoot",
			"test",
			"intTest",
			"integration"
		]
	},

	// Clean the task output cache before debugging
	"gradle.javaDebug.cleanOutput": true,

	// Discover Gradle projects in nested sub-directories
	"gradle.nestedProjects": false,

	// Default method of opening newly created project.
	"gradle.projectOpenBehaviour": "Interactive",

	// Reuse task terminals behaviour, will be overridden to `off` if `gradle.allowParallelRun` is true.
	//  - task: Use a dedicated terminal for a specific task. The terminal is not shared with other tasks.
	//  - off: Create a new terminal when a task is executed.
	//  - all: Share the terminal with other tasks.
	"gradle.reuseTerminals": "task",

	// Show stopped daemons in the Gradle Daemons view
	"gradle.showStoppedDaemons": false,

	// Whether to use build server to synchronize Gradle project. It will replace the original Buildship to import the Gradle when enabled.
	"java.gradle.buildServer.enabled": "on",

	// Controls when the build output should open.
	//  - neverOpen: Never automatically open build output.
	//  - openOnBuildStart: Open the build output when the build starts.
	//  - openOnBuildFailure: Open the build output when the build fails.
	"java.gradle.buildServer.openBuildOutput": "openOnBuildFailure",

	// Minimum level of debugger logs that are sent to VS Code.
	"java.debug.logLevel": "warn",

	// The specified console to launch Java program. If you want to customize the console for a specific debug session, please modify the 'console' config in launch.json.
	//  - internalConsole: VS Code debug console (input stream not supported).
	//  - integratedTerminal: VS Code integrated terminal.
	//  - externalTerminal: External terminal that can be configured in user settings.
	"java.debug.settings.console": "integratedTerminal",

	// [Experimental]: Enable debugging support on the decompiled source code. Be aware that this feature may affect the loading speed of Call Stack Viewlet.
	"java.debug.settings.debugSupportOnDecompiledSource": "on",

	// Enable the run and debug code lens providers over main methods.
	"java.debug.settings.enableRunDebugCodeLens": true,

	// Specifies the allowed locations where the exception breakpoint can break on. Wildcard is supported, e.g. java.*, *.Foo
	"java.debug.settings.exceptionBreakpoint.allowClasses": [],

	// Specifies a set of exception types you want to break on, e.g. java.lang.NullPointerException. A specific exception type and its subclasses can be selected for caught exceptions, uncaught exceptions, or both can be selected.
	"java.debug.settings.exceptionBreakpoint.exceptionTypes": [],

	// Skip the specified classes when breaking on exception. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo
	"java.debug.settings.exceptionBreakpoint.skipClasses": [],

	// Force building the workspace before launching java program.
	"java.debug.settings.forceBuildBeforeLaunch": true,

	// Reload the changed Java classes during debugging.
	"java.debug.settings.hotCodeReplace": "manual",

	// Experimental: Controls whether the debugger is allowed to send JDWP commands asynchronously. Async mode can improve remote debugging response speed on high-latency networks.
	"java.debug.settings.jdwp.async": "auto",

	// The maximum number of variables or fields that can be requested in one JDWP request. The higher the value, the less frequently debuggee will be requested when expanding the variable view. Also a large number can cause JDWP request timeout.
	"java.debug.settings.jdwp.limitOfVariablesPerJdwpRequest": 100,

	// The timeout (ms) of JDWP request when the debugger communicates with the target JVM.
	"java.debug.settings.jdwp.requestTimeout": 3000,

	// The maximum length of strings displayed in "Variables" or "Debug Console" viewlet, strings longer than this length will be trimmed, if 0 no trim is performed.
	"java.debug.settings.maxStringLength": 0,

	// The precision when formatting doubles in "Variables" or "Debug Console" viewlet.
	"java.debug.settings.numericPrecision": 0,

	// Force to proceed when build fails
	"java.debug.settings.onBuildFailureProceed": false,

	// Show numbers in hex format in "Variables" viewlet.
	"java.debug.settings.showHex": false,

	// Show the logical structure for the Collection and Map classes in "Variables" viewlet.
	"java.debug.settings.showLogicalStructure": true,

	// Show fully qualified class names in "Variables" viewlet.
	"java.debug.settings.showQualifiedNames": false,

	// Show static variables in "Variables" viewlet.
	"java.debug.settings.showStaticVariables": false,

	// Show 'toString()' value for all classes that override 'toString' method in "Variables" viewlet.
	"java.debug.settings.showToString": true,

	// Skip the specified classes when stepping. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo
	"java.debug.settings.stepping.skipClasses": [],

	// Skip constructor methods when stepping.
	"java.debug.settings.stepping.skipConstructors": false,

	// Skip static initializer methods when stepping.
	"java.debug.settings.stepping.skipStaticInitializers": false,

	// Skip synthetic methods when stepping.
	"java.debug.settings.stepping.skipSynthetics": false,

	// The default VM arguments to launch the Java program. Eg. Use '-Xmx1G -ea' to increase the heap size to 1GB and enable assertions. If you want to customize the VM arguments for a specific debug session, please modify the 'vmArgs' config in launch.json.
	"java.debug.settings.vmArgs": "",

	// Controls whether notifications can be used to report progress. If true, use status bar to report progress instead.
	"java.silentNotification": false,

	// Synchronize Java Projects explorer with changes
	"java.dependency.autoRefresh": true,

	// Show reminders when your Java runtimes or dependencies need an upgrade.
	"java.dependency.enableDependencyCheckup": true,

	// Package presentation mode: flat or hierarchical
	"java.dependency.packagePresentation": "flat",

	// The delay time (ms) the auto refresh is invoked when changes are detected
	"java.dependency.refreshDelay": 2000,

	// Show the members in the explorer
	"java.dependency.showMembers": false,

	// Link Java Projects Explorer with the active editor
	"java.dependency.syncWithFolderExplorer": true,

	// When enabled, the explorer shows non-Java resources.
	"java.project.explorer.showNonJavaResources": true,

	// The output path of the exported jar. Leave it empty if you want to manually pick the output location.
	"java.project.exportJar.targetPath": "${workspaceFolder}/${workspaceFolderBasename}.jar",

	// Whether to send back detailed information from error logs for diagnostic purpose.
	"java.help.collectErrorLog": false,

	// Sets the default view which is presented during the first use.
	//  - auto: Automatically pick the first experience view
	//  - overview: Present the Java Overview page
	//  - gettingStarted: Present the Java Beginner Tips page
	//  - welcome: Present the Java Help Center page
	//  - none: Do not show any view
	"java.help.firstView": "auto",

	// Show release notes of Extension Pack for Java on startup.
	"java.help.showReleaseNotes": true,

	// Specify the configurations for running the tests.
	"java.test.config": {},

	// Specify the name of the default test configuration.
	"java.test.defaultConfig": "",

	// The timeout in seconds for a command to complete.
	"appModernization.commandTimeout": 3600,

	// Controls whether to show a quick pick dialog to ask user to pick a solution (when available) when there are required configuration invalid. If set to false, VSCode Copilot Agent is required to handle the invalidation.
	"appModernization.javaUpgrade.enableQuickPick": false,

	// Controls how uncommitted changes should be handled (A clean working tree without uncommitted changes is required to modernize (migrate/upgrade) a project).
	//  - Always Ask: Prompt user for a decision on how to handle uncommitted changes
	//  - Always Stash: Stash (temporarily store) all uncommitted changes for later retrieval
	//  - Always Commit: Commit all uncommitted changes to the current branch.
	//  - Always Discard: Discard all uncommitted changes (warning: discard action is irreversible).
	"appModernization.uncommittedChangesAction": "Always Stash",

	// Specify whether to show diagnostics for conflict dependencies.
	"maven.dependency.enableConflictDiagnostics": "true",

	// Specifies file path pattern of folders to exclude while searching for Maven projects.
	"maven.excludedFolders": [
		"**/.*",
		"**/node_modules",
		"**/target",
		"**/bin",
		"**/archetype-resources"
	],

	// Specifies default options for all mvn commands.
	"maven.executable.options": "",

	// Specifies absolute path of your 'mvn' executable. When this value is empty, it tries using 'mvn' or 'mvnw' according to the value of 'maven.executable.preferMavenWrapper'.
	"maven.executable.path": "",

	// Specifies whether you prefer to use Maven wrapper. If true, it tries using 'mvnw' by walking up the parent folders. If false, or 'mvnw' is not found, it tries 'mvn' in PATH instead.
	"maven.executable.preferMavenWrapper": "true",

	// Format of project node name shown in Maven explorer.
	"maven.explorer.projectName": "${project.name}",

	// Specifies whether to update effective-pom automatically whenever changes detected.
	"maven.pomfile.autoUpdateEffectivePOM": false,

	// Specifies the glob pattern used to look for pom.xml files.
	"maven.pomfile.globPattern": "**/pom.xml",

	// Specifies whether to prefetch effective pom on startup.
	"maven.pomfile.prefetchEffectivePom": false,

	// Default method of opening newly created project.
	"maven.projectOpenBehavior": "Interactive",

	// Specifies the absolute path of your maven configuration file, the default value is ~/.m2/settings.xml
	"maven.settingsFile": null,

	// If this value is true, add a command to create Maven Projects in the Explorer context menu for folders.
	"maven.showInExplorerContextMenu": "true",

	// Specifies an array of environment variable names and values. These environment variable values will be added to the terminal session before Maven is first executed.
	"maven.terminal.customEnv": [],

	// Specify pre-defined favorite commands to execute.
	"maven.terminal.favorites": [],

	// If this value is true, and if the setting java.home has a value, then the environment variable JAVA_HOME will be set to the value of java.home when a new terminal window is created.
	"maven.terminal.useJavaHome": false,

	// Specifies the way of viewing Maven projects.
	"maven.view": "flat",

	// Auto add space between double curly brackets: `{{|}}` -> `{{ | }}`
	"vue.autoInsert.bracketSpacing": true,

	// Auto-complete Ref value with `.value`.
	"vue.autoInsert.dotValue": false,

	// Ask for new component name when extract component.
	"vue.codeActions.askNewComponentName": true,

	// Fade top-level SFC tags.
	"vue.editor.focusMode": false,

	// Reactivity system visualization.
	"vue.editor.reactivityVisualization": true,

	// Enhanced template interpolation highlighting.
	"vue.editor.templateInterpolationDecorators": true,

	// Initial indent for `<script>` block.
	"vue.format.script.initialIndent": false,

	// Initial indent for `<style>` block.
	"vue.format.style.initialIndent": false,

	// Initial indent for `<template>` block.
	"vue.format.template.initialIndent": true,

	// Wrap attributes.
	"vue.format.wrapAttributes": "auto",

	// Show inlay hints for destructured props:
	// 
	// ```ts
	// watch(() => /* props. */foo, () => { ... });
	// ```
	"vue.inlayHints.destructuredProps": false,

	// Show inlay hints for event argument in inline handlers:
	// 
	// ```html
	// <Comp @foo="/* $event => */console.log($event)" />
	// ```
	"vue.inlayHints.inlineHandlerLeading": false,

	// Show inlay hints for missing required props:
	// 
	// ```html
	// <Comp />
	// <!-- ^ foo! -->
	// ```
	"vue.inlayHints.missingProps": false,

	// Show inlay hints for component options wrapper for type support:
	// 
	// ```vue
	// <script lang="ts">
	// export default /* (await import('vue')).defineComponent( */{}/* ) */;
	// </script>
	// ```
	"vue.inlayHints.optionsWrapper": false,

	// Show inlay hints for v-bind shorthand:
	// 
	// ```html
	// <Comp :foo />
	//      <!-- ^ ="foo" -->
	// ```
	"vue.inlayHints.vBindShorthand": false,

	// Configure the languages for which the extension should be activated.
	"vue.server.includeLanguages": [
		"vue"
	],

	// Path to the `@vue/language-server` module. If not set, the server will be loaded from the extension's bundled.
	"vue.server.path": "",

	// Preferred component name case.
	//  - preferKebabCase: Prefer kebab-case (lowercase with hyphens, e.g. my-component)
	//  - preferPascalCase: Prefer PascalCase (UpperCamelCase, e.g. MyComponent)
	//  - alwaysKebabCase: Always kebab-case (enforce kebab-case, e.g. my-component)
	//  - alwaysPascalCase: Always PascalCase (enforce PascalCase, e.g. MyComponent)
	"vue.suggest.componentNameCasing": "preferPascalCase",

	// Auto add `const props = ` before `defineProps` when selecting the completion item `props`. (also `emit` and `slots`)
	"vue.suggest.defineAssignment": true,

	// Preferred attr name case.
	//  - preferKebabCase: Prefer kebab-case (lowercase with hyphens, e.g. my-prop)
	//  - preferCamelCase: Prefer camelCase (lowerCamelCase, e.g. myProp)
	//  - alwaysKebabCase: Always kebab-case (enforce kebab-case, e.g. my-prop)
	//  - alwaysCamelCase: Always camelCase (enforce camelCase, e.g. myProp)
	"vue.suggest.propNameCasing": "preferKebabCase",

	// Traces the communication between VS Code and the language server.
	"vue.trace.server": "off",

	// Debug the Extension
	"WillLuke.debug": false,

	// Automatically add NextJS page types on save
	"WillLuke.nextjs.addTypesOnSave": false,

	// Hides Autotypes Prompt if it has been shown
	"WillLuke.nextjs.hasPrompted": false,

	// Option to set the path to a nextjs project
	"WillLuke.nextjs.root": "",

	// Use `**` or `__` to wrap bold text.
	"markdown.extension.bold.indicator": "**",

	// Whether to enable auto-completion.
	"markdown.extension.completion.enabled": false,

	// Whether to exclude files from auto-completion using VS Code's `search.exclude` setting. (`node_modules`, `bower_components` and `*.code-search` are **always excluded**, not affected by this option.)
	"markdown.extension.completion.respectVscodeSearchExclude": true,

	// The root folder for path auto-completion.
	"markdown.extension.completion.root": "",

	// List of extra supported languages (e.g., rmd, quarto), default [].
	"markdown.extension.extraLangIds": [],

	// Use `*` or `_` to wrap italic text.
	"markdown.extension.italic.indicator": "*",

	// User-defined KaTeX macros.
	"markdown.extension.katex.macros": {},

	// List indentation scheme. (Also affects TOC generation.)
	// 
	// Whether to use different indentation sizes on different list contexts or stick to VS Code's tab size.
	//  - adaptive: Adaptive indentation size according to the context, trying to **left align the sublist with its parent's content**. For example:
	// 
	// ```markdown
	// - Parent
	//   - Sublist
	// 
	// 1. Parent
	//    1. Sublist
	// 
	// 10. Parent with longer marker
	//     1. Sublist
	// ```
	//  - inherit: Use the configured tab size of the current document (see the status bar). For example (with `tabSize: 4`):
	// 
	// ```markdown
	// - Parent
	//     - Sublist
	// 
	// 1. Parent
	//     1. Sublist
	// 
	// 10. Parent with longer marker
	//     1. Sublist
	// ```
	"markdown.extension.list.indentationSize": "adaptive",

	// List candidate markers. It will cycle through those markers
	"markdown.extension.list.toggle.candidate-markers": [
		"-",
		"*",
		"+",
		"1.",
		"1)"
	],

	// Enable basic math support (Powered by KaTeX).
	"markdown.extension.math.enabled": true,

	// Auto fix ordered list markers.
	"markdown.extension.orderedList.autoRenumber": true,

	// Ordered list marker.
	//  - one: Always use `1.` as ordered list marker.
	//  - ordered: Use increasing numbers as ordered list marker.
	"markdown.extension.orderedList.marker": "ordered",

	// Auto show preview to side.
	"markdown.extension.preview.autoShowPreviewToSide": false,

	// Convert image path to absolute path.
	"markdown.extension.print.absoluteImgPath": true,

	// Convert images to base64 when printing to HTML.
	"markdown.extension.print.imgToBase64": false,

	// Include VS Code's basic Markdown styles so that the exported HTML looks similar as inside VS Code.
	"markdown.extension.print.includeVscodeStylesheets": true,

	// Print current document to HTML when file is saved.
	"markdown.extension.print.onFileSave": false,

	// Print current document to pure HTML (without any stylesheets).
	"markdown.extension.print.pureHtml": false,

	// Theme of the exported HTML. Only affects code blocks.
	"markdown.extension.print.theme": "light",

	// Enable/disable URL validation when printing.
	"markdown.extension.print.validateUrls": true,

	// Show buttons (e.g. toggle bold, italic) on the editor toolbar.
	"markdown.extension.showActionButtons": false,

	// If a file is larger than this size (in byte/B), we won't attempt to render syntax decorations.
	"markdown.extension.syntax.decorationFileSizeLimit": 50000,

	// (**Deprecated**) Use `markdown.extension.theming.decoration.renderCodeSpan` instead. See <https://github.com/yzhang-gh/vscode-markdown/issues/888> for details.
	// 
	"markdown.extension.syntax.decorations": null,

	// (**Experimental**) Report issue at <https://github.com/yzhang-gh/vscode-markdown/issues/185>.
	"markdown.extension.syntax.plainTheme": false,

	// Don't add padding to the delimiter row.
	"markdown.extension.tableFormatter.delimiterRowNoPadding": false,

	// Enable [GitHub Flavored Markdown](https://github.github.com/gfm/) table formatter.
	"markdown.extension.tableFormatter.enabled": true,

	// Normalize table indentation to closest multiple of configured editor tab size.
	"markdown.extension.tableFormatter.normalizeIndentation": false,

	// Apply a border around a [code span](https://spec.commonmark.org/0.29/#code-spans).
	"markdown.extension.theming.decoration.renderCodeSpan": true,

	// (**Experimental**)
	"markdown.extension.theming.decoration.renderHardLineBreak": false,

	// (**Experimental**)
	"markdown.extension.theming.decoration.renderLink": false,

	// (**Experimental**)
	"markdown.extension.theming.decoration.renderParagraph": false,

	// Show a line through the middle of a [strikethrough](https://github.github.com/gfm/#strikethrough-extension-).
	"markdown.extension.theming.decoration.renderStrikethrough": true,

	// Shade the background of trailing space (U+0020) characters on a [line](https://spec.commonmark.org/0.29/#line).
	"markdown.extension.theming.decoration.renderTrailingSpace": false,

	// Range of levels for table of contents. Use `x..y` for level `x` to `y`.
	"markdown.extension.toc.levels": "1..6",

	// Lists of headings to omit by project file.
	// Example:
	// { "README.md": ["# Introduction"] }
	"markdown.extension.toc.omittedFromToc": {},

	// Use ordered list, that is:
	// 1. ...
	// 2. ...
	"markdown.extension.toc.orderedList": false,

	// Just plain text TOC, no links.
	"markdown.extension.toc.plaintext": false,

	// The method to generate heading ID. This affects **links to headings** in **TOC**, **code completion**, and **printing**.
	//  - github: GitHub
	//  - azureDevops: Azure DevOps
	//  - bitbucket-cloud: Bitbucket Cloud
	//  - gitea: Gitea
	//  - gitlab: GitLab
	//  - vscode: Visual Studio Code
	//  - zola: Zola
	"markdown.extension.toc.slugifyMode": "github",

	// Use `-`, `*`, or `+` in the table of contents (for **unordered** list).
	"markdown.extension.toc.unorderedList.marker": "-",

	// Auto update TOC on save.
	"markdown.extension.toc.updateOnSave": true,

	// A list of CSS based languages where suggestions are enabled.
	"html-css-class-completion.CSSLanguages": [
		"css",
		"sass",
		"scss"
	],

	// Enables completion when you're writing Emmet abbreviations.
	"html-css-class-completion.enableEmmetSupport": false,

	// A glob pattern that defines files and folders to exclude. The glob pattern will be matched against the file paths of resulting matches relative to their workspace.
	"html-css-class-completion.excludeGlobPattern": "",

	// A list of HTML based languages where suggestions are enabled.
	"html-css-class-completion.HTMLLanguages": [
		"html",
		"vue",
		"razor",
		"blade",
		"handlebars",
		"twig",
		"django-html",
		"php",
		"markdown",
		"erb",
		"ejs",
		"svelte"
	],

	// A glob pattern that defines files and folders to search for. The glob pattern will be matched against the paths of resulting matches relative to their workspace.
	"html-css-class-completion.includeGlobPattern": "**/*.{css,html}",

	// A list of JavaScript based languages where suggestions are enabled.
	"html-css-class-completion.JavaScriptLanguages": [
		"javascript",
		"javascriptreact",
		"typescriptreact"
	],

}